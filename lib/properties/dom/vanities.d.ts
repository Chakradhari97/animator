declare let Layout3D: any;
declare let has: any;
declare let LAYOUT_3D_VANITIES: {
    "shown"(name: any, element: any, value: any): void;
    "opacity"(name: any, element: any, value: any): void;
    "rotation.x"(name: any, element: any, value: any): void;
    "rotation.y"(name: any, element: any, value: any): void;
    "rotation.z"(name: any, element: any, value: any): void;
    "rotation.w"(name: any, element: any, value: any): void;
    "position.x"(name: any, element: any, value: any): void;
    "position.y"(name: any, element: any, value: any): void;
    "align.x"(name: any, element: any, value: any): void;
    "align.y"(name: any, element: any, value: any): void;
    "align.z"(name: any, element: any, value: any): void;
    "mount.x"(name: any, element: any, value: any): void;
    "mount.y"(name: any, element: any, value: any): void;
    "mount.z"(name: any, element: any, value: any): void;
    "origin.x"(name: any, element: any, value: any): void;
    "origin.y"(name: any, element: any, value: any): void;
    "origin.z"(name: any, element: any, value: any): void;
    "scale.x"(name: any, element: any, value: any): void;
    "scale.y"(name: any, element: any, value: any): void;
    "scale.z"(name: any, element: any, value: any): void;
    "sizeAbsolute.x"(name: any, element: any, value: any): void;
    "sizeAbsolute.y"(name: any, element: any, value: any): void;
    "sizeAbsolute.z"(name: any, element: any, value: any): void;
    "sizeDifferential.x"(name: any, element: any, value: any): void;
    "sizeDifferential.y"(name: any, element: any, value: any): void;
    "sizeDifferential.z"(name: any, element: any, value: any): void;
    "sizeMode.x"(name: any, element: any, value: any): void;
    "sizeMode.y"(name: any, element: any, value: any): void;
    "sizeMode.z"(name: any, element: any, value: any): void;
    "sizeProportional.x"(name: any, element: any, value: any): void;
    "sizeProportional.y"(name: any, element: any, value: any): void;
    "sizeProportional.z"(name: any, element: any, value: any): void;
    "translation.x"(name: any, element: any, value: any): void;
    "translation.y"(name: any, element: any, value: any): void;
    "translation.z"(name: any, element: any, value: any): void;
};
declare let LAYOUT_2D_VANITIES: {};
declare function styleSetter(prop: any): (name: any, element: any, value: any) => void;
declare let STYLE_VANITIES: {
    "style.alignContent": (name: any, element: any, value: any) => void;
    "style.alignItems": (name: any, element: any, value: any) => void;
    "style.alignmentBaseline": (name: any, element: any, value: any) => void;
    "style.alignSelf": (name: any, element: any, value: any) => void;
    "style.all": (name: any, element: any, value: any) => void;
    "style.animation": (name: any, element: any, value: any) => void;
    "style.animationDelay": (name: any, element: any, value: any) => void;
    "style.animationDirection": (name: any, element: any, value: any) => void;
    "style.animationDuration": (name: any, element: any, value: any) => void;
    "style.animationFillMode": (name: any, element: any, value: any) => void;
    "style.animationIterationCount": (name: any, element: any, value: any) => void;
    "style.animationName": (name: any, element: any, value: any) => void;
    "style.animationPlayState": (name: any, element: any, value: any) => void;
    "style.animationTimingFunction": (name: any, element: any, value: any) => void;
    "style.appearance": (name: any, element: any, value: any) => void;
    "style.azimuth": (name: any, element: any, value: any) => void;
    "style.backfaceVisibility": (name: any, element: any, value: any) => void;
    "style.background": (name: any, element: any, value: any) => void;
    "style.backgroundAttachment": (name: any, element: any, value: any) => void;
    "style.backgroundBlendMode": (name: any, element: any, value: any) => void;
    "style.backgroundClip": (name: any, element: any, value: any) => void;
    "style.backgroundColor": (name: any, element: any, value: any) => void;
    "style.backgroundimage": (name: any, element: any, value: any) => void;
    "style.backgroundorigin": (name: any, element: any, value: any) => void;
    "style.backgroundposition": (name: any, element: any, value: any) => void;
    "style.backgroundRepeat": (name: any, element: any, value: any) => void;
    "style.backgroundSize": (name: any, element: any, value: any) => void;
    "style.baselineShift": (name: any, element: any, value: any) => void;
    "style.bookmarkLabel": (name: any, element: any, value: any) => void;
    "style.bookmarkLevel": (name: any, element: any, value: any) => void;
    "style.bookmarkState": (name: any, element: any, value: any) => void;
    "style.border": (name: any, element: any, value: any) => void;
    "style.borderBottom": (name: any, element: any, value: any) => void;
    "style.borderBottomColor": (name: any, element: any, value: any) => void;
    "style.borderBottomLeftRadius": (name: any, element: any, value: any) => void;
    "style.borderBottomRightRadius": (name: any, element: any, value: any) => void;
    "style.borderBottomStyle": (name: any, element: any, value: any) => void;
    "style.borderBottomWidth": (name: any, element: any, value: any) => void;
    "style.borderBoundary": (name: any, element: any, value: any) => void;
    "style.borderCollapse": (name: any, element: any, value: any) => void;
    "style.borderColor": (name: any, element: any, value: any) => void;
    "style.borderImage": (name: any, element: any, value: any) => void;
    "style.borderImageOutset": (name: any, element: any, value: any) => void;
    "style.borderImageRepeat": (name: any, element: any, value: any) => void;
    "style.borderImageSlice": (name: any, element: any, value: any) => void;
    "style.borderImageSource": (name: any, element: any, value: any) => void;
    "style.borderImageWidth": (name: any, element: any, value: any) => void;
    "style.borderLeft": (name: any, element: any, value: any) => void;
    "style.borderLeftColor": (name: any, element: any, value: any) => void;
    "style.borderLeftStyle": (name: any, element: any, value: any) => void;
    "style.borderLeftWidth": (name: any, element: any, value: any) => void;
    "style.borderRadius": (name: any, element: any, value: any) => void;
    "style.borderRight": (name: any, element: any, value: any) => void;
    "style.borderRightColor": (name: any, element: any, value: any) => void;
    "style.borderRightStyle": (name: any, element: any, value: any) => void;
    "style.borderRightWidth": (name: any, element: any, value: any) => void;
    "style.borderSpacing": (name: any, element: any, value: any) => void;
    "style.borderStyle": (name: any, element: any, value: any) => void;
    "style.borderTop": (name: any, element: any, value: any) => void;
    "style.borderTopColor": (name: any, element: any, value: any) => void;
    "style.borderTopLeftRadius": (name: any, element: any, value: any) => void;
    "style.borderTopRightRadius": (name: any, element: any, value: any) => void;
    "style.borderTopStyle": (name: any, element: any, value: any) => void;
    "style.borderTopWidth": (name: any, element: any, value: any) => void;
    "style.borderWidth": (name: any, element: any, value: any) => void;
    "style.bottom": (name: any, element: any, value: any) => void;
    "style.boxDecorationBreak": (name: any, element: any, value: any) => void;
    "style.boxShadow": (name: any, element: any, value: any) => void;
    "style.boxSizing": (name: any, element: any, value: any) => void;
    "style.boxSnap": (name: any, element: any, value: any) => void;
    "style.boxSuppress": (name: any, element: any, value: any) => void;
    "style.breakAfter": (name: any, element: any, value: any) => void;
    "style.breakBefore": (name: any, element: any, value: any) => void;
    "style.breakInside": (name: any, element: any, value: any) => void;
    "style.captionSide": (name: any, element: any, value: any) => void;
    "style.caret": (name: any, element: any, value: any) => void;
    "style.caretAnimation": (name: any, element: any, value: any) => void;
    "style.caretColor": (name: any, element: any, value: any) => void;
    "style.caretShape": (name: any, element: any, value: any) => void;
    "style.chains": (name: any, element: any, value: any) => void;
    "style.clear": (name: any, element: any, value: any) => void;
    "style.clip": (name: any, element: any, value: any) => void;
    "style.clipPath": (name: any, element: any, value: any) => void;
    "style.clipRule": (name: any, element: any, value: any) => void;
    "style.color": (name: any, element: any, value: any) => void;
    "style.colorAdjust": (name: any, element: any, value: any) => void;
    "style.colorInterpolation": (name: any, element: any, value: any) => void;
    "style.colorInterpolationFilters": (name: any, element: any, value: any) => void;
    "style.colorProfile": (name: any, element: any, value: any) => void;
    "style.colorRendering": (name: any, element: any, value: any) => void;
    "style.columnCount": (name: any, element: any, value: any) => void;
    "style.columnFill": (name: any, element: any, value: any) => void;
    "style.columnGap": (name: any, element: any, value: any) => void;
    "style.columnRule": (name: any, element: any, value: any) => void;
    "style.columnRuleColor": (name: any, element: any, value: any) => void;
    "style.columnRuleStyle": (name: any, element: any, value: any) => void;
    "style.columnRuleWidth": (name: any, element: any, value: any) => void;
    "style.columns": (name: any, element: any, value: any) => void;
    "style.columnSpan": (name: any, element: any, value: any) => void;
    "style.columnWidth": (name: any, element: any, value: any) => void;
    "style.content": (name: any, element: any, value: any) => void;
    "style.continue": (name: any, element: any, value: any) => void;
    "style.counterIncrement": (name: any, element: any, value: any) => void;
    "style.counterReset": (name: any, element: any, value: any) => void;
    "style.counterSet": (name: any, element: any, value: any) => void;
    "style.cue": (name: any, element: any, value: any) => void;
    "style.cueAfter": (name: any, element: any, value: any) => void;
    "style.cueBefore": (name: any, element: any, value: any) => void;
    "style.cursor": (name: any, element: any, value: any) => void;
    "style.direction": (name: any, element: any, value: any) => void;
    "style.display": (name: any, element: any, value: any) => void;
    "style.dominantBaseline": (name: any, element: any, value: any) => void;
    "style.elevation": (name: any, element: any, value: any) => void;
    "style.emptyCells": (name: any, element: any, value: any) => void;
    "style.enableBackground": (name: any, element: any, value: any) => void;
    "style.fill": (name: any, element: any, value: any) => void;
    "style.fillOpacity": (name: any, element: any, value: any) => void;
    "style.fillRule": (name: any, element: any, value: any) => void;
    "style.filter": (name: any, element: any, value: any) => void;
    "style.flex": (name: any, element: any, value: any) => void;
    "style.flexBasis": (name: any, element: any, value: any) => void;
    "style.flexDirection": (name: any, element: any, value: any) => void;
    "style.flexFlow": (name: any, element: any, value: any) => void;
    "style.flexGrow": (name: any, element: any, value: any) => void;
    "style.flexShrink": (name: any, element: any, value: any) => void;
    "style.flexWrap": (name: any, element: any, value: any) => void;
    "style.float": (name: any, element: any, value: any) => void;
    "style.floatDefer": (name: any, element: any, value: any) => void;
    "style.floatOffset": (name: any, element: any, value: any) => void;
    "style.floatReference": (name: any, element: any, value: any) => void;
    "style.floodColor": (name: any, element: any, value: any) => void;
    "style.floodOpacity": (name: any, element: any, value: any) => void;
    "style.flow": (name: any, element: any, value: any) => void;
    "style.flowFrom": (name: any, element: any, value: any) => void;
    "style.flowInto": (name: any, element: any, value: any) => void;
    "style.font": (name: any, element: any, value: any) => void;
    "style.fontFamily": (name: any, element: any, value: any) => void;
    "style.fontFeatureSettings": (name: any, element: any, value: any) => void;
    "style.fontKerning": (name: any, element: any, value: any) => void;
    "style.fontLanguageOverride": (name: any, element: any, value: any) => void;
    "style.fontSize": (name: any, element: any, value: any) => void;
    "style.fontSizeAdjust": (name: any, element: any, value: any) => void;
    "style.fontStretch": (name: any, element: any, value: any) => void;
    "style.fontStyle": (name: any, element: any, value: any) => void;
    "style.fontSynthesis": (name: any, element: any, value: any) => void;
    "style.fontVariant": (name: any, element: any, value: any) => void;
    "style.fontVariantAlternates": (name: any, element: any, value: any) => void;
    "style.fontVariantCaps": (name: any, element: any, value: any) => void;
    "style.fontVariantEastAsian": (name: any, element: any, value: any) => void;
    "style.fontVariantLigatures": (name: any, element: any, value: any) => void;
    "style.fontVariantNumeric": (name: any, element: any, value: any) => void;
    "style.fontVariantPosition": (name: any, element: any, value: any) => void;
    "style.fontWeight": (name: any, element: any, value: any) => void;
    "style.footnoteDisplay": (name: any, element: any, value: any) => void;
    "style.footnotePolicy": (name: any, element: any, value: any) => void;
    "style.glyphOrientationHorizontal": (name: any, element: any, value: any) => void;
    "style.glyphOrientationVertical": (name: any, element: any, value: any) => void;
    "style.grid": (name: any, element: any, value: any) => void;
    "style.gridArea": (name: any, element: any, value: any) => void;
    "style.gridAutoColumns": (name: any, element: any, value: any) => void;
    "style.gridAutoFlow": (name: any, element: any, value: any) => void;
    "style.gridAutoRows": (name: any, element: any, value: any) => void;
    "style.gridColumn": (name: any, element: any, value: any) => void;
    "style.gridColumnEnd": (name: any, element: any, value: any) => void;
    "style.gridColumnGap": (name: any, element: any, value: any) => void;
    "style.gridColumnStart": (name: any, element: any, value: any) => void;
    "style.gridGap": (name: any, element: any, value: any) => void;
    "style.gridRow": (name: any, element: any, value: any) => void;
    "style.gridRowEnd": (name: any, element: any, value: any) => void;
    "style.gridRowGap": (name: any, element: any, value: any) => void;
    "style.gridRowStart": (name: any, element: any, value: any) => void;
    "style.gridTemplate": (name: any, element: any, value: any) => void;
    "style.gridTemplateAreas": (name: any, element: any, value: any) => void;
    "style.gridTemplateColumns": (name: any, element: any, value: any) => void;
    "style.gridTemplateRows": (name: any, element: any, value: any) => void;
    "style.hangingPunctuation": (name: any, element: any, value: any) => void;
    "style.height": (name: any, element: any, value: any) => void;
    "style.hyphenateCharacter": (name: any, element: any, value: any) => void;
    "style.hyphenateLimitChars": (name: any, element: any, value: any) => void;
    "style.hyphenateLimitLast": (name: any, element: any, value: any) => void;
    "style.hyphenateLimitLines": (name: any, element: any, value: any) => void;
    "style.hyphenateLimitZone": (name: any, element: any, value: any) => void;
    "style.hyphens": (name: any, element: any, value: any) => void;
    "style.imageOrientation": (name: any, element: any, value: any) => void;
    "style.imageRendering": (name: any, element: any, value: any) => void;
    "style.imageResolution": (name: any, element: any, value: any) => void;
    "style.initialLetter": (name: any, element: any, value: any) => void;
    "style.initialLetterAlign": (name: any, element: any, value: any) => void;
    "style.initialLetterWrap": (name: any, element: any, value: any) => void;
    "style.isolation": (name: any, element: any, value: any) => void;
    "style.justifyContent": (name: any, element: any, value: any) => void;
    "style.justifyItems": (name: any, element: any, value: any) => void;
    "style.justifySelf": (name: any, element: any, value: any) => void;
    "style.kerning": (name: any, element: any, value: any) => void;
    "style.left": (name: any, element: any, value: any) => void;
    "style.letterSpacing": (name: any, element: any, value: any) => void;
    "style.lightingColor": (name: any, element: any, value: any) => void;
    "style.lineBreak": (name: any, element: any, value: any) => void;
    "style.lineGrid": (name: any, element: any, value: any) => void;
    "style.lineHeight": (name: any, element: any, value: any) => void;
    "style.lineSnap": (name: any, element: any, value: any) => void;
    "style.listStyle": (name: any, element: any, value: any) => void;
    "style.listStyleImage": (name: any, element: any, value: any) => void;
    "style.listStylePosition": (name: any, element: any, value: any) => void;
    "style.listStyleType": (name: any, element: any, value: any) => void;
    "style.margin": (name: any, element: any, value: any) => void;
    "style.marginBottom": (name: any, element: any, value: any) => void;
    "style.marginLeft": (name: any, element: any, value: any) => void;
    "style.marginRight": (name: any, element: any, value: any) => void;
    "style.marginTop": (name: any, element: any, value: any) => void;
    "style.marker": (name: any, element: any, value: any) => void;
    "style.markerEnd": (name: any, element: any, value: any) => void;
    "style.markerKnockoutLeft": (name: any, element: any, value: any) => void;
    "style.markerKnockoutRight": (name: any, element: any, value: any) => void;
    "style.markerMid": (name: any, element: any, value: any) => void;
    "style.markerPattern": (name: any, element: any, value: any) => void;
    "style.markerSegment": (name: any, element: any, value: any) => void;
    "style.markerSide": (name: any, element: any, value: any) => void;
    "style.markerStart": (name: any, element: any, value: any) => void;
    "style.marqueeDirection": (name: any, element: any, value: any) => void;
    "style.marqueeLoop": (name: any, element: any, value: any) => void;
    "style.marqueeSpeed": (name: any, element: any, value: any) => void;
    "style.marqueeStyle": (name: any, element: any, value: any) => void;
    "style.mask": (name: any, element: any, value: any) => void;
    "style.maskBorder": (name: any, element: any, value: any) => void;
    "style.maskBorderMode": (name: any, element: any, value: any) => void;
    "style.maskBorderOutset": (name: any, element: any, value: any) => void;
    "style.maskBorderRepeat": (name: any, element: any, value: any) => void;
    "style.maskBorderSlice": (name: any, element: any, value: any) => void;
    "style.maskBorderSource": (name: any, element: any, value: any) => void;
    "style.maskBorderWidth": (name: any, element: any, value: any) => void;
    "style.maskClip": (name: any, element: any, value: any) => void;
    "style.maskComposite": (name: any, element: any, value: any) => void;
    "style.maskImage": (name: any, element: any, value: any) => void;
    "style.maskMode": (name: any, element: any, value: any) => void;
    "style.maskOrigin": (name: any, element: any, value: any) => void;
    "style.maskPosition": (name: any, element: any, value: any) => void;
    "style.maskRepeat": (name: any, element: any, value: any) => void;
    "style.maskSize": (name: any, element: any, value: any) => void;
    "style.maskType": (name: any, element: any, value: any) => void;
    "style.maxHeight": (name: any, element: any, value: any) => void;
    "style.maxLines": (name: any, element: any, value: any) => void;
    "style.maxWidth": (name: any, element: any, value: any) => void;
    "style.minHeight": (name: any, element: any, value: any) => void;
    "style.minWidth": (name: any, element: any, value: any) => void;
    "style.mixBlendMode": (name: any, element: any, value: any) => void;
    "style.motion": (name: any, element: any, value: any) => void;
    "style.motionOffset": (name: any, element: any, value: any) => void;
    "style.motionPath": (name: any, element: any, value: any) => void;
    "style.motionRotation": (name: any, element: any, value: any) => void;
    "style.navDown": (name: any, element: any, value: any) => void;
    "style.navLeft": (name: any, element: any, value: any) => void;
    "style.navRight": (name: any, element: any, value: any) => void;
    "style.navUp": (name: any, element: any, value: any) => void;
    "style.objectFit": (name: any, element: any, value: any) => void;
    "style.objectPosition": (name: any, element: any, value: any) => void;
    "style.offset": (name: any, element: any, value: any) => void;
    "style.offsetAfter": (name: any, element: any, value: any) => void;
    "style.offsetAnchor": (name: any, element: any, value: any) => void;
    "style.offsetBefore": (name: any, element: any, value: any) => void;
    "style.offsetDistance": (name: any, element: any, value: any) => void;
    "style.offsetEnd": (name: any, element: any, value: any) => void;
    "style.offsetPath": (name: any, element: any, value: any) => void;
    "style.offsetPosition": (name: any, element: any, value: any) => void;
    "style.offsetRotate": (name: any, element: any, value: any) => void;
    "style.offsetStart": (name: any, element: any, value: any) => void;
    "style.opacity": (name: any, element: any, value: any) => void;
    "style.order": (name: any, element: any, value: any) => void;
    "style.orphans": (name: any, element: any, value: any) => void;
    "style.outline": (name: any, element: any, value: any) => void;
    "style.outlineColor": (name: any, element: any, value: any) => void;
    "style.outlineOffset": (name: any, element: any, value: any) => void;
    "style.outlineStyle": (name: any, element: any, value: any) => void;
    "style.outlineWidth": (name: any, element: any, value: any) => void;
    "style.overflow": (name: any, element: any, value: any) => void;
    "style.overflowStyle": (name: any, element: any, value: any) => void;
    "style.overflowWrap": (name: any, element: any, value: any) => void;
    "style.overflowX": (name: any, element: any, value: any) => void;
    "style.overflowY": (name: any, element: any, value: any) => void;
    "style.padding": (name: any, element: any, value: any) => void;
    "style.paddingBottom": (name: any, element: any, value: any) => void;
    "style.paddingLeft": (name: any, element: any, value: any) => void;
    "style.paddingRight": (name: any, element: any, value: any) => void;
    "style.paddingTop": (name: any, element: any, value: any) => void;
    "style.page": (name: any, element: any, value: any) => void;
    "style.pageBreakAfter": (name: any, element: any, value: any) => void;
    "style.pageBreakBefore": (name: any, element: any, value: any) => void;
    "style.pageBreakInside": (name: any, element: any, value: any) => void;
    "style.pause": (name: any, element: any, value: any) => void;
    "style.pauseAfter": (name: any, element: any, value: any) => void;
    "style.pauseBefore": (name: any, element: any, value: any) => void;
    "style.perspective": (name: any, element: any, value: any) => void;
    "style.perspectiveOrigin": (name: any, element: any, value: any) => void;
    "style.pitch": (name: any, element: any, value: any) => void;
    "style.pitchRange": (name: any, element: any, value: any) => void;
    "style.placeContent": (name: any, element: any, value: any) => void;
    "style.placeItems": (name: any, element: any, value: any) => void;
    "style.placeSelf": (name: any, element: any, value: any) => void;
    "style.playDuring": (name: any, element: any, value: any) => void;
    "style.pointerEvents": (name: any, element: any, value: any) => void;
    "style.polarAnchor": (name: any, element: any, value: any) => void;
    "style.polarAngle": (name: any, element: any, value: any) => void;
    "style.polarDistance": (name: any, element: any, value: any) => void;
    "style.polarOrigin": (name: any, element: any, value: any) => void;
    "style.position": (name: any, element: any, value: any) => void;
    "style.presentationLevel": (name: any, element: any, value: any) => void;
    "style.quotes": (name: any, element: any, value: any) => void;
    "style.regionFragment": (name: any, element: any, value: any) => void;
    "style.resize": (name: any, element: any, value: any) => void;
    "style.rest": (name: any, element: any, value: any) => void;
    "style.restAfter": (name: any, element: any, value: any) => void;
    "style.restBefore": (name: any, element: any, value: any) => void;
    "style.richness": (name: any, element: any, value: any) => void;
    "style.right": (name: any, element: any, value: any) => void;
    "style.rotation": (name: any, element: any, value: any) => void;
    "style.rotationPoint": (name: any, element: any, value: any) => void;
    "style.rubyAlign": (name: any, element: any, value: any) => void;
    "style.rubyMerge": (name: any, element: any, value: any) => void;
    "style.rubyPosition": (name: any, element: any, value: any) => void;
    "style.running": (name: any, element: any, value: any) => void;
    "style.scrollBehavior": (name: any, element: any, value: any) => void;
    "style.scrollPadding": (name: any, element: any, value: any) => void;
    "style.scrollPaddingBlock": (name: any, element: any, value: any) => void;
    "style.scrollPaddingBlockEnd": (name: any, element: any, value: any) => void;
    "style.scrollPaddingBlockStart": (name: any, element: any, value: any) => void;
    "style.scrollPaddingBottom": (name: any, element: any, value: any) => void;
    "style.scrollPaddingInline": (name: any, element: any, value: any) => void;
    "style.scrollPaddingInlineEnd": (name: any, element: any, value: any) => void;
    "style.scrollPaddingInlineStart": (name: any, element: any, value: any) => void;
    "style.scrollPaddingLeft": (name: any, element: any, value: any) => void;
    "style.scrollPaddingRight": (name: any, element: any, value: any) => void;
    "style.scrollPaddingTop": (name: any, element: any, value: any) => void;
    "style.scrollSnapAlign": (name: any, element: any, value: any) => void;
    "style.scrollSnapMargin": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginBlock": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginBlockEnd": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginBlockStart": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginBottom": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginInline": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginInlineEnd": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginInlineStart": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginLeft": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginRight": (name: any, element: any, value: any) => void;
    "style.scrollSnapMarginTop": (name: any, element: any, value: any) => void;
    "style.scrollSnapStop": (name: any, element: any, value: any) => void;
    "style.scrollSnapType": (name: any, element: any, value: any) => void;
    "style.shapeImageThreshold": (name: any, element: any, value: any) => void;
    "style.shapeInside": (name: any, element: any, value: any) => void;
    "style.shapeMargin": (name: any, element: any, value: any) => void;
    "style.shapeOutside": (name: any, element: any, value: any) => void;
    "style.shapeRendering": (name: any, element: any, value: any) => void;
    "style.size": (name: any, element: any, value: any) => void;
    "style.speak": (name: any, element: any, value: any) => void;
    "style.speakAs": (name: any, element: any, value: any) => void;
    "style.speakHeader": (name: any, element: any, value: any) => void;
    "style.speakNumeral": (name: any, element: any, value: any) => void;
    "style.speakPunctuation": (name: any, element: any, value: any) => void;
    "style.speechRate": (name: any, element: any, value: any) => void;
    "style.stopColor": (name: any, element: any, value: any) => void;
    "style.stopOpacity": (name: any, element: any, value: any) => void;
    "style.stress": (name: any, element: any, value: any) => void;
    "style.stringSet": (name: any, element: any, value: any) => void;
    "style.stroke": (name: any, element: any, value: any) => void;
    "style.strokeAlignment": (name: any, element: any, value: any) => void;
    "style.strokeDashadjust": (name: any, element: any, value: any) => void;
    "style.strokeDasharray": (name: any, element: any, value: any) => void;
    "style.strokeDashcorner": (name: any, element: any, value: any) => void;
    "style.strokeDashoffset": (name: any, element: any, value: any) => void;
    "style.strokeLinecap": (name: any, element: any, value: any) => void;
    "style.strokeLinejoin": (name: any, element: any, value: any) => void;
    "style.strokeMiterlimit": (name: any, element: any, value: any) => void;
    "style.strokeOpacity": (name: any, element: any, value: any) => void;
    "style.strokeWidth": (name: any, element: any, value: any) => void;
    "style.tableLayout": (name: any, element: any, value: any) => void;
    "style.tabSize": (name: any, element: any, value: any) => void;
    "style.textAlign": (name: any, element: any, value: any) => void;
    "style.textAlignAll": (name: any, element: any, value: any) => void;
    "style.textAlignLast": (name: any, element: any, value: any) => void;
    "style.textAnchor": (name: any, element: any, value: any) => void;
    "style.textCombineUpright": (name: any, element: any, value: any) => void;
    "style.textDecoration": (name: any, element: any, value: any) => void;
    "style.textDecorationColor": (name: any, element: any, value: any) => void;
    "style.textDecorationLine": (name: any, element: any, value: any) => void;
    "style.textDecorationSkip": (name: any, element: any, value: any) => void;
    "style.textDecorationStyle": (name: any, element: any, value: any) => void;
    "style.textEmphasis": (name: any, element: any, value: any) => void;
    "style.textEmphasisColor": (name: any, element: any, value: any) => void;
    "style.textEmphasisPosition": (name: any, element: any, value: any) => void;
    "style.textEmphasisStyle": (name: any, element: any, value: any) => void;
    "style.textIndent": (name: any, element: any, value: any) => void;
    "style.textJustify": (name: any, element: any, value: any) => void;
    "style.textOrientation": (name: any, element: any, value: any) => void;
    "style.textOverflow": (name: any, element: any, value: any) => void;
    "style.textRendering": (name: any, element: any, value: any) => void;
    "style.textShadow": (name: any, element: any, value: any) => void;
    "style.textSpaceCollapse": (name: any, element: any, value: any) => void;
    "style.textSpaceTrim": (name: any, element: any, value: any) => void;
    "style.textSpacing": (name: any, element: any, value: any) => void;
    "style.textTransform": (name: any, element: any, value: any) => void;
    "style.textUnderlinePosition": (name: any, element: any, value: any) => void;
    "style.textWrap": (name: any, element: any, value: any) => void;
    "style.top": (name: any, element: any, value: any) => void;
    "style.transform": (name: any, element: any, value: any) => void;
    "style.transformBox": (name: any, element: any, value: any) => void;
    "style.transformOrigin": (name: any, element: any, value: any) => void;
    "style.transformStyle": (name: any, element: any, value: any) => void;
    "style.transition": (name: any, element: any, value: any) => void;
    "style.transitionDelay": (name: any, element: any, value: any) => void;
    "style.transitionDuration": (name: any, element: any, value: any) => void;
    "style.transitionProperty": (name: any, element: any, value: any) => void;
    "style.transitionTimingFunction": (name: any, element: any, value: any) => void;
    "style.unicodeBidi": (name: any, element: any, value: any) => void;
    "style.userSelect": (name: any, element: any, value: any) => void;
    "style.verticalAlign": (name: any, element: any, value: any) => void;
    "style.visibility": (name: any, element: any, value: any) => void;
    "style.voiceBalance": (name: any, element: any, value: any) => void;
    "style.voiceDuration": (name: any, element: any, value: any) => void;
    "style.voiceFamily": (name: any, element: any, value: any) => void;
    "style.voicePitch": (name: any, element: any, value: any) => void;
    "style.voiceRange": (name: any, element: any, value: any) => void;
    "style.voiceRate": (name: any, element: any, value: any) => void;
    "style.voiceStress": (name: any, element: any, value: any) => void;
    "style.voiceVolume": (name: any, element: any, value: any) => void;
    "style.volume": (name: any, element: any, value: any) => void;
    "style.whiteSpace": (name: any, element: any, value: any) => void;
    "style.widows": (name: any, element: any, value: any) => void;
    "style.width": (name: any, element: any, value: any) => void;
    "style.willChange": (name: any, element: any, value: any) => void;
    "style.wordBreak": (name: any, element: any, value: any) => void;
    "style.wordSpacing": (name: any, element: any, value: any) => void;
    "style.wordWrap": (name: any, element: any, value: any) => void;
    "style.wrapAfter": (name: any, element: any, value: any) => void;
    "style.wrapBefore": (name: any, element: any, value: any) => void;
    "style.wrapFlow": (name: any, element: any, value: any) => void;
    "style.wrapInside": (name: any, element: any, value: any) => void;
    "style.wrapThrough": (name: any, element: any, value: any) => void;
    "style.writingMode": (name: any, element: any, value: any) => void;
    "style.zIndex": (name: any, element: any, value: any) => void;
    "style.WebkitTapHighlightColor"(name: any, element: any, value: any): void;
};
declare let TEXT_CONTENT_VANITIES: {
    content(name: any, element: any, value: any): void;
};
declare function attributeSetter(prop: any): (name: any, element: any, value: any) => void;
declare let PRESENTATION_VANITIES: {
    alignmentBaseline: (name: any, element: any, value: any) => void;
    baselineShift: (name: any, element: any, value: any) => void;
    clipPath: (name: any, element: any, value: any) => void;
    clipRule: (name: any, element: any, value: any) => void;
    clip: (name: any, element: any, value: any) => void;
    colorInterpolationFilters: (name: any, element: any, value: any) => void;
    colorInterpolation: (name: any, element: any, value: any) => void;
    colorProfile: (name: any, element: any, value: any) => void;
    colorRendering: (name: any, element: any, value: any) => void;
    color: (name: any, element: any, value: any) => void;
    cursor: (name: any, element: any, value: any) => void;
    direction: (name: any, element: any, value: any) => void;
    display: (name: any, element: any, value: any) => void;
    dominantBaseline: (name: any, element: any, value: any) => void;
    enableBackground: (name: any, element: any, value: any) => void;
    fillOpacity: (name: any, element: any, value: any) => void;
    fillRule: (name: any, element: any, value: any) => void;
    fill: (name: any, element: any, value: any) => void;
    filter: (name: any, element: any, value: any) => void;
    floodColor: (name: any, element: any, value: any) => void;
    floodOpacity: (name: any, element: any, value: any) => void;
    fontFamily: (name: any, element: any, value: any) => void;
    fontSizeAdjust: (name: any, element: any, value: any) => void;
    fontSize: (name: any, element: any, value: any) => void;
    fontStretch: (name: any, element: any, value: any) => void;
    fontStyle: (name: any, element: any, value: any) => void;
    fontVariant: (name: any, element: any, value: any) => void;
    fontWeight: (name: any, element: any, value: any) => void;
    glyphOrientationHorizontal: (name: any, element: any, value: any) => void;
    glyphOrientationVertical: (name: any, element: any, value: any) => void;
    imageRendering: (name: any, element: any, value: any) => void;
    kerning: (name: any, element: any, value: any) => void;
    letterSpacing: (name: any, element: any, value: any) => void;
    lightingColor: (name: any, element: any, value: any) => void;
    markerEnd: (name: any, element: any, value: any) => void;
    markerMid: (name: any, element: any, value: any) => void;
    markerStart: (name: any, element: any, value: any) => void;
    mask: (name: any, element: any, value: any) => void;
    opacity(name: any, element: any, value: any): void;
    overflow: (name: any, element: any, value: any) => void;
    pointerEvents: (name: any, element: any, value: any) => void;
    shapeRendering: (name: any, element: any, value: any) => void;
    stopColor: (name: any, element: any, value: any) => void;
    stopOpacity: (name: any, element: any, value: any) => void;
    strokeDasharray: (name: any, element: any, value: any) => void;
    strokeDashoffset: (name: any, element: any, value: any) => void;
    strokeLinecap: (name: any, element: any, value: any) => void;
    strokeLinejoin: (name: any, element: any, value: any) => void;
    strokeMiterlimit: (name: any, element: any, value: any) => void;
    strokeOpacity: (name: any, element: any, value: any) => void;
    strokeWidth: (name: any, element: any, value: any) => void;
    stroke: (name: any, element: any, value: any) => void;
    textAnchor: (name: any, element: any, value: any) => void;
    textDecoration: (name: any, element: any, value: any) => void;
    textRendering: (name: any, element: any, value: any) => void;
    unicodeBidi: (name: any, element: any, value: any) => void;
    visibility: (name: any, element: any, value: any) => void;
    wordSpacing: (name: any, element: any, value: any) => void;
    writingMode: (name: any, element: any, value: any) => void;
};
declare let FILTER_VANITIES: {
    x: (name: any, element: any, value: any) => void;
    y: (name: any, element: any, value: any) => void;
    width: (name: any, element: any, value: any) => void;
    height: (name: any, element: any, value: any) => void;
    filterRes: (name: any, element: any, value: any) => void;
    filterUnits: (name: any, element: any, value: any) => void;
    primitiveUnits: (name: any, element: any, value: any) => void;
};
declare let HTML_STYLE_SHORTHAND_VANITIES: {
    backgroundColor(name: any, element: any, value: any): void;
    zIndex(name: any, element: any, value: any): void;
};
declare let CONTROL_FLOW_VANITIES: {
    "controlFlow.placeholder"(name: any, element: any, value: any, context: any, component: any): any;
};
declare function controlFlowPlaceholderImpl(element: any, surrogate: any, value: any, context: any, component: any): void;
