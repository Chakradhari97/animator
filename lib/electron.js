'use strict';

var path = require('path');
var electron = require('electron');
var ipcMain = electron.ipcMain;
var systemPreferences = electron.systemPreferences;
var app = electron.app;
var EventEmitter = require('events').EventEmitter;
var util = require('util');

if (!app) {
  throw new Error('You can only run electron.js from an electron process');
}

var TopMenu = require('./TopMenu');

systemPreferences.setUserDefault('NSDisabledDictationMenuItem', 'boolean', true);
systemPreferences.setUserDefault('NSDisabledCharacterPaletteMenuItem', 'boolean', true);

app.setName('Haiku');

// See bottom
function CreatorElectron() {
  EventEmitter.apply(this);
}
util.inherits(CreatorElectron, EventEmitter);
var creator = new CreatorElectron();

var BrowserWindow = electron.BrowserWindow;
var autoUpdate = require('./utils/autoUpdate');
var mixpanel = require('./utils/Mixpanel');
var dialog = require('electron').dialog;

var URL = 'file://' + path.join(__dirname, '..', 'index.html');

// Plumbing starts up this process, and it uses HAIKU_ENV to forward to us data about
// how it has been set up, e.g. what ports it is using for websocket server, envoy, etc.
// This is sent into the DOM part of the app at did-finish load; see below.
var haiku = JSON.parse(process.env.HAIKU_ENV || '{}');

if (!haiku.folder) haiku.folder = process.env.HAIKU_PROJECT_FOLDER;

var browserWindow = null;

app.on('window-all-closed', function () {
  app.quit();
});

if (!haiku.plumbing) haiku.plumbing = {};

if (!haiku.plumbing.url) {
  if (process.env.NODE_ENV !== 'test' && !process.env.HAIKU_PLUMBING_PORT) {
    throw new Error('Oops! You must define a HAIKU_PLUMBING_PORT env var!');
  }

  haiku.plumbing.url = 'http://' + (process.env.HAIKU_PLUMBING_HOST || '0.0.0.0') + ':' + process.env.HAIKU_PLUMBING_PORT + '/';
}

function different(a, b) {
  return a !== b;
}

function createWindow() {
  mixpanel.haikuTrack('app:initialize');

  var topmenu = new TopMenu();

  var menuspec = {
    undoables: [],
    redoables: [],
    projectList: [],
    isSaving: false,
    folder: null
  };

  topmenu.create(menuspec);

  ipcMain.on('master:heartbeat', function (ipcEvent, masterState) {
    // Update the global menu, but only if the data feeding it appears to have changed.
    // This is driven by a frequent heartbeat hence the reason we are checking for changes
    // before actually re-rendering the whole thing
    var didChange = false;

    // The reason for all these guards is that it appears that the heartbeat either
    // (a) continues to tick despite master crashing
    // (b) returns bad data, missing some fields, when master is in a bad state
    // So we check that the things exist before repopulating
    if (masterState) {
      if (masterState.gitUndoables) {
        if (different(menuspec.undoables.length, masterState.gitUndoables.length)) {
          didChange = true;
          menuspec.undoables = masterState.gitUndoables || [];
        }
      }

      if (masterState.gitRedoables) {
        if (different(menuspec.redoables.length, masterState.gitRedoables.length)) {
          didChange = true;
          menuspec.redoables = masterState.gitRedoables || [];
        }
      }

      if (different(menuspec.folder, masterState.folder)) {
        didChange = true;
        menuspec.folder = masterState.folder;
      }

      if (different(menuspec.isSaving, masterState.isSaving)) {
        didChange = true;
        menuspec.isSaving = masterState.isSaving;
      }
    }

    if (didChange) {
      topmenu.create(menuspec);
    }
  });

  ipcMain.on('renderer:projects-list-fetched', function (ipcEvent, projectList) {
    menuspec.projectList = projectList;
    topmenu.create(menuspec);
  });

  browserWindow = new BrowserWindow({
    title: 'Haiku',
    show: false, // Don't show the window until we are ready-to-show (see below)
    titleBarStyle: 'hidden-inset',
    webPreferences: {
      webSecurity: false
    }
  });

  browserWindow.setTitle('Haiku');
  browserWindow.maximize();
  browserWindow.loadURL(URL);

  // Sending our haiku configuration into the view so it can correctly set up
  // its own websocket connections to our plumbing server, etc.
  browserWindow.webContents.on('did-finish-load', function () {
    browserWindow.webContents.send('haiku', haiku);
  });

  topmenu.on('global-menu:save', function () {
    browserWindow.webContents.send('global-menu:save');
  });

  topmenu.on('global-menu:undo', function () {
    browserWindow.webContents.send('global-menu:undo');
  });
  topmenu.on('global-menu:redo', function () {
    browserWindow.webContents.send('global-menu:redo');
  });

  topmenu.on('global-menu:zoom-in', function () {
    browserWindow.webContents.send('global-menu:zoom-in');
  });
  topmenu.on('global-menu:zoom-out', function () {
    browserWindow.webContents.send('global-menu:zoom-out');
  });

  topmenu.on('global-menu:open-text-editor', function () {
    browserWindow.webContents.send('global-menu:open-text-editor');
  });
  topmenu.on('global-menu:open-terminal', function () {
    browserWindow.webContents.send('global-menu:open-terminal');
  });
  topmenu.on('global-menu:toggle-dev-tools', function () {
    browserWindow.webContents.send('global-menu:toggle-dev-tools');
  });

  topmenu.on('global-menu:start-tour', function () {
    browserWindow.webContents.send('global-menu:start-tour');
  });

  // active in dev & staging only
  topmenu.on('global-menu:open-hacker-helper', function () {
    browserWindow.webContents.send('global-menu:open-hacker-helper');
  });
  topmenu.on('global-menu:dump-system-info', function () {
    browserWindow.webContents.send('global-menu:dump-system-info');
  });
  topmenu.on('global-menu:set-tool', function (tool) {
    browserWindow.webContents.send('global-menu:set-tool', tool);
  });

  browserWindow.on('closed', function () {
    browserWindow = null;
  });

  browserWindow.on('ready-to-show', function () {
    browserWindow.show();
  });

  // Uncomment me to automatically open the tools
  // browserWindow.openDevTools()

  autoUpdate(function (error, message, updater, quitAndInstall) {
    if (error) console.log(error);
    // You can set a HAIKU_SKIP_AUTOUPDATE env var to skip this entirely
    // If 'quitAndInstall' is present, call it to quit-and-install immediately.
    // Otherwise, the behavior (as far as I can tell) is to download in the background,
    // unzip, and install the next time the app is quitted. I.e.: You need not
    // explicitly do anything for a new update to happen.
    if (message === 'update-downloaded') {
      mixpanel.haikuTrack('app:update-downloaded');
      showAutoUpdateNativeBox(quitAndInstall);
    }
  });
}

function showAutoUpdateNativeBox(quitAndInstallCallback) {
  dialog.showMessageBox({
    message: 'An update is ready to install',
    detail: 'A new version of Haiku is ready to use. Install now to get the latest features and fixes.',
    cancelId: 1,
    defaultId: 0,
    buttons: ['Install Now', 'Install After I Quit']
  }, function (responseNum) {
    if (responseNum === 0) {
      mixpanel.haikuTrack('app:install-later');
      return quitAndInstallCallback();
    } else {
      mixpanel.haikuTrack('app:install-after-i-quit');
    }
  });
}

if (app.isReady()) {
  createWindow();
} else {
  app.on('ready', createWindow);
}

// Hacky: When plumbing launches inside an Electron process it expects an EventEmitter-like
// object as the export, so we expose this here even though it doesn't do much
module.exports = {
  default: creator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImVsZWN0cm9uIiwiaXBjTWFpbiIsInN5c3RlbVByZWZlcmVuY2VzIiwiYXBwIiwiRXZlbnRFbWl0dGVyIiwidXRpbCIsIkVycm9yIiwiVG9wTWVudSIsInNldFVzZXJEZWZhdWx0Iiwic2V0TmFtZSIsIkNyZWF0b3JFbGVjdHJvbiIsImFwcGx5IiwiaW5oZXJpdHMiLCJjcmVhdG9yIiwiQnJvd3NlcldpbmRvdyIsImF1dG9VcGRhdGUiLCJtaXhwYW5lbCIsImRpYWxvZyIsIlVSTCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJoYWlrdSIsIkpTT04iLCJwYXJzZSIsInByb2Nlc3MiLCJlbnYiLCJIQUlLVV9FTlYiLCJmb2xkZXIiLCJIQUlLVV9QUk9KRUNUX0ZPTERFUiIsImJyb3dzZXJXaW5kb3ciLCJvbiIsInF1aXQiLCJwbHVtYmluZyIsInVybCIsIk5PREVfRU5WIiwiSEFJS1VfUExVTUJJTkdfUE9SVCIsIkhBSUtVX1BMVU1CSU5HX0hPU1QiLCJkaWZmZXJlbnQiLCJhIiwiYiIsImNyZWF0ZVdpbmRvdyIsImhhaWt1VHJhY2siLCJ0b3BtZW51IiwibWVudXNwZWMiLCJ1bmRvYWJsZXMiLCJyZWRvYWJsZXMiLCJwcm9qZWN0TGlzdCIsImlzU2F2aW5nIiwiY3JlYXRlIiwiaXBjRXZlbnQiLCJtYXN0ZXJTdGF0ZSIsImRpZENoYW5nZSIsImdpdFVuZG9hYmxlcyIsImxlbmd0aCIsImdpdFJlZG9hYmxlcyIsInRpdGxlIiwic2hvdyIsInRpdGxlQmFyU3R5bGUiLCJ3ZWJQcmVmZXJlbmNlcyIsIndlYlNlY3VyaXR5Iiwic2V0VGl0bGUiLCJtYXhpbWl6ZSIsImxvYWRVUkwiLCJ3ZWJDb250ZW50cyIsInNlbmQiLCJ0b29sIiwiZXJyb3IiLCJtZXNzYWdlIiwidXBkYXRlciIsInF1aXRBbmRJbnN0YWxsIiwiY29uc29sZSIsImxvZyIsInNob3dBdXRvVXBkYXRlTmF0aXZlQm94IiwicXVpdEFuZEluc3RhbGxDYWxsYmFjayIsInNob3dNZXNzYWdlQm94IiwiZGV0YWlsIiwiY2FuY2VsSWQiLCJkZWZhdWx0SWQiLCJidXR0b25zIiwicmVzcG9uc2VOdW0iLCJpc1JlYWR5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsT0FBT0MsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJQyxXQUFXRCxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQUlFLFVBQVVELFNBQVNDLE9BQXZCO0FBQ0EsSUFBSUMsb0JBQW9CRixTQUFTRSxpQkFBakM7QUFDQSxJQUFJQyxNQUFNSCxTQUFTRyxHQUFuQjtBQUNBLElBQUlDLGVBQWVMLFFBQVEsUUFBUixFQUFrQkssWUFBckM7QUFDQSxJQUFJQyxPQUFPTixRQUFRLE1BQVIsQ0FBWDs7QUFFQSxJQUFJLENBQUNJLEdBQUwsRUFBVTtBQUNSLFFBQU0sSUFBSUcsS0FBSixDQUFVLHVEQUFWLENBQU47QUFDRDs7QUFFRCxJQUFJQyxVQUFVUixRQUFRLFdBQVIsQ0FBZDs7QUFFQUcsa0JBQWtCTSxjQUFsQixDQUFpQyw2QkFBakMsRUFBZ0UsU0FBaEUsRUFBMkUsSUFBM0U7QUFDQU4sa0JBQWtCTSxjQUFsQixDQUFpQyxvQ0FBakMsRUFBdUUsU0FBdkUsRUFBa0YsSUFBbEY7O0FBRUFMLElBQUlNLE9BQUosQ0FBWSxPQUFaOztBQUVBO0FBQ0EsU0FBU0MsZUFBVCxHQUE0QjtBQUMxQk4sZUFBYU8sS0FBYixDQUFtQixJQUFuQjtBQUNEO0FBQ0ROLEtBQUtPLFFBQUwsQ0FBY0YsZUFBZCxFQUErQk4sWUFBL0I7QUFDQSxJQUFJUyxVQUFVLElBQUlILGVBQUosRUFBZDs7QUFFQSxJQUFJSSxnQkFBZ0JkLFNBQVNjLGFBQTdCO0FBQ0EsSUFBSUMsYUFBYWhCLFFBQVEsb0JBQVIsQ0FBakI7QUFDQSxJQUFJaUIsV0FBV2pCLFFBQVEsa0JBQVIsQ0FBZjtBQUNBLElBQUlrQixTQUFTbEIsUUFBUSxVQUFSLEVBQW9Ca0IsTUFBakM7O0FBRUEsSUFBSUMsTUFBTSxZQUFZcEIsS0FBS3FCLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixZQUEzQixDQUF0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxRQUFRQyxLQUFLQyxLQUFMLENBQVdDLFFBQVFDLEdBQVIsQ0FBWUMsU0FBWixJQUF5QixJQUFwQyxDQUFaOztBQUVBLElBQUksQ0FBQ0wsTUFBTU0sTUFBWCxFQUFtQk4sTUFBTU0sTUFBTixHQUFlSCxRQUFRQyxHQUFSLENBQVlHLG9CQUEzQjs7QUFFbkIsSUFBSUMsZ0JBQWdCLElBQXBCOztBQUVBMUIsSUFBSTJCLEVBQUosQ0FBTyxtQkFBUCxFQUE0QixZQUFNO0FBQ2hDM0IsTUFBSTRCLElBQUo7QUFDRCxDQUZEOztBQUlBLElBQUksQ0FBQ1YsTUFBTVcsUUFBWCxFQUFxQlgsTUFBTVcsUUFBTixHQUFpQixFQUFqQjs7QUFFckIsSUFBSSxDQUFDWCxNQUFNVyxRQUFOLENBQWVDLEdBQXBCLEVBQXlCO0FBQ3ZCLE1BQUlULFFBQVFDLEdBQVIsQ0FBWVMsUUFBWixLQUF5QixNQUF6QixJQUFtQyxDQUFDVixRQUFRQyxHQUFSLENBQVlVLG1CQUFwRCxFQUF5RTtBQUN2RSxVQUFNLElBQUk3QixLQUFKLHdEQUFOO0FBQ0Q7O0FBRURlLFFBQU1XLFFBQU4sQ0FBZUMsR0FBZixnQkFBK0JULFFBQVFDLEdBQVIsQ0FBWVcsbUJBQVosSUFBbUMsU0FBbEUsVUFBK0VaLFFBQVFDLEdBQVIsQ0FBWVUsbUJBQTNGO0FBQ0Q7O0FBRUQsU0FBU0UsU0FBVCxDQUFvQkMsQ0FBcEIsRUFBdUJDLENBQXZCLEVBQTBCO0FBQ3hCLFNBQU9ELE1BQU1DLENBQWI7QUFDRDs7QUFFRCxTQUFTQyxZQUFULEdBQXlCO0FBQ3ZCeEIsV0FBU3lCLFVBQVQsQ0FBb0IsZ0JBQXBCOztBQUVBLE1BQUlDLFVBQVUsSUFBSW5DLE9BQUosRUFBZDs7QUFFQSxNQUFJb0MsV0FBVztBQUNiQyxlQUFXLEVBREU7QUFFYkMsZUFBVyxFQUZFO0FBR2JDLGlCQUFhLEVBSEE7QUFJYkMsY0FBVSxLQUpHO0FBS2JwQixZQUFRO0FBTEssR0FBZjs7QUFRQWUsVUFBUU0sTUFBUixDQUFlTCxRQUFmOztBQUVBMUMsVUFBUTZCLEVBQVIsQ0FBVyxrQkFBWCxFQUErQixVQUFDbUIsUUFBRCxFQUFXQyxXQUFYLEVBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQUlDLFlBQVksS0FBaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJRCxXQUFKLEVBQWlCO0FBQ2YsVUFBSUEsWUFBWUUsWUFBaEIsRUFBOEI7QUFDNUIsWUFBSWYsVUFBVU0sU0FBU0MsU0FBVCxDQUFtQlMsTUFBN0IsRUFBcUNILFlBQVlFLFlBQVosQ0FBeUJDLE1BQTlELENBQUosRUFBMkU7QUFDekVGLHNCQUFZLElBQVo7QUFDQVIsbUJBQVNDLFNBQVQsR0FBcUJNLFlBQVlFLFlBQVosSUFBNEIsRUFBakQ7QUFDRDtBQUNGOztBQUVELFVBQUlGLFlBQVlJLFlBQWhCLEVBQThCO0FBQzVCLFlBQUlqQixVQUFVTSxTQUFTRSxTQUFULENBQW1CUSxNQUE3QixFQUFxQ0gsWUFBWUksWUFBWixDQUF5QkQsTUFBOUQsQ0FBSixFQUEyRTtBQUN6RUYsc0JBQVksSUFBWjtBQUNBUixtQkFBU0UsU0FBVCxHQUFxQkssWUFBWUksWUFBWixJQUE0QixFQUFqRDtBQUNEO0FBQ0Y7O0FBRUQsVUFBSWpCLFVBQVVNLFNBQVNoQixNQUFuQixFQUEyQnVCLFlBQVl2QixNQUF2QyxDQUFKLEVBQW9EO0FBQ2xEd0Isb0JBQVksSUFBWjtBQUNBUixpQkFBU2hCLE1BQVQsR0FBa0J1QixZQUFZdkIsTUFBOUI7QUFDRDs7QUFFRCxVQUFJVSxVQUFVTSxTQUFTSSxRQUFuQixFQUE2QkcsWUFBWUgsUUFBekMsQ0FBSixFQUF3RDtBQUN0REksb0JBQVksSUFBWjtBQUNBUixpQkFBU0ksUUFBVCxHQUFvQkcsWUFBWUgsUUFBaEM7QUFDRDtBQUNGOztBQUVELFFBQUlJLFNBQUosRUFBZTtBQUNiVCxjQUFRTSxNQUFSLENBQWVMLFFBQWY7QUFDRDtBQUNGLEdBdkNEOztBQXlDQTFDLFVBQVE2QixFQUFSLENBQVcsZ0NBQVgsRUFBNkMsVUFBQ21CLFFBQUQsRUFBV0gsV0FBWCxFQUEyQjtBQUN0RUgsYUFBU0csV0FBVCxHQUF1QkEsV0FBdkI7QUFDQUosWUFBUU0sTUFBUixDQUFlTCxRQUFmO0FBQ0QsR0FIRDs7QUFLQWQsa0JBQWdCLElBQUlmLGFBQUosQ0FBa0I7QUFDaEN5QyxXQUFPLE9BRHlCO0FBRWhDQyxVQUFNLEtBRjBCLEVBRW5CO0FBQ2JDLG1CQUFlLGNBSGlCO0FBSWhDQyxvQkFBZ0I7QUFDZEMsbUJBQWE7QUFEQztBQUpnQixHQUFsQixDQUFoQjs7QUFTQTlCLGdCQUFjK0IsUUFBZCxDQUF1QixPQUF2QjtBQUNBL0IsZ0JBQWNnQyxRQUFkO0FBQ0FoQyxnQkFBY2lDLE9BQWQsQ0FBc0I1QyxHQUF0Qjs7QUFFQTtBQUNBO0FBQ0FXLGdCQUFja0MsV0FBZCxDQUEwQmpDLEVBQTFCLENBQTZCLGlCQUE3QixFQUFnRCxZQUFNO0FBQ3BERCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLE9BQS9CLEVBQXdDM0MsS0FBeEM7QUFDRCxHQUZEOztBQUlBcUIsVUFBUVosRUFBUixDQUFXLGtCQUFYLEVBQStCLFlBQU07QUFDbkNELGtCQUFja0MsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0Isa0JBQS9CO0FBQ0QsR0FGRDs7QUFJQXRCLFVBQVFaLEVBQVIsQ0FBVyxrQkFBWCxFQUErQixZQUFNO0FBQ25DRCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLGtCQUEvQjtBQUNELEdBRkQ7QUFHQXRCLFVBQVFaLEVBQVIsQ0FBVyxrQkFBWCxFQUErQixZQUFNO0FBQ25DRCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLGtCQUEvQjtBQUNELEdBRkQ7O0FBSUF0QixVQUFRWixFQUFSLENBQVcscUJBQVgsRUFBa0MsWUFBTTtBQUN0Q0Qsa0JBQWNrQyxXQUFkLENBQTBCQyxJQUExQixDQUErQixxQkFBL0I7QUFDRCxHQUZEO0FBR0F0QixVQUFRWixFQUFSLENBQVcsc0JBQVgsRUFBbUMsWUFBTTtBQUN2Q0Qsa0JBQWNrQyxXQUFkLENBQTBCQyxJQUExQixDQUErQixzQkFBL0I7QUFDRCxHQUZEOztBQUlBdEIsVUFBUVosRUFBUixDQUFXLDhCQUFYLEVBQTJDLFlBQU07QUFDL0NELGtCQUFja0MsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0IsOEJBQS9CO0FBQ0QsR0FGRDtBQUdBdEIsVUFBUVosRUFBUixDQUFXLDJCQUFYLEVBQXdDLFlBQU07QUFDNUNELGtCQUFja0MsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0IsMkJBQS9CO0FBQ0QsR0FGRDtBQUdBdEIsVUFBUVosRUFBUixDQUFXLDhCQUFYLEVBQTJDLFlBQU07QUFDL0NELGtCQUFja0MsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0IsOEJBQS9CO0FBQ0QsR0FGRDs7QUFJQXRCLFVBQVFaLEVBQVIsQ0FBVyx3QkFBWCxFQUFxQyxZQUFNO0FBQ3pDRCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLHdCQUEvQjtBQUNELEdBRkQ7O0FBSUE7QUFDQXRCLFVBQVFaLEVBQVIsQ0FBVyxnQ0FBWCxFQUE2QyxZQUFNO0FBQ2pERCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLGdDQUEvQjtBQUNELEdBRkQ7QUFHQXRCLFVBQVFaLEVBQVIsQ0FBVyw4QkFBWCxFQUEyQyxZQUFNO0FBQy9DRCxrQkFBY2tDLFdBQWQsQ0FBMEJDLElBQTFCLENBQStCLDhCQUEvQjtBQUNELEdBRkQ7QUFHQXRCLFVBQVFaLEVBQVIsQ0FBVyxzQkFBWCxFQUFtQyxVQUFDbUMsSUFBRCxFQUFVO0FBQzNDcEMsa0JBQWNrQyxXQUFkLENBQTBCQyxJQUExQixDQUErQixzQkFBL0IsRUFBdURDLElBQXZEO0FBQ0QsR0FGRDs7QUFJQXBDLGdCQUFjQyxFQUFkLENBQWlCLFFBQWpCLEVBQTJCLFlBQU07QUFBRUQsb0JBQWdCLElBQWhCO0FBQXNCLEdBQXpEOztBQUVBQSxnQkFBY0MsRUFBZCxDQUFpQixlQUFqQixFQUFrQyxZQUFNO0FBQ3RDRCxrQkFBYzJCLElBQWQ7QUFDRCxHQUZEOztBQUlBO0FBQ0E7O0FBRUF6QyxhQUFXLFVBQUNtRCxLQUFELEVBQVFDLE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCQyxjQUExQixFQUE2QztBQUN0RCxRQUFJSCxLQUFKLEVBQVdJLFFBQVFDLEdBQVIsQ0FBWUwsS0FBWjtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJQyxZQUFZLG1CQUFoQixFQUFxQztBQUNuQ25ELGVBQVN5QixVQUFULENBQW9CLHVCQUFwQjtBQUNBK0IsOEJBQXdCSCxjQUF4QjtBQUNEO0FBQ0YsR0FYRDtBQVlEOztBQUVELFNBQVNHLHVCQUFULENBQWtDQyxzQkFBbEMsRUFBMEQ7QUFDeER4RCxTQUFPeUQsY0FBUCxDQUFzQjtBQUNwQlAsYUFBUywrQkFEVztBQUVwQlEsWUFBUSwyRkFGWTtBQUdwQkMsY0FBVSxDQUhVO0FBSXBCQyxlQUFXLENBSlM7QUFLcEJDLGFBQVMsQ0FBQyxhQUFELEVBQWdCLHNCQUFoQjtBQUxXLEdBQXRCLEVBTUcsVUFBQ0MsV0FBRCxFQUFpQjtBQUNsQixRQUFJQSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDckIvRCxlQUFTeUIsVUFBVCxDQUFvQixtQkFBcEI7QUFDQSxhQUFPZ0Msd0JBQVA7QUFDRCxLQUhELE1BR087QUFDTHpELGVBQVN5QixVQUFULENBQW9CLDBCQUFwQjtBQUNEO0FBQ0YsR0FiRDtBQWNEOztBQUVELElBQUl0QyxJQUFJNkUsT0FBSixFQUFKLEVBQW1CO0FBQ2pCeEM7QUFDRCxDQUZELE1BRU87QUFDTHJDLE1BQUkyQixFQUFKLENBQU8sT0FBUCxFQUFnQlUsWUFBaEI7QUFDRDs7QUFFRDtBQUNBO0FBQ0F5QyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLFdBQVN0RTtBQURNLENBQWpCIiwiZmlsZSI6ImVsZWN0cm9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcbnZhciBpcGNNYWluID0gZWxlY3Ryb24uaXBjTWFpblxudmFyIHN5c3RlbVByZWZlcmVuY2VzID0gZWxlY3Ryb24uc3lzdGVtUHJlZmVyZW5jZXNcbnZhciBhcHAgPSBlbGVjdHJvbi5hcHBcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5cbmlmICghYXBwKSB7XG4gIHRocm93IG5ldyBFcnJvcignWW91IGNhbiBvbmx5IHJ1biBlbGVjdHJvbi5qcyBmcm9tIGFuIGVsZWN0cm9uIHByb2Nlc3MnKVxufVxuXG52YXIgVG9wTWVudSA9IHJlcXVpcmUoJy4vVG9wTWVudScpXG5cbnN5c3RlbVByZWZlcmVuY2VzLnNldFVzZXJEZWZhdWx0KCdOU0Rpc2FibGVkRGljdGF0aW9uTWVudUl0ZW0nLCAnYm9vbGVhbicsIHRydWUpXG5zeXN0ZW1QcmVmZXJlbmNlcy5zZXRVc2VyRGVmYXVsdCgnTlNEaXNhYmxlZENoYXJhY3RlclBhbGV0dGVNZW51SXRlbScsICdib29sZWFuJywgdHJ1ZSlcblxuYXBwLnNldE5hbWUoJ0hhaWt1JylcblxuLy8gU2VlIGJvdHRvbVxuZnVuY3Rpb24gQ3JlYXRvckVsZWN0cm9uICgpIHtcbiAgRXZlbnRFbWl0dGVyLmFwcGx5KHRoaXMpXG59XG51dGlsLmluaGVyaXRzKENyZWF0b3JFbGVjdHJvbiwgRXZlbnRFbWl0dGVyKVxudmFyIGNyZWF0b3IgPSBuZXcgQ3JlYXRvckVsZWN0cm9uKClcblxudmFyIEJyb3dzZXJXaW5kb3cgPSBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG52YXIgYXV0b1VwZGF0ZSA9IHJlcXVpcmUoJy4vdXRpbHMvYXV0b1VwZGF0ZScpXG52YXIgbWl4cGFuZWwgPSByZXF1aXJlKCcuL3V0aWxzL01peHBhbmVsJylcbnZhciBkaWFsb2cgPSByZXF1aXJlKCdlbGVjdHJvbicpLmRpYWxvZ1xuXG52YXIgVVJMID0gJ2ZpbGU6Ly8nICsgcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ2luZGV4Lmh0bWwnKVxuXG4vLyBQbHVtYmluZyBzdGFydHMgdXAgdGhpcyBwcm9jZXNzLCBhbmQgaXQgdXNlcyBIQUlLVV9FTlYgdG8gZm9yd2FyZCB0byB1cyBkYXRhIGFib3V0XG4vLyBob3cgaXQgaGFzIGJlZW4gc2V0IHVwLCBlLmcuIHdoYXQgcG9ydHMgaXQgaXMgdXNpbmcgZm9yIHdlYnNvY2tldCBzZXJ2ZXIsIGVudm95LCBldGMuXG4vLyBUaGlzIGlzIHNlbnQgaW50byB0aGUgRE9NIHBhcnQgb2YgdGhlIGFwcCBhdCBkaWQtZmluaXNoIGxvYWQ7IHNlZSBiZWxvdy5cbnZhciBoYWlrdSA9IEpTT04ucGFyc2UocHJvY2Vzcy5lbnYuSEFJS1VfRU5WIHx8ICd7fScpXG5cbmlmICghaGFpa3UuZm9sZGVyKSBoYWlrdS5mb2xkZXIgPSBwcm9jZXNzLmVudi5IQUlLVV9QUk9KRUNUX0ZPTERFUlxuXG5sZXQgYnJvd3NlcldpbmRvdyA9IG51bGxcblxuYXBwLm9uKCd3aW5kb3ctYWxsLWNsb3NlZCcsICgpID0+IHtcbiAgYXBwLnF1aXQoKVxufSlcblxuaWYgKCFoYWlrdS5wbHVtYmluZykgaGFpa3UucGx1bWJpbmcgPSB7fVxuXG5pZiAoIWhhaWt1LnBsdW1iaW5nLnVybCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiAhcHJvY2Vzcy5lbnYuSEFJS1VfUExVTUJJTkdfUE9SVCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgT29wcyEgWW91IG11c3QgZGVmaW5lIGEgSEFJS1VfUExVTUJJTkdfUE9SVCBlbnYgdmFyIWApXG4gIH1cblxuICBoYWlrdS5wbHVtYmluZy51cmwgPSBgaHR0cDovLyR7cHJvY2Vzcy5lbnYuSEFJS1VfUExVTUJJTkdfSE9TVCB8fCAnMC4wLjAuMCd9OiR7cHJvY2Vzcy5lbnYuSEFJS1VfUExVTUJJTkdfUE9SVH0vYFxufVxuXG5mdW5jdGlvbiBkaWZmZXJlbnQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgIT09IGJcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2luZG93ICgpIHtcbiAgbWl4cGFuZWwuaGFpa3VUcmFjaygnYXBwOmluaXRpYWxpemUnKVxuXG4gIHZhciB0b3BtZW51ID0gbmV3IFRvcE1lbnUoKVxuXG4gIHZhciBtZW51c3BlYyA9IHtcbiAgICB1bmRvYWJsZXM6IFtdLFxuICAgIHJlZG9hYmxlczogW10sXG4gICAgcHJvamVjdExpc3Q6IFtdLFxuICAgIGlzU2F2aW5nOiBmYWxzZSxcbiAgICBmb2xkZXI6IG51bGxcbiAgfVxuXG4gIHRvcG1lbnUuY3JlYXRlKG1lbnVzcGVjKVxuXG4gIGlwY01haW4ub24oJ21hc3RlcjpoZWFydGJlYXQnLCAoaXBjRXZlbnQsIG1hc3RlclN0YXRlKSA9PiB7XG4gICAgLy8gVXBkYXRlIHRoZSBnbG9iYWwgbWVudSwgYnV0IG9ubHkgaWYgdGhlIGRhdGEgZmVlZGluZyBpdCBhcHBlYXJzIHRvIGhhdmUgY2hhbmdlZC5cbiAgICAvLyBUaGlzIGlzIGRyaXZlbiBieSBhIGZyZXF1ZW50IGhlYXJ0YmVhdCBoZW5jZSB0aGUgcmVhc29uIHdlIGFyZSBjaGVja2luZyBmb3IgY2hhbmdlc1xuICAgIC8vIGJlZm9yZSBhY3R1YWxseSByZS1yZW5kZXJpbmcgdGhlIHdob2xlIHRoaW5nXG4gICAgdmFyIGRpZENoYW5nZSA9IGZhbHNlXG5cbiAgICAvLyBUaGUgcmVhc29uIGZvciBhbGwgdGhlc2UgZ3VhcmRzIGlzIHRoYXQgaXQgYXBwZWFycyB0aGF0IHRoZSBoZWFydGJlYXQgZWl0aGVyXG4gICAgLy8gKGEpIGNvbnRpbnVlcyB0byB0aWNrIGRlc3BpdGUgbWFzdGVyIGNyYXNoaW5nXG4gICAgLy8gKGIpIHJldHVybnMgYmFkIGRhdGEsIG1pc3Npbmcgc29tZSBmaWVsZHMsIHdoZW4gbWFzdGVyIGlzIGluIGEgYmFkIHN0YXRlXG4gICAgLy8gU28gd2UgY2hlY2sgdGhhdCB0aGUgdGhpbmdzIGV4aXN0IGJlZm9yZSByZXBvcHVsYXRpbmdcbiAgICBpZiAobWFzdGVyU3RhdGUpIHtcbiAgICAgIGlmIChtYXN0ZXJTdGF0ZS5naXRVbmRvYWJsZXMpIHtcbiAgICAgICAgaWYgKGRpZmZlcmVudChtZW51c3BlYy51bmRvYWJsZXMubGVuZ3RoLCBtYXN0ZXJTdGF0ZS5naXRVbmRvYWJsZXMubGVuZ3RoKSkge1xuICAgICAgICAgIGRpZENoYW5nZSA9IHRydWVcbiAgICAgICAgICBtZW51c3BlYy51bmRvYWJsZXMgPSBtYXN0ZXJTdGF0ZS5naXRVbmRvYWJsZXMgfHwgW11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWFzdGVyU3RhdGUuZ2l0UmVkb2FibGVzKSB7XG4gICAgICAgIGlmIChkaWZmZXJlbnQobWVudXNwZWMucmVkb2FibGVzLmxlbmd0aCwgbWFzdGVyU3RhdGUuZ2l0UmVkb2FibGVzLmxlbmd0aCkpIHtcbiAgICAgICAgICBkaWRDaGFuZ2UgPSB0cnVlXG4gICAgICAgICAgbWVudXNwZWMucmVkb2FibGVzID0gbWFzdGVyU3RhdGUuZ2l0UmVkb2FibGVzIHx8IFtdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpZmZlcmVudChtZW51c3BlYy5mb2xkZXIsIG1hc3RlclN0YXRlLmZvbGRlcikpIHtcbiAgICAgICAgZGlkQ2hhbmdlID0gdHJ1ZVxuICAgICAgICBtZW51c3BlYy5mb2xkZXIgPSBtYXN0ZXJTdGF0ZS5mb2xkZXJcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZmZlcmVudChtZW51c3BlYy5pc1NhdmluZywgbWFzdGVyU3RhdGUuaXNTYXZpbmcpKSB7XG4gICAgICAgIGRpZENoYW5nZSA9IHRydWVcbiAgICAgICAgbWVudXNwZWMuaXNTYXZpbmcgPSBtYXN0ZXJTdGF0ZS5pc1NhdmluZ1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgIHRvcG1lbnUuY3JlYXRlKG1lbnVzcGVjKVxuICAgIH1cbiAgfSlcblxuICBpcGNNYWluLm9uKCdyZW5kZXJlcjpwcm9qZWN0cy1saXN0LWZldGNoZWQnLCAoaXBjRXZlbnQsIHByb2plY3RMaXN0KSA9PiB7XG4gICAgbWVudXNwZWMucHJvamVjdExpc3QgPSBwcm9qZWN0TGlzdFxuICAgIHRvcG1lbnUuY3JlYXRlKG1lbnVzcGVjKVxuICB9KVxuXG4gIGJyb3dzZXJXaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XG4gICAgdGl0bGU6ICdIYWlrdScsXG4gICAgc2hvdzogZmFsc2UsIC8vIERvbid0IHNob3cgdGhlIHdpbmRvdyB1bnRpbCB3ZSBhcmUgcmVhZHktdG8tc2hvdyAoc2VlIGJlbG93KVxuICAgIHRpdGxlQmFyU3R5bGU6ICdoaWRkZW4taW5zZXQnLFxuICAgIHdlYlByZWZlcmVuY2VzOiB7XG4gICAgICB3ZWJTZWN1cml0eTogZmFsc2VcbiAgICB9XG4gIH0pXG5cbiAgYnJvd3NlcldpbmRvdy5zZXRUaXRsZSgnSGFpa3UnKVxuICBicm93c2VyV2luZG93Lm1heGltaXplKClcbiAgYnJvd3NlcldpbmRvdy5sb2FkVVJMKFVSTClcblxuICAvLyBTZW5kaW5nIG91ciBoYWlrdSBjb25maWd1cmF0aW9uIGludG8gdGhlIHZpZXcgc28gaXQgY2FuIGNvcnJlY3RseSBzZXQgdXBcbiAgLy8gaXRzIG93biB3ZWJzb2NrZXQgY29ubmVjdGlvbnMgdG8gb3VyIHBsdW1iaW5nIHNlcnZlciwgZXRjLlxuICBicm93c2VyV2luZG93LndlYkNvbnRlbnRzLm9uKCdkaWQtZmluaXNoLWxvYWQnLCAoKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdoYWlrdScsIGhhaWt1KVxuICB9KVxuXG4gIHRvcG1lbnUub24oJ2dsb2JhbC1tZW51OnNhdmUnLCAoKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdnbG9iYWwtbWVudTpzYXZlJylcbiAgfSlcblxuICB0b3BtZW51Lm9uKCdnbG9iYWwtbWVudTp1bmRvJywgKCkgPT4ge1xuICAgIGJyb3dzZXJXaW5kb3cud2ViQ29udGVudHMuc2VuZCgnZ2xvYmFsLW1lbnU6dW5kbycpXG4gIH0pXG4gIHRvcG1lbnUub24oJ2dsb2JhbC1tZW51OnJlZG8nLCAoKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdnbG9iYWwtbWVudTpyZWRvJylcbiAgfSlcblxuICB0b3BtZW51Lm9uKCdnbG9iYWwtbWVudTp6b29tLWluJywgKCkgPT4ge1xuICAgIGJyb3dzZXJXaW5kb3cud2ViQ29udGVudHMuc2VuZCgnZ2xvYmFsLW1lbnU6em9vbS1pbicpXG4gIH0pXG4gIHRvcG1lbnUub24oJ2dsb2JhbC1tZW51Onpvb20tb3V0JywgKCkgPT4ge1xuICAgIGJyb3dzZXJXaW5kb3cud2ViQ29udGVudHMuc2VuZCgnZ2xvYmFsLW1lbnU6em9vbS1vdXQnKVxuICB9KVxuXG4gIHRvcG1lbnUub24oJ2dsb2JhbC1tZW51Om9wZW4tdGV4dC1lZGl0b3InLCAoKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdnbG9iYWwtbWVudTpvcGVuLXRleHQtZWRpdG9yJylcbiAgfSlcbiAgdG9wbWVudS5vbignZ2xvYmFsLW1lbnU6b3Blbi10ZXJtaW5hbCcsICgpID0+IHtcbiAgICBicm93c2VyV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ2dsb2JhbC1tZW51Om9wZW4tdGVybWluYWwnKVxuICB9KVxuICB0b3BtZW51Lm9uKCdnbG9iYWwtbWVudTp0b2dnbGUtZGV2LXRvb2xzJywgKCkgPT4ge1xuICAgIGJyb3dzZXJXaW5kb3cud2ViQ29udGVudHMuc2VuZCgnZ2xvYmFsLW1lbnU6dG9nZ2xlLWRldi10b29scycpXG4gIH0pXG5cbiAgdG9wbWVudS5vbignZ2xvYmFsLW1lbnU6c3RhcnQtdG91cicsICgpID0+IHtcbiAgICBicm93c2VyV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ2dsb2JhbC1tZW51OnN0YXJ0LXRvdXInKVxuICB9KVxuXG4gIC8vIGFjdGl2ZSBpbiBkZXYgJiBzdGFnaW5nIG9ubHlcbiAgdG9wbWVudS5vbignZ2xvYmFsLW1lbnU6b3Blbi1oYWNrZXItaGVscGVyJywgKCkgPT4ge1xuICAgIGJyb3dzZXJXaW5kb3cud2ViQ29udGVudHMuc2VuZCgnZ2xvYmFsLW1lbnU6b3Blbi1oYWNrZXItaGVscGVyJylcbiAgfSlcbiAgdG9wbWVudS5vbignZ2xvYmFsLW1lbnU6ZHVtcC1zeXN0ZW0taW5mbycsICgpID0+IHtcbiAgICBicm93c2VyV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ2dsb2JhbC1tZW51OmR1bXAtc3lzdGVtLWluZm8nKVxuICB9KVxuICB0b3BtZW51Lm9uKCdnbG9iYWwtbWVudTpzZXQtdG9vbCcsICh0b29sKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdnbG9iYWwtbWVudTpzZXQtdG9vbCcsIHRvb2wpXG4gIH0pXG5cbiAgYnJvd3NlcldpbmRvdy5vbignY2xvc2VkJywgKCkgPT4geyBicm93c2VyV2luZG93ID0gbnVsbCB9KVxuXG4gIGJyb3dzZXJXaW5kb3cub24oJ3JlYWR5LXRvLXNob3cnLCAoKSA9PiB7XG4gICAgYnJvd3NlcldpbmRvdy5zaG93KClcbiAgfSlcblxuICAvLyBVbmNvbW1lbnQgbWUgdG8gYXV0b21hdGljYWxseSBvcGVuIHRoZSB0b29sc1xuICAvLyBicm93c2VyV2luZG93Lm9wZW5EZXZUb29scygpXG5cbiAgYXV0b1VwZGF0ZSgoZXJyb3IsIG1lc3NhZ2UsIHVwZGF0ZXIsIHF1aXRBbmRJbnN0YWxsKSA9PiB7XG4gICAgaWYgKGVycm9yKSBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAvLyBZb3UgY2FuIHNldCBhIEhBSUtVX1NLSVBfQVVUT1VQREFURSBlbnYgdmFyIHRvIHNraXAgdGhpcyBlbnRpcmVseVxuICAgIC8vIElmICdxdWl0QW5kSW5zdGFsbCcgaXMgcHJlc2VudCwgY2FsbCBpdCB0byBxdWl0LWFuZC1pbnN0YWxsIGltbWVkaWF0ZWx5LlxuICAgIC8vIE90aGVyd2lzZSwgdGhlIGJlaGF2aW9yIChhcyBmYXIgYXMgSSBjYW4gdGVsbCkgaXMgdG8gZG93bmxvYWQgaW4gdGhlIGJhY2tncm91bmQsXG4gICAgLy8gdW56aXAsIGFuZCBpbnN0YWxsIHRoZSBuZXh0IHRpbWUgdGhlIGFwcCBpcyBxdWl0dGVkLiBJLmUuOiBZb3UgbmVlZCBub3RcbiAgICAvLyBleHBsaWNpdGx5IGRvIGFueXRoaW5nIGZvciBhIG5ldyB1cGRhdGUgdG8gaGFwcGVuLlxuICAgIGlmIChtZXNzYWdlID09PSAndXBkYXRlLWRvd25sb2FkZWQnKSB7XG4gICAgICBtaXhwYW5lbC5oYWlrdVRyYWNrKCdhcHA6dXBkYXRlLWRvd25sb2FkZWQnKVxuICAgICAgc2hvd0F1dG9VcGRhdGVOYXRpdmVCb3gocXVpdEFuZEluc3RhbGwpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiBzaG93QXV0b1VwZGF0ZU5hdGl2ZUJveCAocXVpdEFuZEluc3RhbGxDYWxsYmFjaykge1xuICBkaWFsb2cuc2hvd01lc3NhZ2VCb3goe1xuICAgIG1lc3NhZ2U6ICdBbiB1cGRhdGUgaXMgcmVhZHkgdG8gaW5zdGFsbCcsXG4gICAgZGV0YWlsOiAnQSBuZXcgdmVyc2lvbiBvZiBIYWlrdSBpcyByZWFkeSB0byB1c2UuIEluc3RhbGwgbm93IHRvIGdldCB0aGUgbGF0ZXN0IGZlYXR1cmVzIGFuZCBmaXhlcy4nLFxuICAgIGNhbmNlbElkOiAxLFxuICAgIGRlZmF1bHRJZDogMCxcbiAgICBidXR0b25zOiBbJ0luc3RhbGwgTm93JywgJ0luc3RhbGwgQWZ0ZXIgSSBRdWl0J11cbiAgfSwgKHJlc3BvbnNlTnVtKSA9PiB7XG4gICAgaWYgKHJlc3BvbnNlTnVtID09PSAwKSB7XG4gICAgICBtaXhwYW5lbC5oYWlrdVRyYWNrKCdhcHA6aW5zdGFsbC1sYXRlcicpXG4gICAgICByZXR1cm4gcXVpdEFuZEluc3RhbGxDYWxsYmFjaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1peHBhbmVsLmhhaWt1VHJhY2soJ2FwcDppbnN0YWxsLWFmdGVyLWktcXVpdCcpXG4gICAgfVxuICB9KVxufVxuXG5pZiAoYXBwLmlzUmVhZHkoKSkge1xuICBjcmVhdGVXaW5kb3coKVxufSBlbHNlIHtcbiAgYXBwLm9uKCdyZWFkeScsIGNyZWF0ZVdpbmRvdylcbn1cblxuLy8gSGFja3k6IFdoZW4gcGx1bWJpbmcgbGF1bmNoZXMgaW5zaWRlIGFuIEVsZWN0cm9uIHByb2Nlc3MgaXQgZXhwZWN0cyBhbiBFdmVudEVtaXR0ZXItbGlrZVxuLy8gb2JqZWN0IGFzIHRoZSBleHBvcnQsIHNvIHdlIGV4cG9zZSB0aGlzIGhlcmUgZXZlbiB0aG91Z2ggaXQgZG9lc24ndCBkbyBtdWNoXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmYXVsdDogY3JlYXRvclxufVxuIl19