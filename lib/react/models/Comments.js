'use strict';

var fse = require('haiku-fs-extra');
var path = require('path');
var lodash = require('lodash');
var FILE_PATH = path.join('.haiku', 'comments.json');

function Comments(folder) {
  if (!folder) throw new Error('Folder is required');
  this.datapath = path.join(folder, FILE_PATH);
  this.comments = [];
}

Comments.prototype.load = function _load(cb) {
  return fse.readJson(this.datapath, function (err, comments) {
    if (err) return cb(err);
    this.comments = comments || [];
    this.comments.forEach(function (comment) {
      if (!comment.id) comment.id = Math.random() + '';
    });
    return cb();
  }.bind(this));
};

Comments.prototype.save = function _save(cb) {
  return fse.writeJson(this.datapath, cleanComments(this.comments), { spaces: 2 }, cb || function () {});
};

// @function add
// @param content {string} The content string (can be Markdown)
// @param options {object} Optional attributes for the comment object.
// @returns id {number} Id of the comment
// @description
// Example:
// {
//   context: "stage",
//   timeline: "Default",
//   time: 0,
//   x: 123,
//   y: 231,
//   w: 300,
//   h: 200,
//   content: "Lookout _belooooow_"
// }
// It's up to the UI to decide how to render these.
Comments.prototype.add = function _add(content, options) {
  var id = Date.now();
  var comment = { content: content, id: id };
  lodash.merge(comment, options || {});
  this.comments.push(comment);
  this.comments = lodash.uniqWith(this.comments, lodash.isEqual);
  return id;
};

Comments.prototype.build = function _build(options) {
  this.add('', lodash.merge({
    created: Date.now(),
    author: null, // TODO
    isOpened: true,
    isEditing: true
  }, options));
};

// @function remove
// @param id {number} Id of the comment to remove
Comments.prototype.remove = function _remove(id) {
  lodash.pullAllWith(this.comments, [{ id: id }], lodash.matches);
  return id;
};

Comments.prototype.reply = function _reply(id, content, options) {
  var comment = lodash.find(this.comments, { id: id });
  if (!comment.replies) comment.replies = [];
  var reply = { id: Date.now(), content: content };
  lodash.merge(reply, options || {});
  comment.replies.push(reply);
  return reply.id;
};

function cleanComments(dirty) {
  var clean = [];
  dirty.forEach(function (dirt) {
    if (dirt.isCancelled) return void 0;
    clean.push(lodash.omit(dirt, ['isReplying', 'isOpened']));
  });
  return clean;
}

module.exports = Comments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC9tb2RlbHMvQ29tbWVudHMuanMiXSwibmFtZXMiOlsiZnNlIiwicmVxdWlyZSIsInBhdGgiLCJsb2Rhc2giLCJGSUxFX1BBVEgiLCJqb2luIiwiQ29tbWVudHMiLCJmb2xkZXIiLCJFcnJvciIsImRhdGFwYXRoIiwiY29tbWVudHMiLCJwcm90b3R5cGUiLCJsb2FkIiwiX2xvYWQiLCJjYiIsInJlYWRKc29uIiwiZXJyIiwiZm9yRWFjaCIsImNvbW1lbnQiLCJpZCIsIk1hdGgiLCJyYW5kb20iLCJiaW5kIiwic2F2ZSIsIl9zYXZlIiwid3JpdGVKc29uIiwiY2xlYW5Db21tZW50cyIsInNwYWNlcyIsImFkZCIsIl9hZGQiLCJjb250ZW50Iiwib3B0aW9ucyIsIkRhdGUiLCJub3ciLCJtZXJnZSIsInB1c2giLCJ1bmlxV2l0aCIsImlzRXF1YWwiLCJidWlsZCIsIl9idWlsZCIsImNyZWF0ZWQiLCJhdXRob3IiLCJpc09wZW5lZCIsImlzRWRpdGluZyIsInJlbW92ZSIsIl9yZW1vdmUiLCJwdWxsQWxsV2l0aCIsIm1hdGNoZXMiLCJyZXBseSIsIl9yZXBseSIsImZpbmQiLCJyZXBsaWVzIiwiZGlydHkiLCJjbGVhbiIsImRpcnQiLCJpc0NhbmNlbGxlZCIsIm9taXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE1BQU1DLFFBQVEsZ0JBQVIsQ0FBVjtBQUNBLElBQUlDLE9BQU9ELFFBQVEsTUFBUixDQUFYO0FBQ0EsSUFBSUUsU0FBU0YsUUFBUSxRQUFSLENBQWI7QUFDQSxJQUFJRyxZQUFZRixLQUFLRyxJQUFMLENBQVUsUUFBVixFQUFvQixlQUFwQixDQUFoQjs7QUFFQSxTQUFTQyxRQUFULENBQW1CQyxNQUFuQixFQUEyQjtBQUN6QixNQUFJLENBQUNBLE1BQUwsRUFBYSxNQUFNLElBQUlDLEtBQUosQ0FBVSxvQkFBVixDQUFOO0FBQ2IsT0FBS0MsUUFBTCxHQUFnQlAsS0FBS0csSUFB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LE9BQWIsRUFBc0JqQyxRQUFRaUMsT0FBUixHQUFrQixFQUFsQjtBQUN0QixNQUFJSCxRQUFRLEVBQUU3QixJQUFJYSxLQUFLQyxHQUFMLEVBQU4sRUFBa0JILFNBQVNBLE9BQTNCLEVBQVo7QUFDQTNCLFNBQU8rQixLQUFQLENBQWFjLEtBQWIsRUFBb0JqQixXQUFXLEVBQS9CO0FBQ0FiLFVBQVFpQyxPQUFSLENBQWdCaEIsSUFBaEIsQ0FBcUJhLEtBQXJCO0FBQ0EsU0FBT0EsTUFBTTdCLEVBQWI7QUFDRCxDQVBEOztBQVNBLFNBQVNPLGFBQVQsQ0FBd0IwQixLQUF4QixFQUErQjtBQUM3QixNQUFJQyxRQUFRLEVBQVo7QUFDQUQsUUFBTW5DLE9BQU4sQ0FBYyxVQUFDcUMsSUFBRCxFQUFVO0FBQ3RCLFFBQUlBLEtBQUtDLFdBQVQsRUFBc0IsT0FBTyxLQUFNLENBQWI7QUFDdEJGLFVBQU1sQixJQUFOLENBQVdoQyxPQUFPcUQsSUFBUCxDQUFZRixJQUFaLEVBQWtCLENBQUMsWUFBRCxFQUFlLFVBQWYsQ0FBbEIsQ0FBWDtBQUNELEdBSEQ7QUFJQSxTQUFPRCxLQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUJwRCxRQUFqQiIsImZpbGUiOiJDb21tZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBmc2UgPSByZXF1aXJlKCdoYWlrdS1mcy1leHRyYScpXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpXG52YXIgRklMRV9QQVRIID0gcGF0aC5qb2luKCcuaGFpa3UnLCAnY29tbWVudHMuanNvbicpXG5cbmZ1bmN0aW9uIENvbW1lbnRzIChmb2xkZXIpIHtcbiAgaWYgKCFmb2xkZXIpIHRocm93IG5ldyBFcnJvcignRm9sZGVyIGlzIHJlcXVpcmVkJylcbiAgdGhpcy5kYXRhcGF0aCA9IHBhdGguam9pbihmb2xkZXIsIEZJTEVfUEFUSClcbiAgdGhpcy5jb21tZW50cyA9IFtdXG59XG5cbkNvbW1lbnRzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gX2xvYWQgKGNiKSB7XG4gIHJldHVybiBmc2UucmVhZEpzb24odGhpcy5kYXRhcGF0aCwgZnVuY3Rpb24gKGVyciwgY29tbWVudHMpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIHRoaXMuY29tbWVudHMgPSBjb21tZW50cyB8fCBbXVxuICAgIHRoaXMuY29tbWVudHMuZm9yRWFjaCgoY29tbWVudCkgPT4ge1xuICAgICAgaWYgKCFjb21tZW50LmlkKSBjb21tZW50LmlkID0gTWF0aC5yYW5kb20oKSArICcnXG4gICAgfSlcbiAgICByZXR1cm4gY2IoKVxuICB9LmJpbmQodGhpcykpXG59XG5cbkNvbW1lbnRzLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gX3NhdmUgKGNiKSB7XG4gIHJldHVybiBmc2Uud3JpdGVKc29uKHRoaXMuZGF0YXBhdGgsIGNsZWFuQ29tbWVudHModGhpcy5jb21tZW50cyksIHsgc3BhY2VzOiAyIH0sIGNiIHx8IGZ1bmN0aW9uICgpIHt9KVxufVxuXG4vLyBAZnVuY3Rpb24gYWRkXG4vLyBAcGFyYW0gY29udGVudCB7c3RyaW5nfSBUaGUgY29udGVudCBzdHJpbmcgKGNhbiBiZSBNYXJrZG93bilcbi8vIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IE9wdGlvbmFsIGF0dHJpYnV0ZXMgZm9yIHRoZSBjb21tZW50IG9iamVjdC5cbi8vIEByZXR1cm5zIGlkIHtudW1iZXJ9IElkIG9mIHRoZSBjb21tZW50XG4vLyBAZGVzY3JpcHRpb25cbi8vIEV4YW1wbGU6XG4vLyB7XG4vLyAgIGNvbnRleHQ6IFwic3RhZ2VcIixcbi8vICAgdGltZWxpbmU6IFwiRGVmYXVsdFwiLFxuLy8gICB0aW1lOiAwLFxuLy8gICB4OiAxMjMsXG4vLyAgIHk6IDIzMSxcbi8vICAgdzogMzAwLFxuLy8gICBoOiAyMDAsXG4vLyAgIGNvbnRlbnQ6IFwiTG9va291dCBfYmVsb29vb293X1wiXG4vLyB9XG4vLyBJdCdzIHVwIHRvIHRoZSBVSSB0byBkZWNpZGUgaG93IHRvIHJlbmRlciB0aGVzZS5cbkNvbW1lbnRzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBfYWRkIChjb250ZW50LCBvcHRpb25zKSB7XG4gIHZhciBpZCA9IERhdGUubm93KClcbiAgdmFyIGNvbW1lbnQgPSB7IGNvbnRlbnQ6IGNvbnRlbnQsIGlkOiBpZCB9XG4gIGxvZGFzaC5tZXJnZShjb21tZW50LCBvcHRpb25zIHx8IHt9KVxuICB0aGlzLmNvbW1lbnRzLnB1c2goY29tbWVudClcbiAgdGhpcy5jb21tZW50cyA9IGxvZGFzaC51bmlxV2l0aCh0aGlzLmNvbW1lbnRzLCBsb2Rhc2guaXNFcXVhbClcbiAgcmV0dXJuIGlkXG59XG5cbkNvbW1lbnRzLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uIF9idWlsZCAob3B0aW9ucykge1xuICB0aGlzLmFkZCgnJywgbG9kYXNoLm1lcmdlKHtcbiAgICBjcmVhdGVkOiBEYXRlLm5vdygpLFxuICAgIGF1dGhvcjogbnVsbCwgLy8gVE9ET1xuICAgIGlzT3BlbmVkOiB0cnVlLFxuICAgIGlzRWRpdGluZzogdHJ1ZVxuICB9LCBvcHRpb25zKSlcbn1cblxuLy8gQGZ1bmN0aW9uIHJlbW92ZVxuLy8gQHBhcmFtIGlkIHtudW1iZXJ9IElkIG9mIHRoZSBjb21tZW50IHRvIHJlbW92ZVxuQ29tbWVudHMucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIF9yZW1vdmUgKGlkKSB7XG4gIGxvZGFzaC5wdWxsQWxsV2l0aCh0aGlzLmNvbW1lbnRzLCBbeyBpZDogaWQgfV0sIGxvZGFzaC5tYXRjaGVzKVxuICByZXR1cm4gaWRcbn1cblxuQ29tbWVudHMucHJvdG90eXBlLnJlcGx5ID0gZnVuY3Rpb24gX3JlcGx5IChpZCwgY29udGVudCwgb3B0aW9ucykge1xuICB2YXIgY29tbWVudCA9IGxvZGFzaC5maW5kKHRoaXMuY29tbWVudHMsIHsgaWQ6IGlkIH0pXG4gIGlmICghY29tbWVudC5yZXBsaWVzKSBjb21tZW50LnJlcGxpZXMgPSBbXVxuICB2YXIgcmVwbHkgPSB7IGlkOiBEYXRlLm5vdygpLCBjb250ZW50OiBjb250ZW50IH1cbiAgbG9kYXNoLm1lcmdlKHJlcGx5LCBvcHRpb25zIHx8IHt9KVxuICBjb21tZW50LnJlcGxpZXMucHVzaChyZXBseSlcbiAgcmV0dXJuIHJlcGx5LmlkXG59XG5cbmZ1bmN0aW9uIGNsZWFuQ29tbWVudHMgKGRpcnR5KSB7XG4gIHZhciBjbGVhbiA9IFtdXG4gIGRpcnR5LmZvckVhY2goKGRpcnQpID0+IHtcbiAgICBpZiAoZGlydC5pc0NhbmNlbGxlZCkgcmV0dXJuIHZvaWQgKDApXG4gICAgY2xlYW4ucHVzaChsb2Rhc2gub21pdChkaXJ0LCBbJ2lzUmVwbHlpbmcnLCAnaXNPcGVuZWQnXSkpXG4gIH0pXG4gIHJldHVybiBjbGVhblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1lbnRzXG4iXX0=