'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function mod(idx, max) {
  return (idx % max + max) % max;
}

function nextPropItem(orig, step) {
  // Wraparound the array so the last item's "next" is the first item, etc.
  var idx = mod(orig._index + step, orig._items.length);

  // If the selfsame index, we're on the same item, so just use that
  if (idx === orig._index) {
    return orig;
  }

  var item = orig._items[idx];

  // Only properties are allowed to be used as input fields; skip all else
  if (item.isProperty) {
    return item;
  }

  var bump = step < 0 ? -1 : 1;
  return nextPropItem(orig, step + bump);
}

function isItemEqual(a, b) {
  if (!a) return false;
  if (!b) return false;
  return a.node.attributes['haiku-id'] === b.node.attributes['haiku-id'] && a.node.elementName === b.node.elementName && a.property.name === b.property.name;
}

function getItemPropertyId(inputItem) {
  return 'property-input-field-box-' + getItemComponentId(inputItem) + '-' + getItemElementName(inputItem) + '-' + getItemPropertyName(inputItem);
}

function getItemComponentId(inputItem) {
  return inputItem.node.attributes['haiku-id'];
}

function getItemElementName(inputItem) {
  return _typeof(inputItem.node.elementName) === 'object' ? 'div' : inputItem.node.elementName;
}

function getItemPropertyName(inputItem) {
  return inputItem.property.name;
}

module.exports = {
  mod: mod,
  nextPropItem: nextPropItem,
  isItemEqual: isItemEqual,
  getItemPropertyId: getItemPropertyId,
  getItemComponentId: getItemComponentId,
  getItemElementName: getItemElementName,
  getItemPropertyName: getItemPropertyName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvSXRlbUhlbHBlcnMuanMiXSwibmFtZXMiOlsibW9kIiwiaWR4IiwibWF4IiwibmV4dFByb3BJdGVtIiwib3JpZyIsInN0ZXAiLCJfaW5kZXgiLCJfaXRlbXMiLCJsZW5ndGgiLCJpdGVtIiwiaXNQcm9wZXJ0eSIsImJ1bXAiLCJpc0l0ZW1FcXVhbCIsImEiLCJiIiwibm9kZSIsImF0dHJpYnV0ZXMiLCJlbGVtZW50TmFtZSIsInByb3BlcnR5IiwibmFtZSIsImdldEl0ZW1Qcm9wZXJ0eUlkIiwiaW5wdXRJdGVtIiwiZ2V0SXRlbUNvbXBvbmVudElkIiwiZ2V0SXRlbUVsZW1lbnROYW1lIiwiZ2V0SXRlbVByb3BlcnR5TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxHQUFULENBQWNDLEdBQWQsRUFBbUJDLEdBQW5CLEVBQXdCO0FBQ3RCLFNBQU8sQ0FBQ0QsTUFBTUMsR0FBTixHQUFZQSxHQUFiLElBQW9CQSxHQUEzQjtBQUNEOztBQUVELFNBQVNDLFlBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQztBQUNBLE1BQUlKLE1BQU1ELElBQUlJLEtBQUtFLE1BQUwsR0FBY0QsSUFBbEIsRUFBd0JELEtBQUtHLE1BQUwsQ0FBWUMsTUFBcEMsQ0FBVjs7QUFFQTtBQUNBLE1BQUlQLFFBQVFHLEtBQUtFLE1BQWpCLEVBQXlCO0FBQ3ZCLFdBQU9GLElBQVA7QUFDRDs7QUFFRCxNQUFJSyxPQUFPTCxLQUFLRyxNQUFMLENBQVlOLEdBQVosQ0FBWDs7QUFFQTtBQUNBLE1BQUlRLEtBQUtDLFVBQVQsRUFBcUI7QUFDbkIsV0FBT0QsSUFBUDtBQUNEOztBQUVELE1BQUlFLE9BQVFOLE9BQU8sQ0FBUixHQUFhLENBQUMsQ0FBZCxHQUFrQixDQUE3QjtBQUNBLFNBQU9GLGFBQWFDLElBQWIsRUFBbUJDLE9BQU9NLElBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULENBQXNCQyxDQUF0QixFQUF5QkMsQ0FBekIsRUFBNEI7QUFDMUIsTUFBSSxDQUFDRCxDQUFMLEVBQVEsT0FBTyxLQUFQO0FBQ1IsTUFBSSxDQUFDQyxDQUFMLEVBQVEsT0FBTyxLQUFQO0FBQ1IsU0FDRUQsRUFBRUUsSUFBRixDQUFPQyxVQUFQLENBQWtCLFVBQWxCLE1BQWtDRixFQUFFQyxJQUFGLENBQU9DLFVBQVAsQ0FBa0IsVUFBbEIsQ0FBbEMsSUFDQUgsRUFBRUUsSUFBRixDQUFPRSxXQUFQLEtBQXVCSCxFQUFFQyxJQUFGLENBQU9FLFdBRDlCLElBRUFKLEVBQUVLLFFBQUYsQ0FBV0MsSUFBWCxLQUFvQkwsRUFBRUksUUFBRixDQUFXQyxJQUhqQztBQUtEOztBQUVELFNBQVNDLGlCQUFULENBQTRCQyxTQUE1QixFQUF1QztBQUNyQyx1Q0FBbUNDLG1CQUFtQkQsU0FBbkIsQ0FBbkMsU0FBb0VFLG1CQUFtQkYsU0FBbkIsQ0FBcEUsU0FBcUdHLG9CQUFvQkgsU0FBcEIsQ0FBckc7QUFDRDs7QUFFRCxTQUFTQyxrQkFBVCxDQUE2QkQsU0FBN0IsRUFBd0M7QUFDdEMsU0FBT0EsVUFBVU4sSUFBVixDQUFlQyxVQUFmLENBQTBCLFVBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTTyxrQkFBVCxDQUE2QkYsU0FBN0IsRUFBd0M7QUFDdEMsU0FBUSxRQUFPQSxVQUFVTixJQUFWLENBQWVFLFdBQXRCLE1BQXNDLFFBQXZDLEdBQW1ELEtBQW5ELEdBQTJESSxVQUFVTixJQUFWLENBQWVFLFdBQWpGO0FBQ0Q7O0FBRUQsU0FBU08sbUJBQVQsQ0FBOEJILFNBQTlCLEVBQXlDO0FBQ3ZDLFNBQU9BLFVBQVVILFFBQVYsQ0FBbUJDLElBQTFCO0FBQ0Q7O0FBRURNLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjFCLFVBRGU7QUFFZkcsNEJBRmU7QUFHZlMsMEJBSGU7QUFJZlEsc0NBSmU7QUFLZkUsd0NBTGU7QUFNZkMsd0NBTmU7QUFPZkM7QUFQZSxDQUFqQiIsImZpbGUiOiJJdGVtSGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1vZCAoaWR4LCBtYXgpIHtcbiAgcmV0dXJuIChpZHggJSBtYXggKyBtYXgpICUgbWF4XG59XG5cbmZ1bmN0aW9uIG5leHRQcm9wSXRlbSAob3JpZywgc3RlcCkge1xuICAvLyBXcmFwYXJvdW5kIHRoZSBhcnJheSBzbyB0aGUgbGFzdCBpdGVtJ3MgXCJuZXh0XCIgaXMgdGhlIGZpcnN0IGl0ZW0sIGV0Yy5cbiAgbGV0IGlkeCA9IG1vZChvcmlnLl9pbmRleCArIHN0ZXAsIG9yaWcuX2l0ZW1zLmxlbmd0aClcblxuICAvLyBJZiB0aGUgc2VsZnNhbWUgaW5kZXgsIHdlJ3JlIG9uIHRoZSBzYW1lIGl0ZW0sIHNvIGp1c3QgdXNlIHRoYXRcbiAgaWYgKGlkeCA9PT0gb3JpZy5faW5kZXgpIHtcbiAgICByZXR1cm4gb3JpZ1xuICB9XG5cbiAgbGV0IGl0ZW0gPSBvcmlnLl9pdGVtc1tpZHhdXG5cbiAgLy8gT25seSBwcm9wZXJ0aWVzIGFyZSBhbGxvd2VkIHRvIGJlIHVzZWQgYXMgaW5wdXQgZmllbGRzOyBza2lwIGFsbCBlbHNlXG4gIGlmIChpdGVtLmlzUHJvcGVydHkpIHtcbiAgICByZXR1cm4gaXRlbVxuICB9XG5cbiAgbGV0IGJ1bXAgPSAoc3RlcCA8IDApID8gLTEgOiAxXG4gIHJldHVybiBuZXh0UHJvcEl0ZW0ob3JpZywgc3RlcCArIGJ1bXApXG59XG5cbmZ1bmN0aW9uIGlzSXRlbUVxdWFsIChhLCBiKSB7XG4gIGlmICghYSkgcmV0dXJuIGZhbHNlXG4gIGlmICghYikgcmV0dXJuIGZhbHNlXG4gIHJldHVybiAoXG4gICAgYS5ub2RlLmF0dHJpYnV0ZXNbJ2hhaWt1LWlkJ10gPT09IGIubm9kZS5hdHRyaWJ1dGVzWydoYWlrdS1pZCddICYmXG4gICAgYS5ub2RlLmVsZW1lbnROYW1lID09PSBiLm5vZGUuZWxlbWVudE5hbWUgJiZcbiAgICBhLnByb3BlcnR5Lm5hbWUgPT09IGIucHJvcGVydHkubmFtZVxuICApXG59XG5cbmZ1bmN0aW9uIGdldEl0ZW1Qcm9wZXJ0eUlkIChpbnB1dEl0ZW0pIHtcbiAgcmV0dXJuIGBwcm9wZXJ0eS1pbnB1dC1maWVsZC1ib3gtJHtnZXRJdGVtQ29tcG9uZW50SWQoaW5wdXRJdGVtKX0tJHtnZXRJdGVtRWxlbWVudE5hbWUoaW5wdXRJdGVtKX0tJHtnZXRJdGVtUHJvcGVydHlOYW1lKGlucHV0SXRlbSl9YFxufVxuXG5mdW5jdGlvbiBnZXRJdGVtQ29tcG9uZW50SWQgKGlucHV0SXRlbSkge1xuICByZXR1cm4gaW5wdXRJdGVtLm5vZGUuYXR0cmlidXRlc1snaGFpa3UtaWQnXVxufVxuXG5mdW5jdGlvbiBnZXRJdGVtRWxlbWVudE5hbWUgKGlucHV0SXRlbSkge1xuICByZXR1cm4gKHR5cGVvZiBpbnB1dEl0ZW0ubm9kZS5lbGVtZW50TmFtZSA9PT0gJ29iamVjdCcpID8gJ2RpdicgOiBpbnB1dEl0ZW0ubm9kZS5lbGVtZW50TmFtZVxufVxuXG5mdW5jdGlvbiBnZXRJdGVtUHJvcGVydHlOYW1lIChpbnB1dEl0ZW0pIHtcbiAgcmV0dXJuIGlucHV0SXRlbS5wcm9wZXJ0eS5uYW1lXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtb2QsXG4gIG5leHRQcm9wSXRlbSxcbiAgaXNJdGVtRXF1YWwsXG4gIGdldEl0ZW1Qcm9wZXJ0eUlkLFxuICBnZXRJdGVtQ29tcG9uZW50SWQsXG4gIGdldEl0ZW1FbGVtZW50TmFtZSxcbiAgZ2V0SXRlbVByb3BlcnR5TmFtZVxufVxuIl19