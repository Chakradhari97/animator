{"version":3,"sources":["../src/ProjectFile.js"],"names":["ensure","read","write","update","folder","filepath","cb","ensureFile","join","ensureErr","readFile","readErr","buffer","contents","toString","writeFile","writeErr","modifierFunction","modified"],"mappings":";;;;;QAGgBA,M,GAAAA,M;QAOAC,I,GAAAA,I;QAQAC,K,GAAAA,K;QAOAC,M,GAAAA,M;;AAzBhB;;;;AACA;;;;;;AAEO,SAASH,MAAT,CAAiBI,MAAjB,EAAyBC,QAAzB,EAAmCC,EAAnC,EAAuC;AAC5C,SAAO,uBAAIC,UAAJ,CAAe,eAAKC,IAAL,CAAUJ,MAAV,EAAkBC,QAAlB,CAAf,EAA4C,UAACI,SAAD,EAAe;AAChE,QAAIA,SAAJ,EAAe,OAAOH,GAAGG,SAAH,CAAP;AACf,WAAOH,IAAP;AACD,GAHM,CAAP;AAID;;AAEM,SAASL,IAAT,CAAeG,MAAf,EAAuBC,QAAvB,EAAiCC,EAAjC,EAAqC;AAC1C,SAAO,uBAAII,QAAJ,CAAa,eAAKF,IAAL,CAAUJ,MAAV,EAAkBC,QAAlB,CAAb,EAA0C,UAACM,OAAD,EAAUC,MAAV,EAAqB;AACpE,QAAID,OAAJ,EAAa,OAAOL,GAAGK,OAAH,CAAP;AACb,QAAIE,WAAWD,OAAOE,QAAP,EAAf;AACA,WAAOR,GAAG,IAAH,EAASO,QAAT,CAAP;AACD,GAJM,CAAP;AAKD;;AAEM,SAASX,KAAT,CAAgBE,MAAhB,EAAwBC,QAAxB,EAAkCQ,QAAlC,EAA4CP,EAA5C,EAAgD;AACrD,SAAO,uBAAIS,SAAJ,CAAc,eAAKP,IAAL,CAAUJ,MAAV,EAAkBC,QAAlB,CAAd,EAA2CQ,QAA3C,EAAqD,UAACG,QAAD,EAAc;AACxE,QAAIA,QAAJ,EAAc,OAAOV,GAAGU,QAAH,CAAP;AACd,WAAOV,GAAG,IAAH,EAASO,QAAT,CAAP;AACD,GAHM,CAAP;AAID;;AAEM,SAASV,MAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCY,gBAAnC,EAAqDX,EAArD,EAAyD;AAC9D,SAAON,OAAOI,MAAP,EAAeC,QAAf,EAAyB,UAACI,SAAD,EAAe;AAC7C,QAAIA,SAAJ,EAAe,OAAOH,GAAGG,SAAH,CAAP;AACf,WAAOR,KAAKG,MAAL,EAAaC,QAAb,EAAuB,UAACM,OAAD,EAAUE,QAAV,EAAuB;AACnD,UAAIF,OAAJ,EAAa,OAAOL,GAAGK,OAAH,CAAP;AACb,UAAMO,WAAWD,iBAAiBJ,QAAjB,CAAjB,CAFmD,CAEP;AAC5C,aAAOX,MAAME,MAAN,EAAcC,QAAd,EAAwBa,QAAxB,EAAkC,UAACF,QAAD,EAAc;AACrD,YAAIA,QAAJ,EAAc,OAAOV,GAAGU,QAAH,CAAP;AACd,eAAOV,GAAG,IAAH,EAASY,QAAT,CAAP;AACD,OAHM,CAAP;AAID,KAPM,CAAP;AAQD,GAVM,CAAP;AAWD","file":"ProjectFile.js","sourcesContent":["import fse from 'haiku-fs-extra'\nimport path from 'path'\n\nexport function ensure (folder, filepath, cb) {\n  return fse.ensureFile(path.join(folder, filepath), (ensureErr) => {\n    if (ensureErr) return cb(ensureErr)\n    return cb()\n  })\n}\n\nexport function read (folder, filepath, cb) {\n  return fse.readFile(path.join(folder, filepath), (readErr, buffer) => {\n    if (readErr) return cb(readErr)\n    let contents = buffer.toString()\n    return cb(null, contents)\n  })\n}\n\nexport function write (folder, filepath, contents, cb) {\n  return fse.writeFile(path.join(folder, filepath), contents, (writeErr) => {\n    if (writeErr) return cb(writeErr)\n    return cb(null, contents)\n  })\n}\n\nexport function update (folder, filepath, modifierFunction, cb) {\n  return ensure(folder, filepath, (ensureErr) => {\n    if (ensureErr) return cb(ensureErr)\n    return read(folder, filepath, (readErr, contents) => {\n      if (readErr) return cb(readErr)\n      const modified = modifierFunction(contents) // Expected to modify in-place\n      return write(folder, filepath, modified, (writeErr) => {\n        if (writeErr) return cb(writeErr)\n        return cb(null, modified)\n      })\n    })\n  })\n}\n"]}