{"version":3,"sources":["../src/ProcessBase.js"],"names":["killables","killall","forEach","killable","kill","pinfo","process","pid","basename","__filename","execPath","attachProcess","Error","stackTraceLimit","Infinity","stdout","_handle","setBlocking","on","exception","console","error","exit","info","ProcessBase","alias","api","options","args","subcommand","flags","$","concat","constructor","name","haiku","HAIKU","reestablishConnection","data","status","emit","isOpen","socket","url","host","env","HAIKU_PLUMBING_HOST","port","HAIKU_PLUMBING_PORT","folder","HAIKU_PROJECT_FOLDER","bind","warn","wsc","readyState","getReadyState","OPEN","CONNECTING","message","send"],"mappings":"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","file":"ProcessBase.js","sourcesContent":["import Websocket from 'ws'\nimport path from 'path'\nimport { EventEmitter } from 'events'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport WebsocketClient from 'haiku-websockets/lib/WebsocketClient'\nimport envInfo from './envInfo'\nimport haikuInfo from './haikuInfo'\n\nconst killables = []\nfunction killall () {\n  killables.forEach((killable) => {\n    killable.kill()\n  })\n}\n\nconst pinfo = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nfunction attachProcess () {\n  Error.stackTraceLimit = Infinity // Show long stack traces when errors are shown\n  // A handle is not present if this wasn't spawned\n  if (process.stdout._handle) {\n    process.stdout._handle.setBlocking(true) // Don't truncate output to stdout\n  }\n  // process.stdin.resume()\n  process.on('uncaughtException', (exception) => {\n    console.error(exception)\n    killall()\n    process.exit(1)\n  })\n  process.on('SIGINT', () => {\n    logger.info(`[process] ${pinfo} got interrupt signal`)\n    killall()\n    process.exit()\n  })\n  process.on('SIGTERM', () => {\n    logger.info(`[process] ${pinfo} got terminate signal`)\n    killall()\n    process.exit()\n  })\n  process.on('error', (error) => {\n    logger.error(error)\n  })\n}\n\nexport default class ProcessBase extends EventEmitter {\n  constructor (alias, api = {}, options = {}) {\n    super()\n    const { args, subcommand, flags } = envInfo()\n    this.$ = [subcommand].concat(args).concat(flags) // To invoke this as a CLI command\n    this.alias = alias || this.constructor.name\n    this.api = api\n    this.options = options\n    this.haiku = ProcessBase.HAIKU\n    this.reestablishConnection()\n    process.on('message', (data) => {\n      if (data === 'reestablishConnection!') this.reestablishConnection()\n    })\n    process.on('exit', (status) => {\n      this.emit('exit')\n      process.exit(status)\n    })\n  }\n\n  reestablishConnection () {\n    if (this.isOpen()) {\n      logger.info(`[process] still connected ok; skipping reestablish`)\n      return void (0) // No need to reconnect\n    }\n\n    if (this.haiku && this.haiku.socket) {\n      const url = `http://${this.haiku.socket.host || process.env.HAIKU_PLUMBING_HOST}:${this.haiku.socket.port || process.env.HAIKU_PLUMBING_PORT}?type=controllee&alias=${this.alias}&folder=${this.haiku.folder || process.env.HAIKU_PROJECT_FOLDER}`\n      logger.info(`[process] establishing websocket connection to ${url}`)\n      this.socket = new WebsocketClient(new Websocket(url))\n      this.socket.on('request', this.emit.bind(this, 'request'))\n    } else {\n      logger.warn(`[process] no socket info given; cannot connect to Haiku plumbing hub (via ${this.alias})`)\n    }\n  }\n\n  getReadyState () {\n    if (!this.socket) return 0\n    if (!this.socket.wsc) return 0\n    return this.socket.wsc.readyState\n  }\n\n  isOpen () {\n    return this.getReadyState() === Websocket.OPEN\n  }\n\n  isConnecting () {\n    return this.getReadyState() === Websocket.CONNECTING\n  }\n\n  emitUp (message) {\n    process.send(message)\n    return this\n  }\n\n  exit (status) {\n    process.exit(status)\n  }\n\n  boom (error) {\n    throw error\n  }\n}\n\nattachProcess()\nProcessBase.HAIKU = haikuInfo()\n"]}