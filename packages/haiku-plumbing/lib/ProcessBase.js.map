{"version":3,"sources":["../src/ProcessBase.js"],"names":["Error","stackTraceLimit","Infinity","pinfo","process","pid","basename","__filename","execPath","PROCESSES","stdout","_handle","setBlocking","on","exception","console","error","eachSeries","proc","next","teardown","sacred","exit","info","ProcessBase","alias","api","options","args","subcommand","flags","$","concat","constructor","name","haiku","HAIKU","reestablishConnection","data","status","emit","push","isOpen","socket","url","host","env","HAIKU_PLUMBING_HOST","port","HAIKU_PLUMBING_PORT","folder","HAIKU_PROJECT_FOLDER","bind","wsc","readyState","CLOSED","warn","cb","getReadyState","OPEN","CONNECTING","message","send"],"mappings":"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","file":"ProcessBase.js","sourcesContent":["import Websocket from 'ws'\nimport path from 'path'\nimport async from 'async'\nimport { EventEmitter } from 'events'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport WebsocketClient from 'haiku-websockets/lib/WebsocketClient'\nimport envInfo from './envInfo'\nimport haikuInfo from './haikuInfo'\n// require('njstrace').inject()\n\nError.stackTraceLimit = Infinity // Show long stack traces when errors are shown\n\nconst pinfo = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nconst PROCESSES = []\n\n// A handle is not present if this wasn't spawned\nif (process.stdout._handle) {\n  process.stdout._handle.setBlocking(true) // Don't truncate output to stdout\n}\n\n// process.stdin.resume()\nprocess.on('uncaughtException', (exception) => {\n  console.error(exception)\n  return async.eachSeries(PROCESSES, (proc, next) => {\n    return proc.teardown(next)\n  }, () => {\n    logger.sacred(`[process] ${pinfo} exiting after exception`)\n    process.exit(1)\n  })\n})\n\nprocess.on('SIGINT', () => {\n  logger.info(`[process] ${pinfo} got interrupt signal`)\n  return async.eachSeries(PROCESSES, (proc, next) => {\n    return proc.teardown(next)\n  }, () => {\n    logger.sacred(`[process] ${pinfo} exiting after interrupt`)\n    process.exit()\n  })\n})\n\nprocess.on('SIGTERM', () => {\n  logger.info(`[process] ${pinfo} got terminate signal`)\n  return async.eachSeries(PROCESSES, (proc, next) => {\n    return proc.teardown(next)\n  }, () => {\n    logger.sacred(`[process] ${pinfo} exiting after termination`)\n    process.exit()\n  })\n})\n\nprocess.on('error', (error) => {\n  logger.error(error)\n})\n\nexport default class ProcessBase extends EventEmitter {\n  constructor (alias, api = {}, options = {}) {\n    super()\n    const { args, subcommand, flags } = envInfo()\n    this.$ = [subcommand].concat(args).concat(flags) // To invoke this as a CLI command\n    this.alias = alias || this.constructor.name\n    this.api = api\n    this.options = options\n    this.haiku = ProcessBase.HAIKU\n    this.reestablishConnection()\n    process.on('message', (data) => {\n      if (data === 'reestablishConnection!') {\n        this.reestablishConnection()\n      }\n    })\n    process.on('exit', (status) => {\n      this.emit('exit')\n      process.exit(status)\n    })\n    PROCESSES.push(this)\n  }\n\n  reestablishConnection () {\n    if (this.isOpen()) {\n      logger.info(`[process] still connected ok; skipping reestablish`)\n      return void (0) // No need to reconnect\n    }\n\n    if (this.haiku && this.haiku.socket) {\n      const url = `http://${this.haiku.socket.host || process.env.HAIKU_PLUMBING_HOST}:${this.haiku.socket.port || process.env.HAIKU_PLUMBING_PORT}?type=controllee&alias=${this.alias}&folder=${this.haiku.folder || process.env.HAIKU_PROJECT_FOLDER}`\n      this.socket = new WebsocketClient(new Websocket(url))\n      this.socket.on('request', this.emit.bind(this, 'request'))\n      this.socket.on('close', () => {\n        this.socket.wsc.readyState = Websocket.CLOSED\n      })\n      this.socket.on('error', () => {\n        logger.info(`[process] socket error (${url})`)\n      })\n    } else {\n      logger.warn(`[process] no socket info given; cannot connect to Haiku plumbing hub (via ${this.alias})`)\n    }\n  }\n\n  teardown (cb) {\n    return this.emit('teardown', cb)\n  }\n\n  getReadyState () {\n    if (!this.socket) return 0\n    if (!this.socket.wsc) return 0\n    return this.socket.wsc.readyState\n  }\n\n  isOpen () {\n    return this.getReadyState() === Websocket.OPEN\n  }\n\n  isConnecting () {\n    return this.getReadyState() === Websocket.CONNECTING\n  }\n\n  emitUp (message) {\n    process.send(message)\n    return this\n  }\n\n  exit (status) {\n    process.exit(status)\n  }\n}\n\nProcessBase.HAIKU = haikuInfo()\n"]}