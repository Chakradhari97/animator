{"version":3,"sources":["../src/Git.js"],"names":["open","forceOpen","init","status","hardReset","removeUntrackedFiles","upsertRemote","maybeInit","getIndexLockAgnostic","writeIndexLockAgnostic","destroyIndexLockSync","addPathsToIndex","addAllPathsToIndex","referenceNameToId","createSignature","buildCommit","getCurrentBranchName","cloneRepo","pushToRemote","lookupRemote","listRemotes","doesRemoteExist","getCurrentCommit","hardResetFromSHA","fetchFromRemote","mergeBranches","cleanAllChanges","buildRemoteOptions","rebaseBranches","getCommitHistoryForFile","getMasterCommitHistory","mergeBranchesWithoutBase","createTag","pushTagToRemote","listTags","commitProject","fetchProject","pushProject","combineHistories","mergeProject","logStatuses","statusToText","saveStrategyToFileFavorName","DEFAULT_COMMITTER_EMAIL","DEFAULT_COMMITTER_NAME","FORCE_PUSH_REFSPEC_PREFIX","DEFAULT_GIT_USERNAME","DEFAULT_GIT_EMAIL","DEFAULT_GIT_COMMIT_MESSAGE","globalExceptionCatcher","exception","error","REPOS","LOCKED_INDEXES","INDEX_LOCK_INTERVAL","_gimmeIndex","pwd","cb","setTimeout","err","repository","then","catch","isBare","opts","freeIndex","done","out","diffOptions","flags","OPTION","SHOW_UNTRACKED_CONTENT","RECURSE_UNTRACKED_DIRS","indexToWorkdir","diff","changes","i","numDeltas","delta","getDelta","oldPath","oldFile","path","newPath","newFile","statusPath","prev","num","targetRef","id","getCommit","toString","commit","reset","TYPE","HARD","statusesDict","Object","keys","length","each","statusItem","next","abspath","join","remove","name","url","list","remotes","found","findExistingRemote","create","remote","forEach","message","match","index","write","writeTree","oid","lockPath","existsSync","removeSync","info","relpaths","Error","eachSeries","relpath","addByPath","addAll","nameToId","email","time","Date","now","tzoffset","username","updateRef","parentRef","author","committer","createCommit","commitId","parentId","getRepositoryHeadReference","head","reference","type","isBranch","full","partial","replace","gitRemoteUrl","gitRemoteUsername","gitRemotePassword","clone","fetchOpts","remoteName","fullBranchName","doForcePush","refSpecs","lookup","fixRemoteHttpsUrl","remoteOptions","push","stack","password","matches","scheme","getHeadCommit","sha","downloadTags","fetch","branchNameOurs","branchNameTheirs","fileFavorName","doFindRenames","toUpperCase","mergeOptions","fileFavor","FILE_FAVOR","fileFlags","FILE_FLAG","FILE_DEFAULT","FLAG","FIND_RENAMES","PREFERENCE","NONE","result","constructor","callbacks","certificateCheck","credentials","userpassPlaintextNew","folder","upstreamName","branchName","ontoStr","filePath","maxEntries","headCommit","walker","createRevWalk","sorting","SORT","TIME","fileHistoryWalk","historyCommits","getMasterCommit","firstCommit","history","on","commits","start","toName","fromName","signature","mergePreference","defaultSignature","getBranch","toBranch","fromBranch","getBranchCommit","toCommit","fromCommit","toCommitOid","fromCommitOid","headRef","resolve","updateHead","hasConflicts","writeTreeTo","commitMessage","shorthand","mergeCommit","branchCommit","getTree","toBranchTree","tree","checkoutStrategy","STRATEGY","SAFE","RECREATE_MISSING","tagNameProbablySemver","tagMessage","tagOid","tagName","tags","getReferences","OID","refs","ref","isTag","useHeadAsParent","saveOptions","pathsToAdd","pathAdder","Array","isArray","user","JSON","stringify","projectName","projectGitRemoteUrl","partialBranchName","sacred","ourBranchName","theirBranchName","saveStrategy","didHaveConflicts","shaOrIndex","remoteBranchRefName","statuses","key","words","DELTA","UNMODIFIED","ADDED","DELETED","MODIFIED","RENAMED","COPIED","IGNORED","UNTRACKED","TYPECHANGE","UNREADABLE","CONFLICTED","strategy"],"mappings":"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","file":"Git.js","sourcesContent":["import { Repository, Reference, Signature, Reset, Remote, Clone, Cred, Commit, Merge, RevWalk, Checkout, Tag, Diff } from 'nodegit'\nimport path from 'path'\nimport fs from 'haiku-fs-extra'\nimport async from 'async'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\n\nconst DEFAULT_COMMITTER_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_COMMITTER_NAME = 'Haiku Plumbing'\nconst FORCE_PUSH_REFSPEC_PREFIX = '+'\nconst DEFAULT_GIT_USERNAME = 'Haiku-Plumbing'\nconst DEFAULT_GIT_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_GIT_COMMIT_MESSAGE = 'Edited project with Haiku Desktop'\n\nfunction globalExceptionCatcher (exception) {\n  logger.error(exception)\n  throw exception\n}\n\n// Multiton for caching already-opened repos\nconst REPOS = {}\nconst LOCKED_INDEXES = {}\nconst INDEX_LOCK_INTERVAL = 0\n\nfunction _gimmeIndex (pwd, cb) {\n  if (!LOCKED_INDEXES[pwd]) {\n    LOCKED_INDEXES[pwd] = true\n    return cb(() => {\n      LOCKED_INDEXES[pwd] = false\n    })\n  }\n  return setTimeout(() => {\n    return _gimmeIndex(pwd, cb)\n  }, INDEX_LOCK_INTERVAL)\n}\n\nexport function open (pwd, cb) {\n  if (REPOS[pwd]) {\n    return cb(null, REPOS[pwd])\n  }\n  return forceOpen(pwd, (err, repository) => {\n    if (err) return cb(err)\n    if (repository) {\n      REPOS[pwd] = repository\n    }\n    return cb(null, REPOS[pwd])\n  })\n}\n\nexport function forceOpen (pwd, cb) {\n  return Repository.open(pwd).then((repository) => {\n    return cb(null, repository)\n  }, cb).catch(globalExceptionCatcher)\n}\n\nexport function init (pwd, cb) {\n  const isBare = 0 // false! We want to create the .git folder _in_ the folder\n  return Repository.init(pwd, isBare).then((repository) => {\n    return cb(null, repository)\n  }, cb)\n}\n\nexport function status (pwd, opts, cb) {\n  return _gimmeIndex(pwd, (freeIndex) => {\n    function done (err, out) {\n      freeIndex()\n      return cb(err, out)\n    }\n\n    return open(pwd, (err, repository) => {\n      if (err) return done(err)\n      // return repository.refreshIndex().then((index) => {}, done) // Might need this?\n      const diffOptions = {\n        flags: Diff.OPTION.SHOW_UNTRACKED_CONTENT | Diff.OPTION.RECURSE_UNTRACKED_DIRS\n      }\n      return Diff.indexToWorkdir(repository, null, diffOptions).then((diff) => {\n        const changes = {}\n        for (let i = 0; i < diff.numDeltas(); i++) {\n          const delta = diff.getDelta(i)\n          const oldPath = delta.oldFile().path()\n          const newPath = delta.newFile().path()\n          const statusPath = oldPath || newPath\n          changes[statusPath] = {\n            delta: i,\n            prev: oldPath,\n            path: statusPath,\n            num: delta.status()\n          }\n        }\n        return done(null, changes)\n      }, done)\n    })\n  })\n}\n\n// The repository.getStatus call would hang when called too many times in parallel,\n// regardless of attempting to cache the repository object, so we swapped this for\n// the algorithm above.\n// export function status (pwd, opts, cb) {\n//   return open(pwd, (err, repository) => {\n//     if (err) return cb(err)\n//     return repository.getStatus().then((statuses) => {\n//       return cb(null, statuses)\n//     })\n//   })\n// }\n\nexport function hardReset (pwd, targetRef, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return referenceNameToId(pwd, targetRef, (err, id) => {\n      if (err) return cb(err)\n      return repository.getCommit(id.toString()).then((commit) => {\n        return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n          return cb(null, repository, commit)\n        }, cb)\n      }, cb)\n    })\n  })\n}\n\nexport function removeUntrackedFiles (pwd, cb) {\n  return status(pwd, (err, statusesDict) => {\n    if (err) return cb(err)\n    if (Object.keys(statusesDict).length < 1) return cb()\n    return async.each(statusesDict, (statusItem, next) => {\n      const abspath = path.join(pwd, statusItem.path)\n      return fs.remove(abspath, (err) => {\n        if (err) return next(err)\n        return next()\n      })\n    }, (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  })\n}\n\nexport function upsertRemote (pwd, name, url, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then(function (remotes) {\n      const found = findExistingRemote(remotes, name)\n      if (found) return cb(null, found)\n      return Remote.create(repository, name, url).then((remote) => {\n        return cb(null, remote)\n      }, cb)\n    }, cb)\n  })\n}\n\nfunction findExistingRemote (remotes, name) {\n  if (remotes.length < 1) return null\n  let found = null\n  remotes.forEach((remote) => {\n    if (typeof remote === 'string' && remote === name) found = remote\n    else if (remote.name && remote.name() === name) found = remote\n  })\n  return found\n}\n\nexport function maybeInit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err && err.message.match(/Could not find repository/)) return init(pwd, cb)\n    if (err) return cb(err)\n    return cb(null, repository, true) // <~ true == wasAlreadyInitialized\n  })\n}\n\nexport function getIndexLockAgnostic (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.index().then((index) => {\n      return cb(null, index)\n    }, cb)\n  })\n}\n\nexport function writeIndexLockAgnostic (index, pwd, cb) {\n  return index.write().then(() => {\n    return index.writeTree().then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  }, cb)\n}\n\n// HACK: This assumes we are only running one thread against this repo\nexport function destroyIndexLockSync (pwd) {\n  const lockPath = path.join(pwd, '.git', 'index.lock')\n  delete LOCKED_INDEXES[pwd] // Remove the in-memory mutex too in case one is hanging around\n  try {\n    if (fs.existsSync(lockPath)) {\n      fs.removeSync(lockPath)\n    }\n  } catch (exception) {\n    logger.info('[git]', exception)\n  }\n}\n\nexport function addPathsToIndex (pwd, relpaths = [], cb) {\n  if (relpaths.length < 1) return cb(new Error('Empty paths list given'))\n  return _gimmeIndex(pwd, (freeIndex) => {\n    function done (err, out) {\n      freeIndex()\n      return cb(err, out)\n    }\n\n    return getIndexLockAgnostic(pwd, (err, index) => {\n      if (err) return done(err)\n      return async.eachSeries(relpaths, (relpath, next) => {\n        return index.addByPath(relpath).then(() => {\n          return next()\n        }, next)\n      }, (err) => {\n        if (err) return done(err)\n        return writeIndexLockAgnostic(index, pwd, done)\n      })\n    })\n  })\n}\n\nexport function addAllPathsToIndex (pwd, cb) {\n  return _gimmeIndex(pwd, (freeIndex) => {\n    function done (err, out) {\n      freeIndex()\n      return cb(err, out)\n    }\n\n    return getIndexLockAgnostic(pwd, (err, index) => {\n      if (err) return done(err)\n      return index.addAll('.').then(() => {\n        return writeIndexLockAgnostic(index, pwd, done)\n      }, done)\n    })\n  })\n}\n\nexport function referenceNameToId (pwd, name, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    logger.info('[git] getting id for reference name', name)\n    return Reference.nameToId(repository, name).then((id) => {\n      logger.info('[git] reference name', name, 'resolved to', id && id.toString())\n      return cb(null, id)\n    }, (err) => {\n      logger.info('[git]', err)\n      return cb(err)\n    })\n  })\n}\n\nexport function createSignature (name, email) {\n  const time = ~~(Date.now() / 1000)\n  const tzoffset = 0 // minutes\n  return Signature.create(name, email, time, tzoffset)\n}\n\nexport function buildCommit (pwd, username, email, message, oid, updateRef, parentRef, cb) {\n  const author = createSignature(username || DEFAULT_COMMITTER_NAME, email || DEFAULT_COMMITTER_EMAIL)\n  const committer = createSignature(DEFAULT_COMMITTER_NAME, DEFAULT_COMMITTER_EMAIL)\n\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n\n    // If no parent, assume first commit - the first commit should always use this pathway\n    if (!parentRef) {\n      return repository.createCommit(updateRef, author, committer, message, oid, []).then((commitId) => {\n        return cb(null, commitId)\n      }, cb)\n    }\n\n    return referenceNameToId(pwd, parentRef, (err, parentId) => {\n      if (err) return cb(err)\n      return repository.createCommit(updateRef, author, committer, message, oid, [parentId]).then((commitId) => {\n        return cb(null, commitId)\n      }, cb)\n    })\n  })\n}\n\nfunction getRepositoryHeadReference (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.head().then((reference) => {\n      return cb(null, reference, reference.type(), repository)\n    }, cb)\n  })\n}\n\nexport function getCurrentBranchName (pwd, cb) {\n  return getRepositoryHeadReference(pwd, (err, reference, type, repository) => {\n    if (err) return cb(err)\n    if (!reference.isBranch()) return cb(new Error('Head reference is not a branch'))\n    const full = reference.name()\n    const partial = full.replace('refs/heads/', '')\n    return cb(null, partial, full, reference, repository)\n  })\n}\n\nexport function cloneRepo (gitRemoteUrl, gitRemoteUsername, gitRemotePassword, abspath, cb) {\n  return Clone.clone(gitRemoteUrl, abspath, { fetchOpts: buildRemoteOptions(gitRemoteUsername, gitRemotePassword) }).then((repository) => {\n    return cb(null, repository, abspath)\n  }, cb)\n}\n\nexport function pushToRemote (pwd, remoteName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    const refSpecs = [`${(doForcePush) ? FORCE_PUSH_REFSPEC_PREFIX : ''}${fullBranchName}:${fullBranchName}`]\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          const remoteOptions = buildRemoteOptions(gitRemoteUsername, gitRemotePassword)\n          logger.info('[git] pushing content to remote', refSpecs, remoteOptions)\n          return remote.push(refSpecs, remoteOptions).then(() => {\n            return cb()\n          }, (err) => {\n            logger.info('[git] error pushing content to remote', err.stack)\n            return cb(err)\n          })\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function lookupRemote (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      return cb(null, remote)\n    }, cb)\n  })\n}\n\nexport function listRemotes (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      return cb(null, remotes)\n    }, cb)\n  })\n}\n\nfunction fixRemoteHttpsUrl (repository, remote, username, password, cb) {\n  const url = remote.url()\n  const name = remote.name()\n  const matches = url.match(/^(https?)/)\n  const scheme = matches && matches[1]\n  logger.info('[git] remote info:', url, name, scheme)\n  //\n  // HACK? It might be necessary in some cases to fix the remote URL to include HTTPS creds?\n  // We haven't needed this because we are using the certificateCheck credentials function\n  // to provide the credentials, but I'm leaving the code here, just in case it comes up somehow.\n  //\n  // if (!scheme) return cb() // This is not https\n  // // TODO: Replace the creds in the URL with new creds?\n  // if (url.indexOf('@') !== -1) return cb() // Creds are already present\n  // const fixed = url.replace(`${scheme}://`, `${scheme}://${encodeURIComponent(username)}:${encodeURIComponent(password)}@`)\n  // const result = Remote.setUrl(repository, name, fixed)\n  //\n  return cb()\n}\n\nexport function doesRemoteExist (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      return cb(null, !!found)\n    }, cb)\n  })\n}\n\nexport function getCurrentCommit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((commit) => {\n      return cb(null, commit.sha(), commit, repository)\n    }, cb)\n  })\n}\n\nexport function hardResetFromSHA (pwd, sha, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Commit.lookup(repository, sha).then((commit) => {\n      return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function fetchFromRemote (pwd, remoteName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      let fetchOpts = buildRemoteOptions(gitRemoteUsername, gitRemotePassword)\n\n      // Need to set this otherwise the fetch won't also download tags.\n      // Without tags, we can't detect what the next tag to bump to is\n      fetchOpts.downloadTags = 3\n\n      logger.info('[git] fetching remote', remoteName, fetchOpts)\n      logger.info('[git] remote info:', remote.name(), remote.url())\n\n      return repository.fetch(remote, fetchOpts).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function mergeBranches (pwd, branchNameOurs, branchNameTheirs, fileFavorName, doFindRenames, cb) {\n  logger.info('[git] merging branches from', branchNameTheirs, 'to', branchNameOurs)\n\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n\n    fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n    logger.info('[git] merge file favor:', fileFavorName)\n    logger.info('[git] merge finding renames?:', doFindRenames)\n\n    // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n    let mergeOptions = {\n      fileFavor: Merge.FILE_FAVOR[fileFavorName],\n      fileFlags: Merge.FILE_FLAG.FILE_DEFAULT,\n      flags: (doFindRenames) ? Merge.FLAG.FIND_RENAMES : void (0)\n    }\n\n    logger.info('[git] merge using options:', mergeOptions)\n\n    return repository.mergeBranches(branchNameOurs, branchNameTheirs, null, Merge.PREFERENCE.NONE, mergeOptions).then((result) => {\n      // If result is an oid string, the commit was successful. (The oid is a commit id.)\n      if (result && typeof result === 'string') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If result is an oid object, the commit was successful. (The oid is a commit id.)\n      if (result && result.constructor && result.constructor.name === 'Oid') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If the result is an index, there were conflicts. (The index is the index of conflicts.)\n      if (result && result.constructor && result.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as index)', result)\n        return cb(null, true, result, result)\n      }\n\n      return cb(new Error('Branch merge got unexpected result'), result, result)\n    }, (err) => {\n      // Upon a merge conflict, nodegit might return the index _as_ an error object. :-(  (The index is the index of conflicts.)\n      if (err && err.constructor && err.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as error)', err)\n        return cb(null, true, err, err)\n      }\n\n      return cb(err)\n    })\n  })\n}\n\nexport function cleanAllChanges (pwd, cb) {\n  return hardReset(pwd, 'HEAD', (err, repository, commit) => {\n    if (err) return cb(err)\n    return removeUntrackedFiles(pwd, cb)\n  })\n}\n\nexport function buildRemoteOptions (gitRemoteUsername, gitRemotePassword) {\n  if (!gitRemoteUsername) throw new Error('Remote username required for credentials')\n  if (!gitRemotePassword) throw new Error('Remote password required for credentials')\n  return {\n    callbacks: {\n      certificateCheck: () => 1,\n      credentials: function (url) {\n        // return NodeGit.Cred.sshKeyFromAgent(username)\n        return Cred.userpassPlaintextNew(gitRemoteUsername, gitRemotePassword)\n      }\n    }\n  }\n}\n\nexport function rebaseBranches (folder, upstreamName, branchName, ontoStr, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.rebaseBranches(branchName, upstreamName, ontoStr, null).then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  })\n}\n\nexport function getCommitHistoryForFile (folder, filePath, maxEntries = 1000, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((headCommit) => {\n      const walker = repository.createRevWalk()\n      walker.push(headCommit.id())\n      walker.sorting(RevWalk.SORT.TIME)\n      return walker.fileHistoryWalk(filePath, maxEntries).then((historyCommits) => {\n        return cb(null, historyCommits)\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function getMasterCommitHistory (folder, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getMasterCommit().then((firstCommit) => {\n      const history = firstCommit.history(RevWalk.SORT.TIME)\n      history.on('end', (commits) => { return cb(null, commits) })\n      history.on('error', (error) => { return cb(error) })\n      history.start()\n      return history\n    }, cb)\n  })\n}\n\nexport function mergeBranchesWithoutBase (folder, toName, fromName, signature, mergePreference, fileFavorName, cb) {\n  logger.info('[git] merging branches (without base) from', fromName, 'to', toName)\n\n  return _gimmeIndex(folder, (freeIndex) => {\n    function done (err, out) {\n      freeIndex()\n      return cb(err, out)\n    }\n\n    return open(folder, (err, repository) => {\n      if (err) return done(err)\n      if (!mergePreference) mergePreference = Merge.PREFERENCE.NONE\n      if (!signature) signature = signature || repository.defaultSignature()\n\n      fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n      logger.info('[git] merge (without base) file favor:', fileFavorName)\n\n      // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n      let mergeOptions = {\n        fileFavor: Merge.FILE_FAVOR[fileFavorName],\n        fileFlags: Merge.FILE_FLAG.FILE_DEFAULT\n      }\n\n      return repository.getBranch(toName).then((toBranch) => {\n        return repository.getBranch(fromName).then((fromBranch) => {\n          return repository.getBranchCommit(toBranch).then((toCommit) => {\n            return repository.getBranchCommit(fromBranch).then((fromCommit) => {\n              const toCommitOid = toCommit.toString()\n              const fromCommitOid = fromCommit.toString()\n              return Reference.lookup(repository, 'HEAD').then((headRef) => {\n                return headRef.resolve().then((headRef) => {\n                  const updateHead = !!headRef && headRef.name() === toBranch.name()\n\n                  logger.info('[git] merge using options:', mergeOptions)\n\n                  return Merge.commits(repository, toCommitOid, fromCommitOid, mergeOptions).then((index) => {\n                    if (index.hasConflicts()) return done(null, true, index)\n                    return index.writeTreeTo(repository).then((oid) => {\n                      const commitMessage = `Merged ${fromBranch.shorthand()} into ${toBranch.shorthand()}`\n                      return repository.createCommit(toBranch.name(), signature, signature, commitMessage, oid, [toCommitOid, fromCommitOid]).then((mergeCommit) => {\n                        if (!updateHead) return done(null, false, mergeCommit.toString())\n                        // Make sure head is updated so index isn't messed up\n                        return repository.getBranch(toName).then((toBranch) => {\n                          return repository.getBranchCommit(toBranch).then((branchCommit) => {\n                            return branchCommit.getTree().then((toBranchTree) => {\n                              return Checkout.tree(repository, toBranchTree, {\n                                checkoutStrategy: Checkout.STRATEGY.SAFE | Checkout.STRATEGY.RECREATE_MISSING\n                              }).then(() => {\n                                return done(null, false, mergeCommit.toString())\n                              }, done)\n                            }, done)\n                          }, done)\n                        }, done)\n                      }, done)\n                    }, done)\n                  }, done)\n                }, done)\n              }, done)\n            }, done)\n          }, done)\n        }, done)\n      }, done)\n    })\n  })\n}\n\nexport function createTag (pwd, tagNameProbablySemver, commitId, tagMessage, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.createTag(commitId.toString(), tagNameProbablySemver, tagMessage).then((tagOid) => {\n      return cb(null, tagOid)\n    }, cb)\n  })\n}\n\n// Git.pushTagToRemote(state.folder, state.projectName, state.semverVersion, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb)\nexport function pushTagToRemote (pwd, remoteName, tagName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          const refSpecs = [`refs/tags/${tagName}`]\n          const remoteOptions = buildRemoteOptions(gitRemoteUsername, gitRemotePassword)\n          logger.info('[git] pushing tags to remote', refSpecs, remoteOptions)\n          return remote.push(refSpecs, remoteOptions).then(() => {\n            return cb()\n          }, (err) => {\n            logger.info('[git] error pushing tags to remote', err.stack)\n            return cb(err)\n          })\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function listTags (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Tag.list(repository).then((tags) => {\n      return repository.getReferences(Reference.TYPE.OID).then((refs) => {\n        refs.forEach(function (ref) {\n          if (ref.isTag()) tags.push(ref.name())\n        })\n        return cb(null, tags)\n      }, cb)\n    }, cb)\n  })\n}\n\n/**\n * @function commitProject\n * @param folder {String}\n * @param username {String|Null}\n * @param useHeadAsParent {Beolean}\n * @param saveOptions {Object}\n * @param pathsToAdd {String|Array} - '.' to add all paths, [path, path] to add individual paths\n **/\nexport function commitProject (folder, username, useHeadAsParent, saveOptions = {}, pathsToAdd, cb) {\n  // Depending on the 'pathsToAdd' given, either add specific paths to the index, or commit them all\n  // Supported paths:\n  // '.'\n  // 'foo/bar'\n  // ['foo/bar', 'baz/qux', ...]\n  function pathAdder (done) {\n    if (pathsToAdd === '.') {\n      logger.info(`[git] adding all paths to index`)\n      return addAllPathsToIndex(folder, done)\n    } else if (typeof pathsToAdd === 'string') {\n      logger.info(`[git] adding path ${pathsToAdd} to index`)\n      return addPathsToIndex(folder, [pathsToAdd], done)\n    } else if (Array.isArray(pathsToAdd) && pathsToAdd.length > 0) {\n      logger.info(`[git] adding paths ${pathsToAdd.join(', ')} to index`)\n      return addPathsToIndex(folder, pathsToAdd, done)\n    } else {\n      logger.info(`[git] no path given`)\n      return done()\n    }\n  }\n\n  return pathAdder((err, oid) => {\n    if (err) return cb(err)\n\n    if (!oid) {\n      logger.info(`[git] blank oid so cannot commit`)\n      // return cb()\n    }\n\n    const user = username || DEFAULT_GIT_USERNAME\n    const email = username || DEFAULT_GIT_EMAIL\n    const message = (saveOptions && saveOptions.commitMessage) || DEFAULT_GIT_COMMIT_MESSAGE\n\n    const parentRef = (useHeadAsParent) ? 'HEAD' : null // Initial commit might not want us to specify a nonexistent ref\n    const updateRef = 'HEAD'\n\n    logger.info(`[git] committing ${JSON.stringify(message)} in ${folder} [${updateRef} onto ${parentRef}] ...`)\n\n    return buildCommit(folder, user, email, message, oid, updateRef, parentRef, (err, commitId) => {\n      if (err) return cb(err)\n\n      logger.info(`[git] commit done (${commitId.toString()})`)\n\n      return cb(null, commitId)\n    })\n  })\n}\n\nexport function fetchProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return upsertRemote(folder, projectName, projectGitRemoteUrl, (err, remote) => {\n    if (err) return cb(err)\n\n    logger.info(`[git] fetching ${projectName} from remote ${projectGitRemoteUrl}`)\n\n    return fetchFromRemote(folder, projectName, gitRemoteUsername, gitRemotePassword, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] fetch done')\n      return cb()\n    })\n  })\n}\n\nexport function pushProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return getCurrentBranchName(folder, (err, partialBranchName, fullBranchName) => {\n    if (err) return cb(err)\n\n    logger.sacred(`[git] pushing ${fullBranchName} to remote (${projectName}) ${projectGitRemoteUrl}`)\n\n    const doForcePush = true\n\n    return pushToRemote(folder, projectName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] push done')\n      return cb()\n    })\n  })\n}\n\nexport function combineHistories (folder, projectName, ourBranchName, theirBranchName, saveOptions = {}, cb) {\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  return mergeBranchesWithoutBase(folder, ourBranchName, theirBranchName, null, null, fileFavorName, (err, didHaveConflicts, shaOrIndex) => {\n    if (err) return cb(err)\n    return cb(null, didHaveConflicts, shaOrIndex)\n  })\n}\n\nexport function mergeProject (folder, projectName, partialBranchName, saveOptions = {}, cb) {\n  const remoteBranchRefName = `remotes/${projectName}/${partialBranchName}`\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  // #IDUNNO: For some reason when this is set to `true` (in turn resulting in mergeOptions.flags getting set to 1),\n  // merging with a merge strategy of OURS/THEIRS ends up with conflicts (which should never happen with OURS/THEIRS).\n  // Since I don't initially see any problem with just setting it to `false` for all cases, I'll hardcode it as such.\n  // It's possible this is a flaw in Nodegit?\n  // If you find a case where this needs to be `true`, please document why below this comment.\n  const doFindRenames = false\n\n  logger.info(`[git] merging '${remoteBranchRefName}' into '${partialBranchName}' via '${fileFavorName}' (${folder})`)\n\n  return mergeBranches(folder, partialBranchName, remoteBranchRefName, fileFavorName, doFindRenames, (err, didHaveConflicts, shaOrIndex) => {\n    if (!err) {\n      return cb(null, didHaveConflicts, shaOrIndex)\n    }\n\n    if (err.message && err.message.match(/No merge base found/i)) {\n      logger.info(`[git] histories lack common ancestor; trying to combine`)\n\n      // This should return the same payload as Git.mergeBranches returns\n      return combineHistories(folder, projectName, partialBranchName, remoteBranchRefName, saveOptions, cb)\n    }\n\n    return cb(err)\n  })\n}\n\nexport function logStatuses (statuses) {\n  for (let key in statuses) {\n    let status = statuses[key]\n    logger.info('[git] git status:' + status.path + ' ' + statusToText(status))\n  }\n}\n\nexport function statusToText (status) {\n  const words = []\n  if (status.num === Diff.DELTA.UNMODIFIED) words.push('UNMODIFIED')\n  if (status.num === Diff.DELTA.ADDED) words.push('ADDED')\n  if (status.num === Diff.DELTA.DELETED) words.push('DELETED')\n  if (status.num === Diff.DELTA.MODIFIED) words.push('MODIFIED')\n  if (status.num === Diff.DELTA.RENAMED) words.push('RENAMED')\n  if (status.num === Diff.DELTA.COPIED) words.push('COPIED')\n  if (status.num === Diff.DELTA.IGNORED) words.push('IGNORED')\n  if (status.num === Diff.DELTA.UNTRACKED) words.push('UNTRACKED')\n  if (status.num === Diff.DELTA.TYPECHANGE) words.push('TYPECHANGE')\n  if (status.num === Diff.DELTA.UNREADABLE) words.push('UNREADABLE')\n  if (status.num === Diff.DELTA.CONFLICTED) words.push('CONFLICTED')\n  return words.join(' ')\n}\n\nexport function saveStrategyToFileFavorName (saveStrategy) {\n  if (!saveStrategy) return 'normal'\n  if (!saveStrategy.strategy) return 'normal'\n  if (saveStrategy.strategy === 'recursive') return 'normal'\n  if (saveStrategy.strategy === 'ours') return 'ours'\n  if (saveStrategy.strategy === 'theirs') return 'theirs'\n  return 'normal'\n}\n"]}