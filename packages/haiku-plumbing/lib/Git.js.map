{"version":3,"sources":["../src/Git.js"],"names":["open","init","status","hardReset","removeUntrackedFiles","upsertRemote","maybeInit","getIndex","refreshIndex","writeIndex","addPathsToIndex","addAllPathsToIndex","referenceNameToId","createSignature","buildCommit","getCurrentBranchName","cloneRepo","pushToRemote","lookupRemote","listRemotes","doesRemoteExist","getCurrentCommit","hardResetFromSHA","fetchFromRemote","mergeBranches","cleanAllChanges","buildRemoteOptions","rebaseBranches","getCommitHistoryForFile","getMasterCommitHistory","mergeBranchesWithoutBase","createTag","pushTagToRemote","listTags","commitProject","fetchProject","pushProject","combineHistories","mergeProject","logStatuses","statusToText","saveStrategyToFileFavorName","DEFAULT_COMMITTER_EMAIL","DEFAULT_COMMITTER_NAME","FORCE_PUSH_REFSPEC_PREFIX","DEFAULT_GIT_USERNAME","DEFAULT_GIT_EMAIL","DEFAULT_GIT_COMMIT_MESSAGE","globalExceptionCatcher","exception","error","pwd","cb","then","repository","catch","isBare","err","getStatus","statuses","targetRef","id","getCommit","toString","commit","reset","TYPE","HARD","length","each","next","abspath","join","path","remove","name","url","list","remotes","found","findExistingRemote","create","remote","forEach","message","match","index","write","writeTree","oid","relpaths","Error","eachSeries","relpath","addByPath","addAll","info","nameToId","email","time","Date","now","tzoffset","username","updateRef","parentRef","author","committer","createCommit","commitId","parentId","getRepositoryHeadReference","head","reference","type","isBranch","full","partial","replace","gitRemoteUrl","gitRemoteUsername","gitRemotePassword","clone","fetchOpts","remoteName","fullBranchName","doForcePush","refSpecs","lookup","fixRemoteHttpsUrl","push","password","getHeadCommit","sha","downloadTags","fetch","branchNameOurs","branchNameTheirs","fileFavorName","doFindRenames","toUpperCase","mergeOptions","fileFavor","FILE_FAVOR","fileFlags","FILE_FLAG","FILE_DEFAULT","flags","FLAG","FIND_RENAMES","PREFERENCE","NONE","result","constructor","callbacks","certificateCheck","credentials","userpassPlaintextNew","folder","upstreamName","branchName","ontoStr","filePath","maxEntries","headCommit","walker","createRevWalk","sorting","SORT","TIME","fileHistoryWalk","historyCommits","getMasterCommit","firstCommit","history","on","commits","start","toName","fromName","signature","mergePreference","defaultSignature","getBranch","toBranch","fromBranch","getBranchCommit","toCommit","fromCommit","toCommitOid","fromCommitOid","headRef","resolve","updateHead","hasConflicts","writeTreeTo","commitMessage","shorthand","mergeCommit","branchCommit","getTree","toBranchTree","tree","checkoutStrategy","STRATEGY","SAFE","RECREATE_MISSING","tagNameProbablySemver","tagMessage","tagOid","tagName","tags","getReferences","OID","refs","ref","isTag","useHeadAsParent","saveOptions","pathsToAdd","pathAdder","done","Array","isArray","user","JSON","stringify","projectName","projectGitRemoteUrl","partialBranchName","ourBranchName","theirBranchName","saveStrategy","didHaveConflicts","shaOrIndex","remoteBranchRefName","words","isNew","isModified","isTypechange","isRenamed","isIgnored","strategy"],"mappings":"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","file":"Git.js","sourcesContent":["import { Repository, Reference, Signature, Reset, Remote, Clone, Cred, Commit, Merge, RevWalk, Checkout, Tag } from 'nodegit'\nimport path from 'path'\nimport fs from 'haiku-fs-extra'\nimport async from 'async'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\n\nconst DEFAULT_COMMITTER_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_COMMITTER_NAME = 'Haiku Plumbing'\nconst FORCE_PUSH_REFSPEC_PREFIX = '+'\nconst DEFAULT_GIT_USERNAME = 'Haiku-Plumbing'\nconst DEFAULT_GIT_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_GIT_COMMIT_MESSAGE = 'Edited project with Haiku Desktop'\n\nfunction globalExceptionCatcher (exception) {\n  logger.error(exception)\n  throw exception\n}\n\nexport function open (pwd, cb) {\n  return Repository.open(pwd).then((repository) => {\n    return cb(null, repository)\n  }, cb).catch(globalExceptionCatcher)\n}\n\nexport function init (pwd, cb) {\n  const isBare = 0 // false! We want to create the .git folder _in_ the folder\n  return Repository.init(pwd, isBare).then((repository) => {\n    return cb(null, repository)\n  }, cb)\n}\n\nexport function status (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getStatus().then((statuses) => {\n      return cb(null, statuses)\n    }, cb)\n  })\n}\n\nexport function hardReset (pwd, targetRef, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return referenceNameToId(pwd, targetRef, (err, id) => {\n      if (err) return cb(err)\n      return repository.getCommit(id.toString()).then((commit) => {\n        return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n          return cb(null, repository, commit)\n        }, cb)\n      }, cb)\n    })\n  })\n}\n\nexport function removeUntrackedFiles (pwd, cb) {\n  return status(pwd, (err, statuses) => {\n    if (err) return cb(err)\n    if (statuses.length < 1) return cb()\n    return async.each(statuses, (status, next) => {\n      const abspath = path.join(pwd, status.path())\n      return fs.remove(abspath, (err) => {\n        if (err) return next(err)\n        return next()\n      })\n    }, (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  })\n}\n\nexport function upsertRemote (pwd, name, url, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then(function (remotes) {\n      const found = findExistingRemote(remotes, name)\n      if (found) return cb(null, found)\n      return Remote.create(repository, name, url).then((remote) => {\n        return cb(null, remote)\n      }, cb)\n    }, cb)\n  })\n}\n\nfunction findExistingRemote (remotes, name) {\n  if (remotes.length < 1) return null\n  let found = null\n  remotes.forEach((remote) => {\n    if (typeof remote === 'string' && remote === name) found = remote\n    else if (remote.name && remote.name() === name) found = remote\n  })\n  return found\n}\n\nexport function maybeInit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err && err.message.match(/Could not find repository/)) return init(pwd, cb)\n    if (err) return cb(err)\n    return cb(null, repository, true) // <~ true == wasAlreadyInitialized\n  })\n}\n\nexport function getIndex (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.index().then((index) => {\n      return cb(null, index)\n    }, cb)\n  })\n}\n\nexport function refreshIndex (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.refreshIndex().then((index) => {\n      return cb(null, index)\n    }, cb)\n  })\n}\n\nexport function writeIndex (index, pwd, cb) {\n  return index.write().then(() => {\n    return index.writeTree().then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  }, cb)\n}\n\nexport function addPathsToIndex (pwd, relpaths = [], cb) {\n  if (relpaths.length < 1) return cb(new Error('Empty paths list given'))\n  return getIndex(pwd, (err, index) => {\n    if (err) return cb(err)\n    return async.eachSeries(relpaths, (relpath, next) => {\n      return index.addByPath(relpath).then(() => {\n        return next()\n      }, next)\n    }, (err) => {\n      if (err) return cb(err)\n      return writeIndex(index, pwd, cb)\n    })\n  })\n}\n\nexport function addAllPathsToIndex (pwd, cb) {\n  return getIndex(pwd, (err, index) => {\n    if (err) return cb(err)\n    return index.addAll('.').then(() => {\n      return writeIndex(index, pwd, cb)\n    }, cb)\n  })\n}\n\nexport function referenceNameToId (pwd, name, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    logger.info('[git] getting id for reference name', name)\n    return Reference.nameToId(repository, name).then((id) => {\n      logger.info('[git] reference name', name, 'resolved to', id && id.toString())\n      return cb(null, id)\n    }, (err) => {\n      logger.info('[git]', err)\n      return cb(err)\n    })\n  })\n}\n\nexport function createSignature (name, email) {\n  const time = ~~(Date.now() / 1000)\n  const tzoffset = 0 // minutes\n  return Signature.create(name, email, time, tzoffset)\n}\n\nexport function buildCommit (pwd, username, email, message, oid, updateRef, parentRef, cb) {\n  const author = createSignature(username || DEFAULT_COMMITTER_NAME, email || DEFAULT_COMMITTER_EMAIL)\n  const committer = createSignature(DEFAULT_COMMITTER_NAME, DEFAULT_COMMITTER_EMAIL)\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    // If no parent, assume first commit\n    if (!parentRef) {\n      return repository.createCommit(updateRef, author, committer, message, oid, []).then((commitId) => {\n        return cb(null, commitId)\n      }, cb)\n    } else {\n      // Otherwise grab the parent id and use it\n      return referenceNameToId(pwd, parentRef, (err, parentId) => {\n        if (err) return cb(err)\n        return repository.createCommit(updateRef, author, committer, message, oid, [parentId]).then((commitId) => {\n          return cb(null, commitId)\n        }, cb)\n      })\n    }\n  })\n}\n\nfunction getRepositoryHeadReference (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.head().then((reference) => {\n      return cb(null, reference, reference.type(), repository)\n    }, cb)\n  })\n}\n\nexport function getCurrentBranchName (pwd, cb) {\n  return getRepositoryHeadReference(pwd, (err, reference, type, repository) => {\n    if (err) return cb(err)\n    if (!reference.isBranch()) return cb(new Error('Head reference is not a branch'))\n    const full = reference.name()\n    const partial = full.replace('refs/heads/', '')\n    return cb(null, partial, full, reference, repository)\n  })\n}\n\nexport function cloneRepo (gitRemoteUrl, gitRemoteUsername, gitRemotePassword, abspath, cb) {\n  return Clone.clone(gitRemoteUrl, abspath, { fetchOpts: buildRemoteOptions(gitRemoteUsername, gitRemotePassword) }).then((repository) => {\n    return cb(null, repository, abspath)\n  }, cb)\n}\n\nexport function pushToRemote (pwd, remoteName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    const refSpecs = [`${(doForcePush) ? FORCE_PUSH_REFSPEC_PREFIX : ''}${fullBranchName}:${fullBranchName}`]\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          return remote.push(refSpecs, buildRemoteOptions(gitRemoteUsername, gitRemotePassword)).then(() => {\n            return cb()\n          }, cb)\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function lookupRemote (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      return cb(null, remote)\n    }, cb)\n  })\n}\n\nexport function listRemotes (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      return cb(null, remotes)\n    }, cb)\n  })\n}\n\nfunction fixRemoteHttpsUrl (repository, remote, username, password, cb) {\n  // HACK? It might be necessary in some cases to fix the remote URL to include HTTPS creds?\n  // const url = remote.url()\n  // const name = remote.name()\n  // const matches = url.match(/^(https?)/)\n  // const scheme = matches && matches[1]\n  // if (!scheme) return cb() // This is not https\n  // // TODO: Replace the creds in the URL with new creds?\n  // if (url.indexOf('@') !== -1) return cb() // Creds are already present\n  // const fixed = url.replace(`${scheme}://`, `${scheme}://${encodeURIComponent(username)}:${encodeURIComponent(password)}@`)\n  // const result = Remote.setUrl(repository, name, fixed)\n  // console.log(fixed, result)\n  return cb()\n}\n\nexport function doesRemoteExist (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      return cb(null, !!found)\n    }, cb)\n  })\n}\n\nexport function getCurrentCommit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((commit) => {\n      return cb(null, commit.sha(), commit, repository)\n    }, cb)\n  })\n}\n\nexport function hardResetFromSHA (pwd, sha, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Commit.lookup(repository, sha).then((commit) => {\n      return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function fetchFromRemote (pwd, remoteName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      let fetchOpts = buildRemoteOptions(gitRemoteUsername, gitRemotePassword)\n\n      // Need to set this otherwise the fetch won't also download tags.\n      // Without tags, we can't detect what the next tag to bump to is\n      fetchOpts.downloadTags = 3\n\n      logger.info('[git] fetching remote', remoteName, fetchOpts)\n      logger.info('[git] remote info:', remote.name(), remote.url())\n\n      return repository.fetch(remote, fetchOpts).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function mergeBranches (pwd, branchNameOurs, branchNameTheirs, fileFavorName, doFindRenames, cb) {\n  logger.info('[git] merging branches from', branchNameTheirs, 'to', branchNameOurs)\n\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n\n    fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n    logger.info('[git] merge file favor:', fileFavorName)\n    logger.info('[git] merge finding renames?:', doFindRenames)\n\n    // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n    let mergeOptions = {\n      fileFavor: Merge.FILE_FAVOR[fileFavorName],\n      fileFlags: Merge.FILE_FLAG.FILE_DEFAULT,\n      flags: (doFindRenames) ? Merge.FLAG.FIND_RENAMES : void (0)\n    }\n\n    logger.info('[git] merge using options:', mergeOptions)\n\n    return repository.mergeBranches(branchNameOurs, branchNameTheirs, null, Merge.PREFERENCE.NONE, mergeOptions).then((result) => {\n      // If result is an oid string, the commit was successful. (The oid is a commit id.)\n      if (result && typeof result === 'string') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If result is an oid object, the commit was successful. (The oid is a commit id.)\n      if (result && result.constructor && result.constructor.name === 'Oid') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If the result is an index, there were conflicts. (The index is the index of conflicts.)\n      if (result && result.constructor && result.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as index)', result)\n        return cb(null, true, result, result)\n      }\n\n      return cb(new Error('Branch merge got unexpected result'), result, result)\n    }, (err) => {\n      // Upon a merge conflict, nodegit might return the index _as_ an error object. :-(  (The index is the index of conflicts.)\n      if (err && err.constructor && err.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as error)', err)\n        return cb(null, true, err, err)\n      }\n\n      return cb(err)\n    })\n  })\n}\n\nexport function cleanAllChanges (pwd, cb) {\n  return hardReset(pwd, 'HEAD', (err, repository, commit) => {\n    if (err) return cb(err)\n    return removeUntrackedFiles(pwd, cb)\n  })\n}\n\nexport function buildRemoteOptions (gitRemoteUsername, gitRemotePassword) {\n  if (!gitRemoteUsername) throw new Error('Remote username required for credentials')\n  if (!gitRemotePassword) throw new Error('Remote password required for credentials')\n  return {\n    callbacks: {\n      certificateCheck: () => 1,\n      credentials: function (url) {\n        // return NodeGit.Cred.sshKeyFromAgent(username)\n        return Cred.userpassPlaintextNew(gitRemoteUsername, gitRemotePassword)\n      }\n    }\n  }\n}\n\nexport function rebaseBranches (folder, upstreamName, branchName, ontoStr, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.rebaseBranches(branchName, upstreamName, ontoStr, null).then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  })\n}\n\nexport function getCommitHistoryForFile (folder, filePath, maxEntries = 1000, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((headCommit) => {\n      const walker = repository.createRevWalk()\n      walker.push(headCommit.id())\n      walker.sorting(RevWalk.SORT.TIME)\n      return walker.fileHistoryWalk(filePath, maxEntries).then((historyCommits) => {\n        return cb(null, historyCommits)\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function getMasterCommitHistory (folder, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getMasterCommit().then((firstCommit) => {\n      const history = firstCommit.history(RevWalk.SORT.TIME)\n      history.on('end', (commits) => { return cb(null, commits) })\n      history.on('error', (error) => { return cb(error) })\n      history.start()\n      return history\n    }, cb)\n  })\n}\n\nexport function mergeBranchesWithoutBase (folder, toName, fromName, signature, mergePreference, fileFavorName, cb) {\n  logger.info('[git] merging branches (without base) from', fromName, 'to', toName)\n\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    if (!mergePreference) mergePreference = Merge.PREFERENCE.NONE\n    if (!signature) signature = signature || repository.defaultSignature()\n\n    fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n    logger.info('[git] merge (without base) file favor:', fileFavorName)\n\n    // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n    let mergeOptions = {\n      fileFavor: Merge.FILE_FAVOR[fileFavorName],\n      fileFlags: Merge.FILE_FLAG.FILE_DEFAULT\n    }\n\n    return repository.getBranch(toName).then((toBranch) => {\n      return repository.getBranch(fromName).then((fromBranch) => {\n        return repository.getBranchCommit(toBranch).then((toCommit) => {\n          return repository.getBranchCommit(fromBranch).then((fromCommit) => {\n            const toCommitOid = toCommit.toString()\n            const fromCommitOid = fromCommit.toString()\n            return Reference.lookup(repository, 'HEAD').then((headRef) => {\n              return headRef.resolve().then((headRef) => {\n                const updateHead = !!headRef && headRef.name() === toBranch.name()\n\n                logger.info('[git] merge using options:', mergeOptions)\n\n                return Merge.commits(repository, toCommitOid, fromCommitOid, mergeOptions).then((index) => {\n                  if (index.hasConflicts()) return cb(null, true, index)\n                  return index.writeTreeTo(repository).then((oid) => {\n                    const commitMessage = `Merged ${fromBranch.shorthand()} into ${toBranch.shorthand()}`\n                    return repository.createCommit(toBranch.name(), signature, signature, commitMessage, oid, [toCommitOid, fromCommitOid]).then((mergeCommit) => {\n                      if (!updateHead) return cb(null, false, mergeCommit.toString())\n                      // Make sure head is updated so index isn't messed up\n                      return repository.getBranch(toName).then((toBranch) => {\n                        return repository.getBranchCommit(toBranch).then((branchCommit) => {\n                          return branchCommit.getTree().then((toBranchTree) => {\n                            return Checkout.tree(repository, toBranchTree, {\n                              checkoutStrategy: Checkout.STRATEGY.SAFE | Checkout.STRATEGY.RECREATE_MISSING\n                            }).then(() => {\n                              return cb(null, false, mergeCommit.toString())\n                            }, cb)\n                          }, cb)\n                        }, cb)\n                      }, cb)\n                    }, cb)\n                  }, cb)\n                }, cb)\n              }, cb)\n            }, cb)\n          }, cb)\n        }, cb)\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function createTag (pwd, tagNameProbablySemver, commitId, tagMessage, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.createTag(commitId.toString(), tagNameProbablySemver, tagMessage).then((tagOid) => {\n      return cb(null, tagOid)\n    }, cb)\n  })\n}\n\n// Git.pushTagToRemote(state.folder, state.projectName, state.semverVersion, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb)\nexport function pushTagToRemote (pwd, remoteName, tagName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          const refSpecs = [`refs/tags/${tagName}`]\n          return remote.push(refSpecs, buildRemoteOptions(gitRemoteUsername, gitRemotePassword)).then(() => {\n            return cb()\n          }, cb)\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function listTags (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Tag.list(repository).then((tags) => {\n      return repository.getReferences(Reference.TYPE.OID).then((refs) => {\n        refs.forEach(function (ref) {\n          if (ref.isTag()) tags.push(ref.name())\n        })\n        return cb(null, tags)\n      }, cb)\n    }, cb)\n  })\n}\n\n/**\n * @function commitProject\n * @param folder {String}\n * @param username {String|Null}\n * @param useHeadAsParent {Beolean}\n * @param saveOptions {Object}\n * @param pathsToAdd {String|Array} - '.' to add all paths, [path, path] to add individual paths\n **/\nexport function commitProject (folder, username, useHeadAsParent, saveOptions = {}, pathsToAdd, cb) {\n  logger.info(`[git] adding paths to index in folder ${folder}`)\n\n  // Depending on the 'pathsToAdd' given, either add specific paths to the index, or commit them all\n  // Supported paths:\n  // '.'\n  // 'foo/bar'\n  // ['foo/bar', 'baz/qux', ...]\n  function pathAdder (done) {\n    if (pathsToAdd === '.') {\n      return addAllPathsToIndex(folder, done)\n    } else if (typeof pathsToAdd === 'string') {\n      return addPathsToIndex(folder, [pathsToAdd], done)\n    } else if (Array.isArray(pathsToAdd) && pathsToAdd.length > 0) {\n      return addPathsToIndex(folder, pathsToAdd, done)\n    } else {\n      return done()\n    }\n  }\n\n  return pathAdder((err, oid) => {\n    if (err) return cb(err)\n\n    const user = username || DEFAULT_GIT_USERNAME\n    const email = username || DEFAULT_GIT_EMAIL\n    const message = (saveOptions && saveOptions.commitMessage) || DEFAULT_GIT_COMMIT_MESSAGE\n\n    const parentRef = (useHeadAsParent) ? 'HEAD' : null // Initial commit might not want us to specify a nonexistent ref\n    const updateRef = 'HEAD'\n\n    logger.info(`[git] committing ${JSON.stringify(message)} in ${folder} [${updateRef} onto ${parentRef}] ...`)\n\n    return buildCommit(folder, user, email, message, oid, updateRef, parentRef, (err, commitId) => {\n      if (err) return cb(err)\n\n      logger.info(`[git] commit done (${commitId.toString()})`)\n\n      return cb(null, commitId)\n    })\n  })\n}\n\nexport function fetchProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return upsertRemote(folder, projectName, projectGitRemoteUrl, (err, remote) => {\n    if (err) return cb(err)\n\n    logger.info(`[git] fetching ${projectName} from remote ${projectGitRemoteUrl}`)\n\n    return fetchFromRemote(folder, projectName, gitRemoteUsername, gitRemotePassword, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] fetch done')\n      return cb()\n    })\n  })\n}\n\nexport function pushProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return getCurrentBranchName(folder, (err, partialBranchName, fullBranchName) => {\n    if (err) return cb(err)\n\n    logger.info(`[git] pushing ${fullBranchName} to remote (${projectName}) ${projectGitRemoteUrl}`)\n\n    const doForcePush = true\n\n    return pushToRemote(folder, projectName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] push done')\n      return cb()\n    })\n  })\n}\n\nexport function combineHistories (folder, projectName, ourBranchName, theirBranchName, saveOptions = {}, cb) {\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  return mergeBranchesWithoutBase(folder, ourBranchName, theirBranchName, null, null, fileFavorName, (err, didHaveConflicts, shaOrIndex) => {\n    if (err) return cb(err)\n    return cb(null, didHaveConflicts, shaOrIndex)\n  })\n}\n\nexport function mergeProject (folder, projectName, partialBranchName, saveOptions = {}, cb) {\n  const remoteBranchRefName = `remotes/${projectName}/${partialBranchName}`\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  // #IDUNNO: For some reason when this is set to `true` (in turn resulting in mergeOptions.flags getting set to 1),\n  // merging with a merge strategy of OURS/THEIRS ends up with conflicts (which should never happen with OURS/THEIRS).\n  // Since I don't initially see any problem with just setting it to `false` for all cases, I'll hardcode it as such.\n  // It's possible this is a flaw in Nodegit?\n  // If you find a case where this needs to be `true`, please document why below this comment.\n  const doFindRenames = false\n\n  logger.info(`[git] merging '${remoteBranchRefName}' into '${partialBranchName}' via '${fileFavorName}' (${folder})`)\n\n  return mergeBranches(folder, partialBranchName, remoteBranchRefName, fileFavorName, doFindRenames, (err, didHaveConflicts, shaOrIndex) => {\n    if (!err) {\n      return cb(null, didHaveConflicts, shaOrIndex)\n    }\n\n    if (err.message && err.message.match(/No merge base found/i)) {\n      logger.info(`[git] histories lack common ancestor; trying to combine`)\n\n      // This should return the same payload as Git.mergeBranches returns\n      return combineHistories(folder, projectName, partialBranchName, remoteBranchRefName, saveOptions, cb)\n    }\n\n    return cb(err)\n  })\n}\n\nexport function logStatuses (statuses) {\n  statuses.forEach((status) => {\n    logger.info('[git] git status:' + status.path() + ' ' + statusToText(status))\n  })\n}\n\nexport function statusToText (status) {\n  const words = []\n  if (status.isNew()) words.push('NEW')\n  if (status.isModified()) words.push('MODIFIED')\n  if (status.isTypechange()) words.push('TYPECHANGE')\n  if (status.isRenamed()) words.push('RENAMED')\n  if (status.isIgnored()) words.push('IGNORED')\n  return words.join(' ')\n}\n\nexport function saveStrategyToFileFavorName (saveStrategy) {\n  if (!saveStrategy) return 'normal'\n  if (!saveStrategy.strategy) return 'normal'\n  if (saveStrategy.strategy === 'recursive') return 'normal'\n  if (saveStrategy.strategy === 'ours') return 'ours'\n  if (saveStrategy.strategy === 'theirs') return 'theirs'\n  return 'normal'\n}\n"]}