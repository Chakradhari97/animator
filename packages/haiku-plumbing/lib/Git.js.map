{"version":3,"sources":["../src/Git.js"],"names":["open","forceOpen","init","status","hardReset","removeUntrackedFiles","upsertRemote","maybeInit","getIndex","refreshIndex","writeIndex","addPathsToIndex","addAllPathsToIndex","referenceNameToId","createSignature","buildCommit","getCurrentBranchName","cloneRepo","pushToRemote","lookupRemote","listRemotes","doesRemoteExist","getCurrentCommit","hardResetFromSHA","fetchFromRemote","mergeBranches","cleanAllChanges","buildRemoteOptions","rebaseBranches","getCommitHistoryForFile","getMasterCommitHistory","mergeBranchesWithoutBase","createTag","pushTagToRemote","listTags","commitProject","fetchProject","pushProject","combineHistories","mergeProject","logStatuses","statusToText","saveStrategyToFileFavorName","DEFAULT_COMMITTER_EMAIL","DEFAULT_COMMITTER_NAME","FORCE_PUSH_REFSPEC_PREFIX","DEFAULT_GIT_USERNAME","DEFAULT_GIT_EMAIL","DEFAULT_GIT_COMMIT_MESSAGE","globalExceptionCatcher","exception","error","REPOS","pwd","cb","err","repository","then","catch","isBare","opts","diffOptions","flags","OPTION","SHOW_UNTRACKED_CONTENT","RECURSE_UNTRACKED_DIRS","indexToWorkdir","diff","changes","i","numDeltas","delta","getDelta","oldPath","oldFile","path","newPath","newFile","statusPath","prev","num","targetRef","id","getCommit","toString","commit","reset","TYPE","HARD","statusesDict","Object","keys","length","each","statusItem","next","abspath","join","remove","name","url","list","remotes","found","findExistingRemote","create","remote","forEach","message","match","index","write","writeTree","oid","relpaths","Error","eachSeries","relpath","addByPath","addAll","info","nameToId","email","time","Date","now","tzoffset","username","updateRef","parentRef","author","committer","createCommit","commitId","parentId","getRepositoryHeadReference","head","reference","type","isBranch","full","partial","replace","gitRemoteUrl","gitRemoteUsername","gitRemotePassword","clone","fetchOpts","remoteName","fullBranchName","doForcePush","refSpecs","lookup","fixRemoteHttpsUrl","push","password","getHeadCommit","sha","downloadTags","fetch","branchNameOurs","branchNameTheirs","fileFavorName","doFindRenames","toUpperCase","mergeOptions","fileFavor","FILE_FAVOR","fileFlags","FILE_FLAG","FILE_DEFAULT","FLAG","FIND_RENAMES","PREFERENCE","NONE","result","constructor","callbacks","certificateCheck","credentials","userpassPlaintextNew","folder","upstreamName","branchName","ontoStr","filePath","maxEntries","headCommit","walker","createRevWalk","sorting","SORT","TIME","fileHistoryWalk","historyCommits","getMasterCommit","firstCommit","history","on","commits","start","toName","fromName","signature","mergePreference","defaultSignature","getBranch","toBranch","fromBranch","getBranchCommit","toCommit","fromCommit","toCommitOid","fromCommitOid","headRef","resolve","updateHead","hasConflicts","writeTreeTo","commitMessage","shorthand","mergeCommit","branchCommit","getTree","toBranchTree","tree","checkoutStrategy","STRATEGY","SAFE","RECREATE_MISSING","tagNameProbablySemver","tagMessage","tagOid","tagName","tags","getReferences","OID","refs","ref","isTag","useHeadAsParent","saveOptions","pathsToAdd","pathAdder","done","Array","isArray","user","JSON","stringify","projectName","projectGitRemoteUrl","partialBranchName","ourBranchName","theirBranchName","saveStrategy","didHaveConflicts","shaOrIndex","remoteBranchRefName","statuses","key","words","DELTA","UNMODIFIED","ADDED","DELETED","MODIFIED","RENAMED","COPIED","IGNORED","UNTRACKED","TYPECHANGE","UNREADABLE","CONFLICTED","strategy"],"mappings":"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","file":"Git.js","sourcesContent":["import { Repository, Reference, Signature, Reset, Remote, Clone, Cred, Commit, Merge, RevWalk, Checkout, Tag, Diff } from 'nodegit'\nimport path from 'path'\nimport fs from 'haiku-fs-extra'\nimport async from 'async'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\n\nconst DEFAULT_COMMITTER_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_COMMITTER_NAME = 'Haiku Plumbing'\nconst FORCE_PUSH_REFSPEC_PREFIX = '+'\nconst DEFAULT_GIT_USERNAME = 'Haiku-Plumbing'\nconst DEFAULT_GIT_EMAIL = 'contact@haiku.ai'\nconst DEFAULT_GIT_COMMIT_MESSAGE = 'Edited project with Haiku Desktop'\n\nfunction globalExceptionCatcher (exception) {\n  logger.error(exception)\n  throw exception\n}\n\n// Multiton for caching already-opened repos\nconst REPOS = {}\n\nexport function open (pwd, cb) {\n  if (REPOS[pwd]) {\n    return cb(null, REPOS[pwd])\n  }\n  return forceOpen(pwd, (err, repository) => {\n    if (err) return cb(err)\n    if (repository) {\n      REPOS[pwd] = repository\n    }\n    return cb(null, REPOS[pwd])\n  })\n}\n\nexport function forceOpen (pwd, cb) {\n  return Repository.open(pwd).then((repository) => {\n    return cb(null, repository)\n  }, cb).catch(globalExceptionCatcher)\n}\n\nexport function init (pwd, cb) {\n  const isBare = 0 // false! We want to create the .git folder _in_ the folder\n  return Repository.init(pwd, isBare).then((repository) => {\n    return cb(null, repository)\n  }, cb)\n}\n\nexport function status (pwd, opts, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    // return repository.refreshIndex().then((index) => {}, cb) // Might need this?\n    const diffOptions = {\n      flags: Diff.OPTION.SHOW_UNTRACKED_CONTENT | Diff.OPTION.RECURSE_UNTRACKED_DIRS\n    }\n    return Diff.indexToWorkdir(repository, null, diffOptions).then((diff) => {\n      const changes = {}\n      for (let i = 0; i < diff.numDeltas(); i++) {\n        const delta = diff.getDelta(i)\n        const oldPath = delta.oldFile().path()\n        const newPath = delta.newFile().path()\n        const statusPath = oldPath || newPath\n        changes[statusPath] = {\n          delta: i,\n          prev: oldPath,\n          path: statusPath,\n          num: delta.status()\n        }\n      }\n      return cb(null, changes)\n    }, cb)\n  })\n}\n\n// The repository.getStatus call would hang when called too many times in parallel,\n// regardless of attempting to cache the repository object, so we swapped this for\n// the algorithm above.\n// export function status (pwd, opts, cb) {\n//   return open(pwd, (err, repository) => {\n//     if (err) return cb(err)\n//     return repository.getStatus().then((statuses) => {\n//       return cb(null, statuses)\n//     })\n//   })\n// }\n\nexport function hardReset (pwd, targetRef, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return referenceNameToId(pwd, targetRef, (err, id) => {\n      if (err) return cb(err)\n      return repository.getCommit(id.toString()).then((commit) => {\n        return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n          return cb(null, repository, commit)\n        }, cb)\n      }, cb)\n    })\n  })\n}\n\nexport function removeUntrackedFiles (pwd, cb) {\n  return status(pwd, (err, statusesDict) => {\n    if (err) return cb(err)\n    if (Object.keys(statusesDict).length < 1) return cb()\n    return async.each(statusesDict, (statusItem, next) => {\n      const abspath = path.join(pwd, statusItem.path)\n      return fs.remove(abspath, (err) => {\n        if (err) return next(err)\n        return next()\n      })\n    }, (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  })\n}\n\nexport function upsertRemote (pwd, name, url, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then(function (remotes) {\n      const found = findExistingRemote(remotes, name)\n      if (found) return cb(null, found)\n      return Remote.create(repository, name, url).then((remote) => {\n        return cb(null, remote)\n      }, cb)\n    }, cb)\n  })\n}\n\nfunction findExistingRemote (remotes, name) {\n  if (remotes.length < 1) return null\n  let found = null\n  remotes.forEach((remote) => {\n    if (typeof remote === 'string' && remote === name) found = remote\n    else if (remote.name && remote.name() === name) found = remote\n  })\n  return found\n}\n\nexport function maybeInit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err && err.message.match(/Could not find repository/)) return init(pwd, cb)\n    if (err) return cb(err)\n    return cb(null, repository, true) // <~ true == wasAlreadyInitialized\n  })\n}\n\nexport function getIndex (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.index().then((index) => {\n      return cb(null, index)\n    }, cb)\n  })\n}\n\nexport function refreshIndex (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.refreshIndex().then((index) => {\n      return cb(null, index)\n    }, cb)\n  })\n}\n\nexport function writeIndex (index, pwd, cb) {\n  return index.write().then(() => {\n    return index.writeTree().then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  }, cb)\n}\n\nexport function addPathsToIndex (pwd, relpaths = [], cb) {\n  if (relpaths.length < 1) return cb(new Error('Empty paths list given'))\n  return getIndex(pwd, (err, index) => {\n    if (err) return cb(err)\n    return async.eachSeries(relpaths, (relpath, next) => {\n      return index.addByPath(relpath).then(() => {\n        return next()\n      }, next)\n    }, (err) => {\n      if (err) return cb(err)\n      return writeIndex(index, pwd, cb)\n    })\n  })\n}\n\nexport function addAllPathsToIndex (pwd, cb) {\n  return getIndex(pwd, (err, index) => {\n    if (err) return cb(err)\n    return index.addAll('.').then(() => {\n      return writeIndex(index, pwd, cb)\n    }, cb)\n  })\n}\n\nexport function referenceNameToId (pwd, name, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    logger.info('[git] getting id for reference name', name)\n    return Reference.nameToId(repository, name).then((id) => {\n      logger.info('[git] reference name', name, 'resolved to', id && id.toString())\n      return cb(null, id)\n    }, (err) => {\n      logger.info('[git]', err)\n      return cb(err)\n    })\n  })\n}\n\nexport function createSignature (name, email) {\n  const time = ~~(Date.now() / 1000)\n  const tzoffset = 0 // minutes\n  return Signature.create(name, email, time, tzoffset)\n}\n\nexport function buildCommit (pwd, username, email, message, oid, updateRef, parentRef, cb) {\n  const author = createSignature(username || DEFAULT_COMMITTER_NAME, email || DEFAULT_COMMITTER_EMAIL)\n  const committer = createSignature(DEFAULT_COMMITTER_NAME, DEFAULT_COMMITTER_EMAIL)\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    // If no parent, assume first commit\n    if (!parentRef) {\n      return repository.createCommit(updateRef, author, committer, message, oid, []).then((commitId) => {\n        return cb(null, commitId)\n      }, cb)\n    } else {\n      // Otherwise grab the parent id and use it\n      return referenceNameToId(pwd, parentRef, (err, parentId) => {\n        if (err) return cb(err)\n        return repository.createCommit(updateRef, author, committer, message, oid, [parentId]).then((commitId) => {\n          return cb(null, commitId)\n        }, cb)\n      })\n    }\n  })\n}\n\nfunction getRepositoryHeadReference (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.head().then((reference) => {\n      return cb(null, reference, reference.type(), repository)\n    }, cb)\n  })\n}\n\nexport function getCurrentBranchName (pwd, cb) {\n  return getRepositoryHeadReference(pwd, (err, reference, type, repository) => {\n    if (err) return cb(err)\n    if (!reference.isBranch()) return cb(new Error('Head reference is not a branch'))\n    const full = reference.name()\n    const partial = full.replace('refs/heads/', '')\n    return cb(null, partial, full, reference, repository)\n  })\n}\n\nexport function cloneRepo (gitRemoteUrl, gitRemoteUsername, gitRemotePassword, abspath, cb) {\n  return Clone.clone(gitRemoteUrl, abspath, { fetchOpts: buildRemoteOptions(gitRemoteUsername, gitRemotePassword) }).then((repository) => {\n    return cb(null, repository, abspath)\n  }, cb)\n}\n\nexport function pushToRemote (pwd, remoteName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    const refSpecs = [`${(doForcePush) ? FORCE_PUSH_REFSPEC_PREFIX : ''}${fullBranchName}:${fullBranchName}`]\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          return remote.push(refSpecs, buildRemoteOptions(gitRemoteUsername, gitRemotePassword)).then(() => {\n            return cb()\n          }, cb)\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function lookupRemote (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      return cb(null, remote)\n    }, cb)\n  })\n}\n\nexport function listRemotes (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      return cb(null, remotes)\n    }, cb)\n  })\n}\n\nfunction fixRemoteHttpsUrl (repository, remote, username, password, cb) {\n  // HACK? It might be necessary in some cases to fix the remote URL to include HTTPS creds?\n  // const url = remote.url()\n  // const name = remote.name()\n  // const matches = url.match(/^(https?)/)\n  // const scheme = matches && matches[1]\n  // if (!scheme) return cb() // This is not https\n  // // TODO: Replace the creds in the URL with new creds?\n  // if (url.indexOf('@') !== -1) return cb() // Creds are already present\n  // const fixed = url.replace(`${scheme}://`, `${scheme}://${encodeURIComponent(username)}:${encodeURIComponent(password)}@`)\n  // const result = Remote.setUrl(repository, name, fixed)\n  // console.log(fixed, result)\n  return cb()\n}\n\nexport function doesRemoteExist (pwd, remoteName, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      return cb(null, !!found)\n    }, cb)\n  })\n}\n\nexport function getCurrentCommit (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((commit) => {\n      return cb(null, commit.sha(), commit, repository)\n    }, cb)\n  })\n}\n\nexport function hardResetFromSHA (pwd, sha, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Commit.lookup(repository, sha).then((commit) => {\n      return Reset.reset(repository, commit, Reset.TYPE.HARD).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function fetchFromRemote (pwd, remoteName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.lookup(repository, remoteName).then((remote) => {\n      let fetchOpts = buildRemoteOptions(gitRemoteUsername, gitRemotePassword)\n\n      // Need to set this otherwise the fetch won't also download tags.\n      // Without tags, we can't detect what the next tag to bump to is\n      fetchOpts.downloadTags = 3\n\n      logger.info('[git] fetching remote', remoteName, fetchOpts)\n      logger.info('[git] remote info:', remote.name(), remote.url())\n\n      return repository.fetch(remote, fetchOpts).then(() => {\n        return cb()\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function mergeBranches (pwd, branchNameOurs, branchNameTheirs, fileFavorName, doFindRenames, cb) {\n  logger.info('[git] merging branches from', branchNameTheirs, 'to', branchNameOurs)\n\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n\n    fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n    logger.info('[git] merge file favor:', fileFavorName)\n    logger.info('[git] merge finding renames?:', doFindRenames)\n\n    // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n    let mergeOptions = {\n      fileFavor: Merge.FILE_FAVOR[fileFavorName],\n      fileFlags: Merge.FILE_FLAG.FILE_DEFAULT,\n      flags: (doFindRenames) ? Merge.FLAG.FIND_RENAMES : void (0)\n    }\n\n    logger.info('[git] merge using options:', mergeOptions)\n\n    return repository.mergeBranches(branchNameOurs, branchNameTheirs, null, Merge.PREFERENCE.NONE, mergeOptions).then((result) => {\n      // If result is an oid string, the commit was successful. (The oid is a commit id.)\n      if (result && typeof result === 'string') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If result is an oid object, the commit was successful. (The oid is a commit id.)\n      if (result && result.constructor && result.constructor.name === 'Oid') {\n        return cb(null, false, result.toString(), result)\n      }\n\n      // If the result is an index, there were conflicts. (The index is the index of conflicts.)\n      if (result && result.constructor && result.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as index)', result)\n        return cb(null, true, result, result)\n      }\n\n      return cb(new Error('Branch merge got unexpected result'), result, result)\n    }, (err) => {\n      // Upon a merge conflict, nodegit might return the index _as_ an error object. :-(  (The index is the index of conflicts.)\n      if (err && err.constructor && err.constructor.name === 'Index') {\n        logger.info('[git] merge conflict index (as error)', err)\n        return cb(null, true, err, err)\n      }\n\n      return cb(err)\n    })\n  })\n}\n\nexport function cleanAllChanges (pwd, cb) {\n  return hardReset(pwd, 'HEAD', (err, repository, commit) => {\n    if (err) return cb(err)\n    return removeUntrackedFiles(pwd, cb)\n  })\n}\n\nexport function buildRemoteOptions (gitRemoteUsername, gitRemotePassword) {\n  if (!gitRemoteUsername) throw new Error('Remote username required for credentials')\n  if (!gitRemotePassword) throw new Error('Remote password required for credentials')\n  return {\n    callbacks: {\n      certificateCheck: () => 1,\n      credentials: function (url) {\n        // return NodeGit.Cred.sshKeyFromAgent(username)\n        return Cred.userpassPlaintextNew(gitRemoteUsername, gitRemotePassword)\n      }\n    }\n  }\n}\n\nexport function rebaseBranches (folder, upstreamName, branchName, ontoStr, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.rebaseBranches(branchName, upstreamName, ontoStr, null).then((oid) => {\n      return cb(null, oid)\n    }, cb)\n  })\n}\n\nexport function getCommitHistoryForFile (folder, filePath, maxEntries = 1000, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getHeadCommit().then((headCommit) => {\n      const walker = repository.createRevWalk()\n      walker.push(headCommit.id())\n      walker.sorting(RevWalk.SORT.TIME)\n      return walker.fileHistoryWalk(filePath, maxEntries).then((historyCommits) => {\n        return cb(null, historyCommits)\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function getMasterCommitHistory (folder, cb) {\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    return repository.getMasterCommit().then((firstCommit) => {\n      const history = firstCommit.history(RevWalk.SORT.TIME)\n      history.on('end', (commits) => { return cb(null, commits) })\n      history.on('error', (error) => { return cb(error) })\n      history.start()\n      return history\n    }, cb)\n  })\n}\n\nexport function mergeBranchesWithoutBase (folder, toName, fromName, signature, mergePreference, fileFavorName, cb) {\n  logger.info('[git] merging branches (without base) from', fromName, 'to', toName)\n\n  return open(folder, (err, repository) => {\n    if (err) return cb(err)\n    if (!mergePreference) mergePreference = Merge.PREFERENCE.NONE\n    if (!signature) signature = signature || repository.defaultSignature()\n\n    fileFavorName = (fileFavorName && fileFavorName.toUpperCase()) || 'NORMAL'\n    logger.info('[git] merge (without base) file favor:', fileFavorName)\n\n    // See libgit2 for info: https://github.com/libgit2/libgit2/blob/master/include/git2/merge.h\n    let mergeOptions = {\n      fileFavor: Merge.FILE_FAVOR[fileFavorName],\n      fileFlags: Merge.FILE_FLAG.FILE_DEFAULT\n    }\n\n    return repository.getBranch(toName).then((toBranch) => {\n      return repository.getBranch(fromName).then((fromBranch) => {\n        return repository.getBranchCommit(toBranch).then((toCommit) => {\n          return repository.getBranchCommit(fromBranch).then((fromCommit) => {\n            const toCommitOid = toCommit.toString()\n            const fromCommitOid = fromCommit.toString()\n            return Reference.lookup(repository, 'HEAD').then((headRef) => {\n              return headRef.resolve().then((headRef) => {\n                const updateHead = !!headRef && headRef.name() === toBranch.name()\n\n                logger.info('[git] merge using options:', mergeOptions)\n\n                return Merge.commits(repository, toCommitOid, fromCommitOid, mergeOptions).then((index) => {\n                  if (index.hasConflicts()) return cb(null, true, index)\n                  return index.writeTreeTo(repository).then((oid) => {\n                    const commitMessage = `Merged ${fromBranch.shorthand()} into ${toBranch.shorthand()}`\n                    return repository.createCommit(toBranch.name(), signature, signature, commitMessage, oid, [toCommitOid, fromCommitOid]).then((mergeCommit) => {\n                      if (!updateHead) return cb(null, false, mergeCommit.toString())\n                      // Make sure head is updated so index isn't messed up\n                      return repository.getBranch(toName).then((toBranch) => {\n                        return repository.getBranchCommit(toBranch).then((branchCommit) => {\n                          return branchCommit.getTree().then((toBranchTree) => {\n                            return Checkout.tree(repository, toBranchTree, {\n                              checkoutStrategy: Checkout.STRATEGY.SAFE | Checkout.STRATEGY.RECREATE_MISSING\n                            }).then(() => {\n                              return cb(null, false, mergeCommit.toString())\n                            }, cb)\n                          }, cb)\n                        }, cb)\n                      }, cb)\n                    }, cb)\n                  }, cb)\n                }, cb)\n              }, cb)\n            }, cb)\n          }, cb)\n        }, cb)\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function createTag (pwd, tagNameProbablySemver, commitId, tagMessage, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return repository.createTag(commitId.toString(), tagNameProbablySemver, tagMessage).then((tagOid) => {\n      return cb(null, tagOid)\n    }, cb)\n  })\n}\n\n// Git.pushTagToRemote(state.folder, state.projectName, state.semverVersion, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb)\nexport function pushTagToRemote (pwd, remoteName, tagName, gitRemoteUsername, gitRemotePassword, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Remote.list(repository).then((remotes) => {\n      const found = findExistingRemote(remotes, remoteName)\n      if (!found) return cb(new Error(`Remote with name '${remoteName}' not found`))\n      return Remote.lookup(repository, remoteName).then((remote) => {\n        return fixRemoteHttpsUrl(repository, remote, gitRemoteUsername, gitRemotePassword, (err) => {\n          if (err) return cb(err)\n          const refSpecs = [`refs/tags/${tagName}`]\n          return remote.push(refSpecs, buildRemoteOptions(gitRemoteUsername, gitRemotePassword)).then(() => {\n            return cb()\n          }, cb)\n        })\n      }, cb)\n    }, cb)\n  })\n}\n\nexport function listTags (pwd, cb) {\n  return open(pwd, (err, repository) => {\n    if (err) return cb(err)\n    return Tag.list(repository).then((tags) => {\n      return repository.getReferences(Reference.TYPE.OID).then((refs) => {\n        refs.forEach(function (ref) {\n          if (ref.isTag()) tags.push(ref.name())\n        })\n        return cb(null, tags)\n      }, cb)\n    }, cb)\n  })\n}\n\n/**\n * @function commitProject\n * @param folder {String}\n * @param username {String|Null}\n * @param useHeadAsParent {Beolean}\n * @param saveOptions {Object}\n * @param pathsToAdd {String|Array} - '.' to add all paths, [path, path] to add individual paths\n **/\nexport function commitProject (folder, username, useHeadAsParent, saveOptions = {}, pathsToAdd, cb) {\n  // Depending on the 'pathsToAdd' given, either add specific paths to the index, or commit them all\n  // Supported paths:\n  // '.'\n  // 'foo/bar'\n  // ['foo/bar', 'baz/qux', ...]\n  function pathAdder (done) {\n    if (pathsToAdd === '.') {\n      logger.info(`[git] adding all paths to index`)\n      return addAllPathsToIndex(folder, done)\n    } else if (typeof pathsToAdd === 'string') {\n      logger.info(`[git] adding path ${pathsToAdd} to index`)\n      return addPathsToIndex(folder, [pathsToAdd], done)\n    } else if (Array.isArray(pathsToAdd) && pathsToAdd.length > 0) {\n      logger.info(`[git] adding paths ${pathsToAdd.join(', ')} to index`)\n      return addPathsToIndex(folder, pathsToAdd, done)\n    } else {\n      logger.info(`[git] no path given`)\n      return done()\n    }\n  }\n\n  return pathAdder((err, oid) => {\n    if (err) return cb(err)\n\n    if (!oid) {\n      logger.info(`[git] blank oid so cannot commit`)\n      // return cb()\n    }\n\n    const user = username || DEFAULT_GIT_USERNAME\n    const email = username || DEFAULT_GIT_EMAIL\n    const message = (saveOptions && saveOptions.commitMessage) || DEFAULT_GIT_COMMIT_MESSAGE\n\n    const parentRef = (useHeadAsParent) ? 'HEAD' : null // Initial commit might not want us to specify a nonexistent ref\n    const updateRef = 'HEAD'\n\n    logger.info(`[git] committing ${JSON.stringify(message)} in ${folder} [${updateRef} onto ${parentRef}] ...`)\n\n    return buildCommit(folder, user, email, message, oid, updateRef, parentRef, (err, commitId) => {\n      if (err) return cb(err)\n\n      logger.info(`[git] commit done (${commitId.toString()})`)\n\n      return cb(null, commitId)\n    })\n  })\n}\n\nexport function fetchProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return upsertRemote(folder, projectName, projectGitRemoteUrl, (err, remote) => {\n    if (err) return cb(err)\n\n    logger.info(`[git] fetching ${projectName} from remote ${projectGitRemoteUrl}`)\n\n    return fetchFromRemote(folder, projectName, gitRemoteUsername, gitRemotePassword, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] fetch done')\n      return cb()\n    })\n  })\n}\n\nexport function pushProject (folder, projectName, projectGitRemoteUrl, gitRemoteUsername, gitRemotePassword, cb) {\n  return getCurrentBranchName(folder, (err, partialBranchName, fullBranchName) => {\n    if (err) return cb(err)\n\n    logger.info(`[git] pushing ${fullBranchName} to remote (${projectName}) ${projectGitRemoteUrl}`)\n\n    const doForcePush = true\n\n    return pushToRemote(folder, projectName, fullBranchName, gitRemoteUsername, gitRemotePassword, doForcePush, (err) => {\n      if (err) return cb(err)\n      logger.info('[git] push done')\n      return cb()\n    })\n  })\n}\n\nexport function combineHistories (folder, projectName, ourBranchName, theirBranchName, saveOptions = {}, cb) {\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  return mergeBranchesWithoutBase(folder, ourBranchName, theirBranchName, null, null, fileFavorName, (err, didHaveConflicts, shaOrIndex) => {\n    if (err) return cb(err)\n    return cb(null, didHaveConflicts, shaOrIndex)\n  })\n}\n\nexport function mergeProject (folder, projectName, partialBranchName, saveOptions = {}, cb) {\n  const remoteBranchRefName = `remotes/${projectName}/${partialBranchName}`\n  const fileFavorName = saveStrategyToFileFavorName(saveOptions && saveOptions.saveStrategy)\n\n  // #IDUNNO: For some reason when this is set to `true` (in turn resulting in mergeOptions.flags getting set to 1),\n  // merging with a merge strategy of OURS/THEIRS ends up with conflicts (which should never happen with OURS/THEIRS).\n  // Since I don't initially see any problem with just setting it to `false` for all cases, I'll hardcode it as such.\n  // It's possible this is a flaw in Nodegit?\n  // If you find a case where this needs to be `true`, please document why below this comment.\n  const doFindRenames = false\n\n  logger.info(`[git] merging '${remoteBranchRefName}' into '${partialBranchName}' via '${fileFavorName}' (${folder})`)\n\n  return mergeBranches(folder, partialBranchName, remoteBranchRefName, fileFavorName, doFindRenames, (err, didHaveConflicts, shaOrIndex) => {\n    if (!err) {\n      return cb(null, didHaveConflicts, shaOrIndex)\n    }\n\n    if (err.message && err.message.match(/No merge base found/i)) {\n      logger.info(`[git] histories lack common ancestor; trying to combine`)\n\n      // This should return the same payload as Git.mergeBranches returns\n      return combineHistories(folder, projectName, partialBranchName, remoteBranchRefName, saveOptions, cb)\n    }\n\n    return cb(err)\n  })\n}\n\nexport function logStatuses (statuses) {\n  for (let key in statuses) {\n    let status = statuses[key]\n    logger.info('[git] git status:' + status.path + ' ' + statusToText(status))\n  }\n}\n\nexport function statusToText (status) {\n  const words = []\n  if (status.num === Diff.DELTA.UNMODIFIED) words.push('UNMODIFIED')\n  if (status.num === Diff.DELTA.ADDED) words.push('ADDED')\n  if (status.num === Diff.DELTA.DELETED) words.push('DELETED')\n  if (status.num === Diff.DELTA.MODIFIED) words.push('MODIFIED')\n  if (status.num === Diff.DELTA.RENAMED) words.push('RENAMED')\n  if (status.num === Diff.DELTA.COPIED) words.push('COPIED')\n  if (status.num === Diff.DELTA.IGNORED) words.push('IGNORED')\n  if (status.num === Diff.DELTA.UNTRACKED) words.push('UNTRACKED')\n  if (status.num === Diff.DELTA.TYPECHANGE) words.push('TYPECHANGE')\n  if (status.num === Diff.DELTA.UNREADABLE) words.push('UNREADABLE')\n  if (status.num === Diff.DELTA.CONFLICTED) words.push('CONFLICTED')\n  return words.join(' ')\n}\n\nexport function saveStrategyToFileFavorName (saveStrategy) {\n  if (!saveStrategy) return 'normal'\n  if (!saveStrategy.strategy) return 'normal'\n  if (saveStrategy.strategy === 'recursive') return 'normal'\n  if (saveStrategy.strategy === 'ours') return 'ours'\n  if (saveStrategy.strategy === 'theirs') return 'theirs'\n  return 'normal'\n}\n"]}