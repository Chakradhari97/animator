{"version":3,"sources":["../src/MasterGitProject.js"],"names":["Git","ProjectFolder","Inkstone","PLUMBING_PKG_PATH","join","__dirname","PLUMBING_PKG_JSON_PATH","MAX_SEMVER_TAG_ATTEMPTS","AWAIT_COMMIT_INTERVAL","MIN_WORKER_INTERVAL","MAX_WORKER_INTERVAL","MAX_CLONE_ATTEMPTS","CLONE_RETRY_DELAY","CLONE_INIT_DELAY","DEFAULT_BRANCH_NAME","BASELINE_SEMVER_TAG","COMMIT_SUFFIX","_checkIsOnline","cb","then","answer","_isCommitTypeRequest","type","MasterGitProject","folder","Error","_isCommitting","_gitUndoables","_gitRedoables","_requestQueue","_requestWorkerStopped","_workerInterval","_requestsWorker","bind","_shareInfoPayloads","_folderState","_projectInfo","requestInfo","shift","options","finish","err","out","setTimeout","undoActual","redoActual","commitActual","projectInfo","splice","projectName","haikuUsername","haikuPassword","branchName","undoablesToReturn","didFindBaseUndoable","forEach","undoable","isBase","push","redoablesToReturn","redoable","seq","projectOptions","length","eachSeries","method","next","fetchFolderState","info","who","previousState","clone","organizationName","series","safeHasAnyHeadCommitForCurrentBranch","hasHeadCommit","referenceNameToId","_err","headCommitId","safeFetchProjectGitRemoteInfo","remoteProjectDescriptor","isCodeCommitReady","safeListLocallyDeclaredRemotes","gitRemotesList","isOnline","safeGitStatus","log","gitStatuses","doesGitHaveChanges","Object","keys","isGitInitialized","existsSync","folderEntries","readdirSync","gitUndoables","gitRedoables","packageJsonExists","packageJsonObj","readJsonSync","throws","semverVersion","version","playerVersion","dependencies","listRemotes","remotes","authToken","config","getAuthToken","project","getByName","projectAndCredentials","httpResp","statusCode","Project","GitRemoteUrl","CodeCommitHttpsUsername","Credentials","CodeCommitHttpsPassword","refPath","exists","filter","getPendingCommitRequests","hasAnyPendingCommits","waitUntilNoFurtherChangesAreAwaitingCommit","listTags","tags","cleanTags","map","dirtyTag","split","pop","replace","maxTag","cleanTag","gt","pkgTag","nextTag","inc","semverBumpPackageJson","emit","commitId","semverTagAttempts","createTag","message","match","bumpSemverAppropriately","incTag","makeTag","ensureAllRemotes","cloudSaveDisabled","saveOptions","dontPush","wasResetPerformed","pushProject","pushTag","maybeInit","dir","unsafeCleanup","tmpDir","tmpDirCleanupFn","copy","emptyDir","cloneAttempts","cloneRepo","cloneRemoteIntoFolder","ensureLocalRemote","ensureRemoteRefs","upsertRemote","open","repository","outputFile","addAllPathsToIndex","oid","buildCommit","refSpecToPush","createBranch","toString","lookupRemote","mainRemote","remoteRefspecs","remoteCreds","buildRemoteOptions","branchErr","fetchProject","getCurrentBranchName","partialBranchName","mergeProject","didHaveConflicts","shaOrIndex","mergeCommitId","cleanAllChanges","hardResetFromSHA","getCurrentShareInfo","shareInfo","error","code","obj","timeout","pushTagToRemote","undoOptions","redoOptions","done","validUndoables","getGitUndoablesUptoBase","undone","target","status","statuses","logStatuses","relpath","foundStatus","key","gitStatus","normalize","path","statusForFile","num","commit","addable","commitOptions","finalOptions","commitMessage","commitProject","baseUndoable","initOptions","actionSequence","name","runActionSequence","results","saveAccumulator","conflicts"],"mappings":"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","file":"MasterGitProject.js","sourcesContent":["import async from 'async'\nimport fse from 'haiku-fs-extra'\nimport path from 'path'\nimport { EventEmitter } from 'events'\nimport semver from 'semver'\nimport tmp from 'tmp'\nimport lodash from 'lodash'\nimport checkIsOnline from 'is-online'\nimport { client as sdkClient } from 'haiku-sdk-client'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport * as Git from './Git'\nimport * as ProjectFolder from './ProjectFolder'\nimport * as Inkstone from './Inkstone'\n\nconst PLUMBING_PKG_PATH = path.join(__dirname, '..')\nconst PLUMBING_PKG_JSON_PATH = path.join(PLUMBING_PKG_PATH, 'package.json')\nconst MAX_SEMVER_TAG_ATTEMPTS = 100\nconst AWAIT_COMMIT_INTERVAL = 0\nconst MIN_WORKER_INTERVAL = 32\nconst MAX_WORKER_INTERVAL = 32 * 20\nconst MAX_CLONE_ATTEMPTS = 5\nconst CLONE_RETRY_DELAY = 5000\nconst CLONE_INIT_DELAY = 5000\nconst DEFAULT_BRANCH_NAME = 'master' // \"'master' process\" has nothing to do with this :/\nconst BASELINE_SEMVER_TAG = '0.0.0'\nconst COMMIT_SUFFIX = '(via Haiku Desktop)'\n\nfunction _checkIsOnline (cb) {\n  return checkIsOnline().then((answer) => {\n    return cb(answer)\n  })\n}\n\nfunction _isCommitTypeRequest ({ type }) {\n  return type === 'commit'\n}\n\nexport default class MasterGitProject extends EventEmitter {\n  constructor (folder) {\n    super()\n\n    this.folder = folder\n\n    if (!this.folder) {\n      throw new Error('[master-git] MasterGitProject cannot launch without a folder defined')\n    }\n\n    // Is a git commit currently in the midst of taking place\n    this._isCommitting = false\n\n    // List of all actions that can be undone via git\n    this._gitUndoables = []\n    this._gitRedoables = []\n    this._requestQueue = []\n    this._requestWorkerStopped = false\n    this._workerInterval = MIN_WORKER_INTERVAL\n    this._requestsWorker = this._requestsWorker.bind(this) // Save object allocs\n    this._requestsWorker()\n\n    // Dictionary mapping SHA strings to share payloads, used for caching\n    this._shareInfoPayloads = {}\n\n    // Snapshot of the current folder state as of the last fetchFolderState run\n    this._folderState = {}\n\n    // Project info used extensively in the internal machinery, populated later\n    this._projectInfo = {\n      // projectName,\n      // haikuUsername,\n      // haikuPassword,\n      // branchName,\n    }\n  }\n\n  _upWorkerInterval () {\n    if (this._workerInterval < MAX_WORKER_INTERVAL) {\n      this._workerInterval += 16\n    }\n  }\n\n  _downWorkerInterval () {\n    if (this._workerInterval > MIN_WORKER_INTERVAL) {\n      this._workerInterval -= 16\n    }\n  }\n\n  _requestsWorker () {\n    if (this._requestWorkerStopped) return void (0)\n    const requestInfo = this._requestQueue.shift()\n    if (requestInfo) {\n      // If we have work, start going faster\n      // this._downWorkerInterval()\n      const { type, options, cb } = requestInfo\n      const finish = (err, out) => {\n        // Put at the bottom of the event loop\n        setTimeout(this._requestsWorker)\n        return cb(err, out)\n      }\n      if (type === 'undo') this.undoActual(options, finish)\n      else if (type === 'redo') this.redoActual(options, finish)\n      else if (type === 'commit') this.commitActual(options, finish)\n    } else {\n      // If we have nothing to do, start backing off\n      // this._upWorkerInterval()\n      setTimeout(this._requestsWorker, this._workerInterval)\n    }\n  }\n\n  teardown () {\n    this._requestWorkerStopped = true\n  }\n\n  restart (projectInfo) {\n    this._isCommitting = false\n    this._gitUndoables.splice(0)\n    this._gitRedoables.splice(0)\n\n    if (projectInfo) {\n      this._projectInfo.projectName = projectInfo.projectName\n      this._projectInfo.haikuUsername = projectInfo.haikuUsername\n      this._projectInfo.haikuPassword = projectInfo.haikuPassword\n      this._projectInfo.branchName = projectInfo.branchName\n    }\n  }\n\n  getGitUndoablesUptoBase () {\n    const undoablesToReturn = []\n    let didFindBaseUndoable = false\n    this._gitUndoables.forEach((undoable) => {\n      if (undoable.isBase) {\n        didFindBaseUndoable = true\n      }\n      if (didFindBaseUndoable) {\n        undoablesToReturn.push(undoable)\n      }\n    })\n    return undoablesToReturn\n  }\n\n  getGitRedoablesUptoBase () {\n    const redoablesToReturn = []\n    this._gitRedoables.forEach((redoable) => {\n      redoablesToReturn.push(redoable)\n    })\n    return redoablesToReturn\n  }\n\n  /**\n   * internal machinery\n   * ==================\n   */\n\n  runActionSequence (seq, projectOptions, cb) {\n    if (!seq || seq.length < 1) {\n      return cb()\n    }\n\n    return async.eachSeries(seq, (method, next) => {\n      return this.fetchFolderState(`action-sequence=${method}`, projectOptions, (err) => {\n        if (err) return next(err)\n        logger.info('[master-git] running action sequence entry', method)\n        // Assume that any 'action sequence' method only receives a callback as an argument\n        return this[method](next)\n      })\n    }, (err) => {\n      if (err) return cb(err)\n      // Recipients of this response also depend on the folderState being up to date\n      return this.fetchFolderState('action-sequence=done', projectOptions, cb)\n    })\n  }\n\n  isCommittingProject () {\n    return this._isCommitting\n  }\n\n  getFolderState () {\n    return this._folderState\n  }\n\n  fetchFolderState (who, projectOptions, cb) {\n    logger.info(`[master-git] fetching folder state (${who})`)\n\n    let previousState = lodash.clone(this._folderState)\n\n    if (projectOptions) {\n      this._folderState.projectOptions = projectOptions\n\n      if (projectOptions.organizationName) {\n        this._folderState.organizationName = projectOptions.organizationName\n      }\n    }\n\n    return async.series([\n      (cb) => {\n        return this.safeHasAnyHeadCommitForCurrentBranch((hasHeadCommit) => {\n          this._folderState.hasHeadCommit = hasHeadCommit\n          return cb()\n        })\n      },\n\n      (cb) => {\n        return Git.referenceNameToId(this.folder, 'HEAD', (_err, headCommitId) => {\n          this._folderState.headCommitId = headCommitId\n          return cb()\n        })\n      },\n\n      (cb) => {\n        return this.safeFetchProjectGitRemoteInfo((remoteProjectDescriptor) => {\n          this._folderState.remoteProjectDescriptor = remoteProjectDescriptor\n          this._folderState.isCodeCommitReady = !!(this._projectInfo.projectName && remoteProjectDescriptor)\n          return cb()\n        })\n      },\n\n      (cb) => {\n        return this.safeListLocallyDeclaredRemotes((gitRemotesList) => {\n          this._folderState.gitRemotesList = gitRemotesList\n          return cb()\n        })\n      },\n\n      (cb) => {\n        return _checkIsOnline((isOnline) => {\n          this._folderState.isOnline = isOnline\n          return cb()\n        })\n      },\n\n      (cb) => {\n        return this.safeGitStatus({ log: false }, (gitStatuses) => {\n          this._folderState.doesGitHaveChanges = !!(gitStatuses && Object.keys(gitStatuses).length > 0)\n          this._folderState.isGitInitialized = fse.existsSync(path.join(this.folder, '.git'))\n          return cb()\n        })\n      },\n\n      (cb) => {\n        this._folderState.folderEntries = fse.readdirSync(this.folder)\n        this._folderState.folder = this.folder\n        this._folderState.projectName = this._projectInfo.projectName\n        this._folderState.branchName = this._projectInfo.branchName\n        this._folderState.haikuUsername = this._projectInfo.haikuUsername\n        this._folderState.haikuPassword = this._projectInfo.haikuPassword\n        this._folderState.gitUndoables = this._gitUndoables\n        this._folderState.gitRedoables = this._gitRedoables\n        return cb()\n      },\n\n      (cb) => {\n        const packageJsonExists = fse.existsSync(path.join(this.folder, 'package.json'))\n        if (!packageJsonExists) return cb()\n        const packageJsonObj = fse.readJsonSync(path.join(this.folder, 'package.json'), { throws: false })\n        if (!packageJsonObj) return cb()\n        this._folderState.semverVersion = packageJsonObj.version\n        this._folderState.playerVersion = packageJsonObj.dependencies && packageJsonObj.dependencies['@haiku/player']\n        return cb()\n      }\n    ], (err) => {\n      if (err) return cb(err)\n      logger.info(`[master-git] folder state fetch (${who}) done`)\n      return cb(null, this._folderState, previousState)\n    })\n  }\n\n  safeListLocallyDeclaredRemotes (cb) {\n    return Git.listRemotes(this.folder, (err, remotes) => {\n      // Note that in case of error we return the error object\n      // This is a legacy implementation; I'm not sure why #TODO\n      if (err) return cb(null, err)\n      return cb(remotes)\n    })\n  }\n\n  safeFetchProjectGitRemoteInfo (cb) {\n    if (!this._projectInfo.projectName) {\n      return cb(null)\n    }\n\n    const authToken = sdkClient.config.getAuthToken()\n\n    return Inkstone.project.getByName(authToken, this._projectInfo.projectName, (err, projectAndCredentials, httpResp) => {\n      // Note the inversion of the typical error-first continuation\n      // This is a legacy implementation; I'm not sure why #TODO\n      if (err) return cb(null, err)\n\n      if (!httpResp) {\n        return cb(null, new Error('No HTTP response'))\n      }\n      if (httpResp.statusCode === 404) {\n        return cb(null, new Error('Got 404 status code'))\n      }\n      if (!projectAndCredentials.Project) {\n        return cb(null, new Error('No project returned'))\n      }\n\n      return cb({ // eslint-disable-line\n        projectName: this._projectInfo.projectName,\n        GitRemoteUrl: projectAndCredentials.Project.GitRemoteUrl,\n        CodeCommitHttpsUsername: projectAndCredentials.Credentials.CodeCommitHttpsUsername,\n        CodeCommitHttpsPassword: projectAndCredentials.Credentials.CodeCommitHttpsPassword\n      })\n    })\n  }\n\n  safeHasAnyHeadCommitForCurrentBranch (cb) {\n    if (!this._projectInfo.branchName) {\n      // Note the inversion of the typical error-first continuation\n      // This is a legacy implementation; I'm not sure why #TODO\n      return cb(false) // eslint-disable-line\n    }\n\n    const refPath = path.join(this.folder, '.git', 'refs', 'heads', this._projectInfo.branchName)\n\n    return fse.exists(refPath, (answer) => {\n      return cb(!!answer) // eslint-disable-line\n    })\n  }\n\n  getPendingCommitRequests () {\n    return this._requestQueue.filter(_isCommitTypeRequest)\n  }\n\n  hasAnyPendingCommits () {\n    return this.getPendingCommitRequests().length > 0\n  }\n\n  waitUntilNoFurtherChangesAreAwaitingCommit (cb) {\n    if (!this.hasAnyPendingCommits()) {\n      return cb()\n    }\n\n    return setTimeout(() => {\n      return this.waitUntilNoFurtherChangesAreAwaitingCommit(cb)\n    }, AWAIT_COMMIT_INTERVAL)\n  }\n\n  /**\n   * action sequence methods\n   * =======================\n   */\n\n  bumpSemverAppropriately (cb) {\n    logger.info('[master-git] trying to bump semver appropriately')\n\n    return Git.listTags(this.folder, (err, tags) => {\n      if (err) return cb(err)\n\n      const cleanTags = tags.map((dirtyTag) => {\n        // Clean v0.1.2 and refs/head/v0.1.2 to just 0.1.2\n        return dirtyTag.split('/').pop().replace(/^v/, '')\n      })\n\n      logger.info('[master-git] tags found:', cleanTags.join(','))\n\n      // 1. Figure out which is the largest semver tag among\n      //    - git tags\n      //    - the max version\n      let maxTag = BASELINE_SEMVER_TAG\n\n      cleanTags.forEach((cleanTag) => {\n        if (semver.gt(cleanTag, maxTag)) {\n          maxTag = cleanTag\n        }\n      })\n\n      const pkgTag = fse.readJsonSync(path.join(this.folder, 'package.json')).version\n      if (semver.gt(pkgTag, maxTag)) {\n        maxTag = pkgTag\n      }\n\n      logger.info('[master-git] max git tag found is', maxTag)\n\n      // 2. Bump this tag to the next version, higher than anything we have locally\n      const nextTag = semver.inc(maxTag, 'patch')\n\n      logger.info('[master-git] next tag to set is', nextTag)\n\n      // 3. Set the package.json number to the new version\n      return ProjectFolder.semverBumpPackageJson(this.folder, nextTag, (err) => {\n        if (err) return cb(err)\n\n        logger.info(`[master-git] bumped package.json semver to ${nextTag}`)\n\n        // The main master process and component need to handle this too since the\n        // bytecode contains the version which we use to render in the right-click menu\n        this.emit('semver-bumped', nextTag, () => {\n          return cb(null, nextTag)\n        })\n      })\n    })\n  }\n\n  makeTag (cb) {\n    logger.info(`[master-git] git tagging: ${this._folderState.semverVersion} (commit: ${this._folderState.commitId})`)\n\n    if (!this._folderState.semverTagAttempts) {\n      this._folderState.semverTagAttempts = 0\n    }\n\n    this._folderState.semverTagAttempts += 1\n\n    if (this._folderState.semverTagAttempts > MAX_SEMVER_TAG_ATTEMPTS) {\n      return cb(new Error('Failed to make semver tag even after many attempts'))\n    }\n\n    return Git.createTag(this.folder, this._folderState.semverVersion, this._folderState.commitId, this._folderState.semverVersion, (err) => {\n      if (err) {\n        // If the tag already exists, we can try to correct the situation by bumping the semver until we find a good tag.\n        if (err.message && err.message.match(/Tag already exists/i)) {\n          logger.info(`[master-git] git tag ${this._folderState.semverVersion} already exists; trying to bump it`)\n\n          return this.bumpSemverAppropriately((err, incTag) => {\n            if (err) return cb(err)\n\n            this._folderState.semverVersion = incTag\n\n            // Recursively go into this sequence again, hopefully eventually finding a good tag to use\n            // If we try this too many times and fail (see above), we will quit the process\n            return this.makeTag(cb)\n          })\n        }\n\n        return cb(err)\n      }\n\n      return cb()\n    })\n  }\n\n  retryCloudSaveSetup (cb) {\n    logger.info(`[master-git] retrying remote ref setup to see if we can cloud save after all`)\n\n    return this.ensureAllRemotes((err) => {\n      if (err) {\n        return this.cloudSaveDisabled(cb)\n      }\n\n      return this.fetchFolderState('cloud-setup', {}, (err) => {\n        if (err) {\n          return this.cloudSaveDisabled(cb)\n        }\n\n        if (!this._folderState.isGitInitialized) {\n          return this.cloudSaveDisabled(cb)\n        }\n\n        return cb()\n      })\n    })\n  }\n\n  pushToRemote (cb) {\n    if (this._folderState.saveOptions && this._folderState.saveOptions.dontPush) {\n      logger.info('[master-git] skipping push to remote, per your saveOptions flag')\n      return cb() // Hack: Allow consumer to skip push (e.g. for testing)\n    }\n\n    if (this._folderState.wasResetPerformed) return cb() // Kinda hacky to put this here...\n\n    const {\n      GitRemoteUrl,\n      CodeCommitHttpsUsername,\n      CodeCommitHttpsPassword\n    } = this._folderState.remoteProjectDescriptor\n\n    return Git.pushProject(this.folder, this._folderState.projectName, GitRemoteUrl, CodeCommitHttpsUsername, CodeCommitHttpsPassword, (err) => {\n      if (err) return cb(err)\n      return this.pushTag(GitRemoteUrl, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb)\n    })\n  }\n\n  initializeGit (cb) {\n    return Git.maybeInit(this.folder, cb)\n  }\n\n  moveContentsToTemp (cb) {\n    logger.info('[master-git] moving folder contents to temp dir (if any)')\n\n    return tmp.dir({ unsafeCleanup: true }, (err, tmpDir, tmpDirCleanupFn) => {\n      if (err) return cb(err)\n\n      this._folderState.tmpDir = tmpDir\n\n      logger.info('[master-git] temp dir is', this._folderState.tmpDir)\n\n      this._folderState.tmpDirCleanupFn = tmpDirCleanupFn\n\n      // Whether or not we had entries, we still need the temp folder created at this point otherwise\n      // methods downstream will complain\n      if (this._folderState.folderEntries.length < 1) {\n        logger.info('[master-git] folder had no initial content; skipping temp folder step')\n\n        return cb()\n      }\n\n      logger.info('[master-git] copying contents from', this.folder, 'to temp dir', this._folderState.tmpDir)\n\n      return fse.copy(this.folder, this._folderState.tmpDir, (err) => {\n        if (err) return cb(err)\n\n        logger.info('[master-git] emptying original dir', this.folder)\n\n        // Folder must be empty for a Git clone to take place\n        return fse.emptyDir(this.folder, (err) => {\n          if (err) return cb(err)\n          return cb()\n        })\n      })\n    })\n  }\n\n  // Before the first time we clone, add an artificial timer that waits a couple\n  // of seconds before attempting. Basically, give the cloud a chance to set things\n  // up *before* we immediately call clone, that way we don't call it prematurely\n  // and then have to wait an additional 10 seconds before trying again\n  hackyInitialDelayBeforeFirstCloneAttempt (cb) {\n    logger.info(`[master-git] waiting before first clone attempt`)\n    return setTimeout(cb, CLONE_INIT_DELAY)\n  }\n\n  cloneRemoteIntoFolder (cb) {\n    if (!this._folderState.cloneAttempts) {\n      this._folderState.cloneAttempts = 0\n    }\n\n    this._folderState.cloneAttempts++\n\n    const {\n      GitRemoteUrl,\n      CodeCommitHttpsUsername,\n      CodeCommitHttpsPassword\n    } = this._folderState.remoteProjectDescriptor\n\n    logger.info(`[master-git] cloning from remote ${GitRemoteUrl} (attempt ${this._folderState.cloneAttempts})`)\n\n    return Git.cloneRepo(GitRemoteUrl, CodeCommitHttpsUsername, CodeCommitHttpsPassword, this.folder, (err) => {\n      if (err) {\n        logger.info(`[master-git] clone error:`, err)\n\n        if (this._folderState.cloneAttempts < MAX_CLONE_ATTEMPTS) {\n          logger.info(`[master-git] retrying clone after a brief delay...`)\n\n          return setTimeout(() => {\n            return this.cloneRemoteIntoFolder(cb)\n          }, CLONE_RETRY_DELAY)\n        }\n\n        return cb(err)\n      }\n\n      logger.info('[master-git] clone complete')\n\n      return this.ensureAllRemotes((err) => {\n        if (err) return cb(err)\n        return cb()\n      })\n    })\n  }\n\n  ensureAllRemotes (cb) {\n    return this.ensureLocalRemote((err) => {\n      if (err) return cb(err)\n      return this.ensureRemoteRefs((err) => {\n        if (err) return cb(err)\n        return cb()\n      })\n    })\n  }\n\n  ensureLocalRemote (cb) {\n    // Object access to .GitRemoteUrl would throw an exception in some cases if we didn't check this\n    if (!this._folderState.remoteProjectDescriptor) {\n      return cb(new Error('Cannot find remote project descriptor'))\n    }\n    const { GitRemoteUrl } = this._folderState.remoteProjectDescriptor\n    logger.info('[master-git] upserting remote', GitRemoteUrl)\n    return Git.upsertRemote(this.folder, this._folderState.projectName, GitRemoteUrl, cb)\n  }\n\n  ensureRemoteRefs (cb) {\n    logger.info('[master-git] remote refs: ensuring')\n\n    return Git.open(this.folder, (err, repository) => {\n      if (err) return cb(err)\n\n      logger.info('[master-git] remote refs: setting up base content')\n\n      return fse.outputFile(path.join(this.folder, 'README.md'), '', (err) => {\n        if (err) return cb(err)\n\n        logger.info('[master-git] remote refs: making base commit')\n\n        return Git.addAllPathsToIndex(this.folder, (err, oid) => {\n          if (err) return cb(err)\n\n          return Git.buildCommit(this.folder, this._folderState.haikuUsername, null, `Base commit ${COMMIT_SUFFIX}`, oid, null, null, (err, commitId) => {\n            if (err) return cb(err)\n            const branchName = DEFAULT_BRANCH_NAME\n            const refSpecToPush = `refs/heads/${branchName}`\n\n            logger.info('[master-git] remote refs: creating branch', branchName)\n\n            return repository.createBranch(branchName, commitId.toString()).then(() => {\n              return Git.lookupRemote(this.folder, this._folderState.projectName, (err, mainRemote) => {\n                if (err) return cb(err)\n\n                const remoteRefspecs = [refSpecToPush]\n                const remoteCreds = Git.buildRemoteOptions(this._folderState.remoteProjectDescriptor.CodeCommitHttpsUsername, this._folderState.remoteProjectDescriptor.CodeCommitHttpsPassword)\n\n                logger.info('[master-git] remote refs: pushing refspecs', remoteRefspecs, 'over https')\n\n                return mainRemote.push(remoteRefspecs, remoteCreds).then(() => {\n                  return cb()\n                }, cb)\n              })\n            }, (branchErr) => {\n              // The remote already exists; there was no need to create it. Go ahead and skip\n              if (branchErr.message && branchErr.message.match(/reference with that name already exists/) && branchErr.message.split(refSpecToPush).length > 1) {\n                logger.info('[master-git] remote refs: branch already exists; proceeding')\n                return cb()\n              }\n              return cb(branchErr)\n            })\n          })\n        })\n      })\n    })\n  }\n\n  copyContentsFromTemp (cb) {\n    logger.info('[master-git] returning original folder contents (if any)')\n\n    if (this._folderState.folderEntries.length < 1) {\n      logger.info('[master-git] no original folder entries present')\n      return cb()\n    }\n\n    // TODO: Should this return an error or not?\n    if (!this._folderState.tmpDir) {\n      logger.info('[master-git] no temp dir seems to have been created at', this._folderState.tmpDir)\n      return cb()\n    }\n\n    logger.info('[master-git] copying contents from', this._folderState.tmpDir, 'back to original folder', this.folder)\n\n    return fse.copy(this._folderState.tmpDir, this.folder, (err) => {\n      if (err) return cb(err)\n      logger.info('[master-git] cleaning up temp dir', this._folderState.tmpDir)\n      this._folderState.tmpDirCleanupFn()\n      return cb()\n    })\n  }\n\n  pullRemote (cb) {\n    const {\n      GitRemoteUrl,\n      CodeCommitHttpsUsername,\n      CodeCommitHttpsPassword\n    } = this._folderState.remoteProjectDescriptor\n\n    return Git.fetchProject(this.folder, this._folderState.projectName, GitRemoteUrl, CodeCommitHttpsUsername, CodeCommitHttpsPassword, (err) => {\n      if (err) return cb(err)\n\n      return Git.getCurrentBranchName(this.folder, (err, partialBranchName) => {\n        if (err) return cb(err)\n        logger.info(`[master-git] current branch is '${partialBranchName}'`)\n\n        return Git.mergeProject(this.folder, this._folderState.projectName, partialBranchName, this._folderState.saveOptions, (err, didHaveConflicts, shaOrIndex) => {\n          if (err) return cb(err)\n\n          if (!didHaveConflicts) {\n            logger.info(`[master-git] merge complete (${shaOrIndex})`)\n          } else {\n            logger.info(`[master-git] merge conflicts detected`)\n          }\n\n          // Just for the sake of logging the current git status\n          return this.safeGitStatus({ log: true }, () => {\n            this._folderState.didHaveConflicts = didHaveConflicts\n            this._folderState.mergeCommitId = (didHaveConflicts) ? null : shaOrIndex.toString()\n            return cb()\n          })\n        })\n      })\n    })\n  }\n\n  conflictResetOrContinue (cb) {\n    // If no conficts, this save is good; ok to push and return\n    if (!this._folderState.didHaveConflicts) return cb()\n\n    // If conflicts, do a reset so a second save attempt can go through\n    // TODO: Don't clean but leave things as-is for manual intervention\n    logger.info('[master-git] cleaning merge conflicts for re-attempt')\n\n    // Only calling this to log whatever the current statuses are\n    return this.safeGitStatus({ log: true }, () => {\n      return Git.cleanAllChanges(this.folder, (err) => {\n        if (err) return cb(err)\n        return Git.hardResetFromSHA(this.folder, this._folderState.commitId.toString(), (err) => {\n          if (err) return cb(err)\n          this._folderState.wasResetPerformed = true\n          return cb()\n        })\n      })\n    })\n  }\n\n  /**\n   * @method getExistingShareDataIfSaveIsUnnecessary\n   * @description Given the current folder state, determine if we need to save or if we can simply\n   * retrieve a pre-existing share link.\n   */\n  getExistingShareDataIfSaveIsUnnecessary (cb) {\n    return this.fetchFolderState('get-existing-share-data', {}, () => {\n      // TODO: We may need to look closely to see if this boolean is set properly.\n      // Currently the _getFolderState method just checks to see if there are git statuses,\n      // but that might not be correct (although it seemed to be when I initially checked).\n      if (this._folderState.doesGitHaveChanges) {\n        logger.info('[master-git] looks like git has changes; must do full save')\n        return cb(null, false) // falsy == you gotta save\n      }\n\n      // Inkstone should return info pretty fast if it has share info, so only wait 2s\n      return this.getCurrentShareInfo(2000, (err, shareInfo) => {\n        // Rather than treat the error as an error, assume it indicates that we need\n        // to do a full publish. For example, we don't want to \"error\" if this is just a network timeout.\n        // #FIXME?\n        if (err) {\n          logger.info('[master-git] share info was error-ish; must do full save')\n          return cb(null, false) // falsy == you gotta save\n        }\n\n        // Not sure why this would be null, but just in case...\n        if (!shareInfo) {\n          logger.info('[master-git] share info was blank; must do full save')\n          return cb(null, false) // falsy == you gotta save\n        }\n\n        // If we go this far, we already have a save for our current SHA, and can skip the expensive stuff\n        logger.info('[master-git] share info found! no need to save')\n        return cb(null, shareInfo)\n      })\n    })\n  }\n\n  cloudSaveDisabled (cb) {\n    const error = new Error('Project was saved locally, but could not sync to Haiku Cloud')\n    error.code = 1\n    return cb(error)\n  }\n\n  /**\n   * methods\n   * =======\n   */\n\n  getHaikuPlayerLibVersion () {\n    if (!fse.existsSync(PLUMBING_PKG_JSON_PATH)) return null\n    var obj = fse.readJsonSync(PLUMBING_PKG_JSON_PATH, { throws: false })\n    return obj && obj.version\n  }\n\n  getCurrentShareInfo (timeout, cb) {\n    return Inkstone.getCurrentShareInfo(this.folder, this._shareInfoPayloads, this._folderState, timeout, cb)\n  }\n\n  pushTag (GitRemoteUrl, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb) {\n    logger.info(`[master-git] pushing tag ${this._folderState.semverVersion} to remote (${this._folderState.projectName}) ${GitRemoteUrl}`)\n    return Git.pushTagToRemote(this.folder, this._folderState.projectName, this._folderState.semverVersion, CodeCommitHttpsUsername, CodeCommitHttpsPassword, cb)\n  }\n\n  undo (undoOptions, cb) {\n    this._requestQueue.push({\n      type: 'undo',\n      options: undoOptions,\n      cb\n    })\n  }\n\n  redo (redoOptions, cb) {\n    this._requestQueue.push({\n      type: 'redo',\n      options: redoOptions,\n      cb\n    })\n  }\n\n  undoActual (undoOptions, done) {\n    logger.info('[master-git] undo beginning')\n\n    // We can't undo if there isn't a target ref yet to go back to; skip if so\n    if (this._gitUndoables.length < 2) {\n      logger.info('[master-git] nothing to undo')\n      return done()\n    }\n\n    logger.info('[master-git] undo proceeding')\n\n    // The most recent item is the one we are going to undo...\n    const validUndoables = this.getGitUndoablesUptoBase()\n    const undone = validUndoables.pop()\n\n    logger.info(`[master-git] git undo commit ${undone.commitId.toString()}`)\n\n    // To undo, we go back to the commit _prior to_ the most recent one\n    const target = validUndoables[validUndoables.length - 1]\n\n    logger.info(`[master-git] git undo resetting to commit ${target.commitId.toString()}`)\n\n    return Git.hardResetFromSHA(this.folder, target.commitId.toString(), (err) => {\n      if (err) {\n        logger.info(`[master-git] git undo failed`, err)\n        return done(err)\n      }\n\n      logger.info('[master-git] undo done')\n\n      // The most recent undone thing becomes an action we can now undo.\n      // Only do the actual stack-pop here once we know we have succeeded.\n      this._gitRedoables.push(this._gitUndoables.pop())\n\n      return done()\n    })\n  }\n\n  redoActual (redoOptions, done) {\n    const redoable = this._gitRedoables.pop()\n\n    // If nothing to redo, consider this a noop\n    if (!redoable) return done()\n\n    logger.info(`[master-git] git redo commit ${redoable.commitId.toString()}`)\n\n    return Git.hardResetFromSHA(this.folder, redoable.commitId.toString(), (err) => {\n      if (err) {\n        logger.info(`[master-git] git redo failed`)\n        this._gitRedoables.push(redoable) // If error, put the 'undone' thing back on the stack since we didn't succeed\n        return done(err)\n      }\n\n      this._gitUndoables.push(redoable)\n\n      return done()\n    })\n  }\n\n  setUndoBaselineIfHeadCommitExists (cb) {\n    return this.fetchFolderState('undo-baseline', {}, () => {\n      // We need a base commit to act as the commit to return to if the user has done 'undo' to the limit of the stack\n      if (this._folderState.headCommitId) {\n        if (this._gitUndoables.length < 1) {\n          logger.info(`[master-git] base commit for session is ${this._folderState.headCommitId.toString()}`)\n          this._gitUndoables.push({\n            commitId: this._folderState.headCommitId,\n            message: 'Base commit for session',\n            isBase: true\n          })\n        }\n      }\n      return cb()\n    })\n  }\n\n  safeGitStatus (options, cb) {\n    return Git.status(this.folder, options || {}, (err, statuses) => {\n      if (options && options.log) {\n        if (statuses) {\n          Git.logStatuses(statuses)\n        } else if (err) {\n          logger.info('[master-git] git status error:', err)\n        }\n      }\n      // Note the inversion of the error-first style\n      // This is a legacy implementation; I'm not sure why #TODO\n      if (err) {\n        return cb(null, err)\n      }\n      return cb(statuses)\n    })\n  }\n\n  statusForFile (relpath, cb) {\n    return this.safeGitStatus({ log: false, relpath }, (gitStatuses) => {\n      let foundStatus\n\n      if (gitStatuses) {\n        for (let key in gitStatuses) {\n          if (foundStatus) {\n            continue\n          }\n\n          let gitStatus = gitStatuses[key]\n\n          if (path.normalize(gitStatus.path) === path.normalize(relpath)) {\n            foundStatus = gitStatus\n          }\n        }\n      }\n\n      return cb(null, foundStatus)\n    })\n  }\n\n  commitFileIfChanged (relpath, message, cb) {\n    // The call to status is sync, so we add this hook in case pending commits may alter the status\n    return this.waitUntilNoFurtherChangesAreAwaitingCommit(() => {\n      return this.statusForFile(relpath, (err, status) => {\n        if (err) return cb(err)\n        if (!status) return cb() // No status means no changes\n        // 0 is UNMODIFIED, everything else is a change\n        // See http://www.nodegit.org/api/diff/#getDelta\n        if (status.num && status.num > 0) {\n          return this.commit(relpath, message, cb)\n        } else {\n          return cb()\n        }\n      })\n    })\n  }\n\n  commitProjectIfChanged (message, cb) {\n    // The call to status is sync, so we add this hook in case pending commits may alter the status\n    return this.waitUntilNoFurtherChangesAreAwaitingCommit(() => {\n      return this.safeGitStatus({ log: true }, (gitStatuses) => {\n        const doesGitHaveChanges = gitStatuses && Object.keys(gitStatuses).length > 0\n        if (doesGitHaveChanges) { // Don't add garbage/empty commits if nothing changed\n          return this.commit('.', message, cb)\n        }\n        return cb()\n      })\n    })\n  }\n\n  // Note: This is an action sequence method, only takes a cb as an arg.\n  commitEverything (cb) {\n    return this.commit('.', 'Project changes', cb)\n  }\n\n  commit (addable, message, cb) {\n    this._requestQueue.push({\n      type: 'commit',\n      options: { addable, message },\n      cb\n    })\n  }\n\n  commitActual (commitOptions, cb) {\n    const { message, addable } = commitOptions\n\n    const finalOptions = {}\n    finalOptions.commitMessage = `${message} ${COMMIT_SUFFIX}`\n\n    return this.fetchFolderState('commit-project', {}, () => {\n      return Git.commitProject(this.folder, this._folderState.haikuUsername, this._folderState.hasHeadCommit, finalOptions, addable, (err, commitId) => {\n        if (err) {\n          return cb(err)\n        }\n\n        this._folderState.commitId = commitId\n\n        // HACK: If for some reason we never got a 'base' undoable before this point, set this cmomit as\n        // the new base so that there are always commits from a base commit going forward\n        let isBase = false\n\n        const baseUndoable = this._gitUndoables.filter((undoable) => {\n          return undoable && undoable.isBase\n        })[0]\n\n        if (!baseUndoable) {\n          isBase = true\n        }\n\n        logger.info(`[master-git] commit ${commitId.toString()} is undoable (as base: ${isBase})`)\n\n        // For now, pretty much any commit we capture in this session is considered an undoable. We may want to\n        // circle back and restrict it to only certain types of commits, but that does end up making the undo/redo\n        // stack logic a bit more complicated.\n        this._gitUndoables.push({ commitId, isBase, message })\n\n        return cb(null, commitId)\n      })\n    })\n  }\n\n  initializeProject (initOptions, done) {\n    // Empty folder state since we are going to reload it in here\n    this._folderState = {}\n\n    return async.series([\n      (cb) => {\n        return this.fetchFolderState('initialize-folder', initOptions, (err) => {\n          if (err) return cb(err)\n          logger.info('[master-git] folder initialization status:', this._folderState)\n          return cb()\n        })\n      },\n\n      (cb) => {\n        const {\n          isGitInitialized,\n          doesGitHaveChanges,\n          isCodeCommitReady\n        } = this._folderState\n\n        // Based on the above statuses, assemble a sequence of actions to take.\n        let actionSequence = []\n\n        if (!isGitInitialized && !isCodeCommitReady) {\n          actionSequence = ['initializeGit']\n        } else if (!isGitInitialized && isCodeCommitReady) {\n          actionSequence = [\n            'moveContentsToTemp',\n            'hackyInitialDelayBeforeFirstCloneAttempt',\n            'cloneRemoteIntoFolder',\n            'copyContentsFromTemp'\n          ]\n        } else if (isGitInitialized && !isCodeCommitReady) {\n          actionSequence = []\n        } else if (isGitInitialized && isCodeCommitReady) {\n          if (doesGitHaveChanges) {\n            actionSequence = []\n          } else if (!doesGitHaveChanges) {\n            actionSequence = ['pullRemote']\n          }\n        }\n\n        logger.info('[master-git] action sequence:', actionSequence.map((name) => name))\n\n        return this.runActionSequence(actionSequence, initOptions, (err) => {\n          if (err) return cb(err)\n          return cb()\n        })\n      }\n    ], (err, results) => {\n      if (err) return done(err)\n      return done(null, results[results.length - 1])\n    })\n  }\n\n  saveProject (saveOptions, done) {\n    // Empty folder state since we are going to reload it in here\n    this._folderState = {}\n\n    let saveAccumulator = {\n      semverVersion: null\n    }\n\n    return async.series([\n      (cb) => {\n        return this.waitUntilNoFurtherChangesAreAwaitingCommit(cb)\n      },\n\n      (cb) => {\n        return this.fetchFolderState('save-project', saveOptions, (err) => {\n          if (err) return cb(err)\n          this._folderState.semverVersion = saveAccumulator.semverVersion\n          this._folderState.saveOptions = saveOptions\n          logger.info('[master-git] pre-save status:', this._folderState)\n          return cb()\n        })\n      },\n\n      (cb) => {\n        logger.info('[master-git] project save: preparing action sequence')\n\n        const {\n          isGitInitialized,\n          doesGitHaveChanges,\n          isCodeCommitReady\n        } = this._folderState\n\n        // Based on the above statuses, assemble a sequence of actions to take.\n        let actionSequence = []\n\n        if (!isGitInitialized && !isCodeCommitReady) {\n          actionSequence = [\n            'initializeGit',\n            'commitEverything',\n            'makeTag',\n            'retryCloudSaveSetup'\n          ]\n        } else if (!isGitInitialized && isCodeCommitReady) {\n          actionSequence = [\n            'moveContentsToTemp',\n            'cloneRemoteIntoFolder',\n            'copyContentsFromTemp',\n            'commitEverything',\n            'makeTag',\n            'pushToRemote'\n          ]\n        } else if (isGitInitialized && !isCodeCommitReady) {\n          actionSequence = [\n            'commitEverything',\n            'makeTag',\n            'retryCloudSaveSetup'\n          ]\n        } else if (isGitInitialized && isCodeCommitReady) {\n          if (doesGitHaveChanges) {\n            actionSequence = [\n              'commitEverything',\n              'pullRemote',\n              'conflictResetOrContinue',\n              'bumpSemverAppropriately',\n              'commitEverything',\n              'makeTag',\n              'pushToRemote'\n            ]\n          } else if (!doesGitHaveChanges) {\n            actionSequence = [\n              'pullRemote',\n              'bumpSemverAppropriately',\n              'commitEverything',\n              'makeTag',\n              'pushToRemote'\n            ]\n          }\n        }\n\n        logger.info('[master-git] project save: action sequence:', actionSequence.map((name) => name))\n\n        return this.runActionSequence(actionSequence, saveOptions, cb)\n      },\n\n      (cb) => {\n        logger.info('[master-git] project save: completed initial sequence')\n\n        // If we have conflicts, we can't proceed to the share step, so return early.\n        // Conflicts aren't returned as an error because the frontend expects them as part of the response payload.\n        if (this._folderState.didHaveConflicts) {\n          // A fake conflicts object for now\n          // #TODO add real thing\n          return cb(null, { conflicts: [1] })\n        }\n\n        logger.info('[master-git] project save: fetching current share info')\n\n        // TODO: it may make sense to separate the \"get the share link\"\n        // flow from the \"save\" flow\n        return this.getCurrentShareInfo(60000 * 2, cb)\n      }\n    ], (err, results) => {\n      if (err) return done(err)\n      return done(null, results[results.length - 1])\n    })\n  }\n}\n"]}