{"version":3,"sources":["../src/Sketch.js"],"names":["looksLikeSlice","looksLikeArtboard","looksLikePage","isSketchFile","exportFolderPath","sketchtoolPipeline","LOOKS_LIKE_SLICE","LOOKS_LIKE_ARTBOARD","LOOKS_LIKE_PAGE","IS_SKETCH_FILE_RE","PARSER_CLI_PATH","BASE64_BITMAP_RE","relpath","match","abspath","sketchRelpath","cleanBasename","basename","extname","expectedExportFolderName","expectedExportFolderPath","join","dirname","existsSync","info","assetBaseFolder","artboardFolder","sliceFolder","pagesFolder","mkdirpSync","outputArtboardsCmd","_escapeShell","outputSlicesCmd","outputPagesCmd","outputEntries","walkSync","forEach","outputEntry","outputContents","readFileSync","toString","numImageMatches","updatedContents","replace","matchString","imageFormat","base64data","_processBase64ImageData","writeFileSync","cmd","fileAbspath","bitmapIndex","imageBufferData","Buffer","from","pngInstance","sync","read","gamma","adjustGamma","updatedBufferData","write","updated64data"],"mappings":"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","file":"Sketch.js","sourcesContent":["import path from 'path'\nimport fse from 'haiku-fs-extra'\nimport { execSync } from 'child_process'\nimport { PNG } from 'pngjs'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\n\nconst LOOKS_LIKE_SLICE = /\\.sketch\\.contents\\/slices\\//\nconst LOOKS_LIKE_ARTBOARD = /\\.sketch\\.contents\\/artboards\\//\nconst LOOKS_LIKE_PAGE = /\\.sketch\\.contents\\/pages\\//\nconst IS_SKETCH_FILE_RE = /\\.sketch$/\nconst PARSER_CLI_PATH = '/Applications/Sketch.app/Contents/Resources/sketchtool/bin/sketchtool'\n\nconst BASE64_BITMAP_RE = /\"data:image\\/(png|jpe?g|gif);base64,(.*?)\"/gi\n\nexport function looksLikeSlice (relpath) {\n  return relpath.match(LOOKS_LIKE_SLICE)\n}\n\nexport function looksLikeArtboard (relpath) {\n  return relpath.match(LOOKS_LIKE_ARTBOARD)\n}\n\nexport function looksLikePage (relpath) {\n  return relpath.match(LOOKS_LIKE_PAGE)\n}\n\nexport function isSketchFile (abspath) {\n  return abspath.match(IS_SKETCH_FILE_RE)\n}\n\nexport function exportFolderPath (sketchRelpath) {\n  const cleanBasename = path.basename(sketchRelpath, path.extname(sketchRelpath))\n  const expectedExportFolderName = `${cleanBasename}.sketch.contents`\n  const expectedExportFolderPath = path.join(path.dirname(sketchRelpath), expectedExportFolderName)\n  return expectedExportFolderPath\n}\n\nexport function sketchtoolPipeline (abspath) {\n  // Don't bother if the file passed is not a .sketch file\n  if (!isSketchFile(abspath)) return void (0)\n\n  // Don't bother if we detect that the user doesn't even have sketchtool installed\n  if (!fse.existsSync(PARSER_CLI_PATH)) return void (0)\n\n  logger.info('[sketchtool] got', abspath)\n\n  const assetBaseFolder = abspath + '.contents/'\n  const artboardFolder = assetBaseFolder + 'artboards/'\n  const sliceFolder = assetBaseFolder + 'slices/'\n  const pagesFolder = assetBaseFolder + 'pages/'\n\n  fse.mkdirpSync(artboardFolder)\n  fse.mkdirpSync(sliceFolder)\n  fse.mkdirpSync(pagesFolder)\n\n  logger.info('[sketchtool] running commands')\n\n  // Full Command:\n  // $ /Applications/Sketch.app/Contents/Resources/sketchtool/bin/sketchtool export --format=svg --output=~/TEST.sketch.export/artboards/ artboards ~/TEST.sketch\n  const outputArtboardsCmd = `${PARSER_CLI_PATH} export --format=svg --output=${_escapeShell(artboardFolder)} artboards ${_escapeShell(abspath)}`\n  const outputSlicesCmd = `${PARSER_CLI_PATH} export --format=svg --output=${_escapeShell(sliceFolder)} slices ${_escapeShell(abspath)}`\n  const outputPagesCmd = `${PARSER_CLI_PATH} export --format=svg --output=${_escapeShell(pagesFolder)} pages ${_escapeShell(abspath)}`\n\n  execSync(outputArtboardsCmd)\n  execSync(outputSlicesCmd)\n  execSync(outputPagesCmd)\n\n  logger.info('[sketchtool] fix gamma correction')\n\n  // Now loop through all of the outputs and fix the gamma value which leads to opacitation inconsistencies between browsers\n  const outputEntries = fse.walkSync(assetBaseFolder)\n  outputEntries.forEach((outputEntry) => {\n    // We only care about SVG vilew for now, since those are our primary component data format\n    if (path.extname(outputEntry) !== '.svg') return void (0)\n    let outputContents = fse.readFileSync(outputEntry).toString()\n    let numImageMatches = 0\n    let updatedContents = outputContents.replace(BASE64_BITMAP_RE, (matchString, imageFormat, base64data) => {\n      return matchString.replace(base64data, _processBase64ImageData(base64data, imageFormat, outputEntry, numImageMatches++))\n    })\n    fse.writeFileSync(outputEntry, updatedContents)\n  })\n\n  return true\n}\n\nfunction _escapeShell (cmd) {\n  return cmd.replace(/([\"\\s'$`\\\\])/g, '\\\\$1')\n}\n\nfunction _processBase64ImageData (base64data, imageFormat, fileAbspath, bitmapIndex) {\n  // TODO: Support other image formats (if necessary?) I dunno if formats other than png have gamma correction...\n  if (imageFormat === 'png') {\n    let imageBufferData = Buffer.from(base64data, 'base64')\n    let pngInstance = PNG.sync.read(imageBufferData)\n\n    // I've tried 0, 1, and 2.2, and only the magic number 1/2.2 seems to give me consistent\n    // results that render correctly in Chrome, Firefox, and Safari...\n    // I don't have any great ideas on how to derive the correct gamma setting based on the\n    // sketch outputs, so I'll just normalize everything to this.\n    // This is partly a #HACK in that when pngjs runs 'adjustGamma' it uses the internally\n    // set .gamma property, so my setting it here might be poor coding practice...\n    pngInstance.gamma = 1 / 2.2\n\n    PNG.adjustGamma(pngInstance)\n    let updatedBufferData = PNG.sync.write(pngInstance)\n    let updated64data = updatedBufferData.toString('base64')\n    return updated64data\n\n    // FUTURE: In case we want to write out the bitmap, we could use a path like this:\n    // let imageAbspath = `${fileAbspath}.${bitmapIndex}.${imageFormat}`\n  } else {\n    // If not a png, just return the base64 data directly since there's nothing to do for now\n    return base64data\n  }\n}\n"]}