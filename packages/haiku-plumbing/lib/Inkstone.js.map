{"version":3,"sources":["../src/Inkstone.js"],"names":["getCurrentShareInfo","getSnapshotInfo","Git","process","env","HAIKU_API","setConfig","baseUrl","folder","cache","extras","timeout","done","referenceNameToId","err","id","sha","toString","info","shareLink","snapshotAndProject","Error","assign","projectUid","Project","UniqueId","shareInfo","sacred","alreadyReturned","setTimeout","finish","snapshot","awaitSnapshotLink","getSnapshotAndProject","project","getByName","bind"],"mappings":"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","file":"Inkstone.js","sourcesContent":["import lodash from 'lodash'\nimport { inkstone } from 'haiku-sdk-inkstone'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport * as Git from './Git'\n\n// Configure inkstone, useful for testing off of dev (HAIKU_API=https://localhost:8080/)\nif (process.env.HAIKU_API) {\n  inkstone.setConfig({\n    baseUrl: process.env.HAIKU_API\n  })\n}\n\nexport function getCurrentShareInfo (folder, cache, extras, timeout, done) {\n  return Git.referenceNameToId(folder, 'HEAD', (err, id) => {\n    if (err) return done(err)\n\n    var sha = id.toString()\n\n    logger.info('[inkstone] git HEAD resolved:', sha, 'getting snapshot info...')\n\n    if (cache[sha]) {\n      logger.info(`[inkstone] found cached share info for ${sha}`)\n      return done(null, cache[sha])\n    }\n\n    return getSnapshotInfo(sha, timeout, (err, shareLink, snapshotAndProject) => {\n      logger.info('[inkstone] snapshot info returned', err, shareLink)\n\n      if (err) {\n        if (err.timeout === true) {\n          logger.info('[inkstone] timed out waiting for snapshot info')\n\n          // HEY! This error message string is used by the frontend as part of some hacky conditional logic.\n          // Make sure you understand what it's doing there before you change it here...\n          return done(new Error('Timed out waiting for project share info'), lodash.assign({ sha }, extras))\n        }\n\n        logger.info('[inkstone] error getting snapshot info')\n        return done(err)\n      }\n\n      var projectUid = snapshotAndProject.Project.UniqueId\n\n      var shareInfo = lodash.assign({ sha, projectUid, shareLink }, extras)\n\n      // Cache this during this session so we can avoid unnecessary handshakes with inkstone\n      cache[sha] = shareInfo\n\n      logger.sacred('[inkstone] share info', shareInfo)\n\n      return done(null, shareInfo)\n    })\n  })\n}\n\nexport function getSnapshotInfo (sha, timeout, done) {\n  let alreadyReturned = false\n\n  setTimeout(() => {\n    if (!alreadyReturned) {\n      alreadyReturned = true\n      return done({ timeout: true })\n    }\n  }, timeout)\n\n  function finish (err, shareLink, snapshotAndProject) {\n    if (!alreadyReturned) {\n      alreadyReturned = true\n      return done(err, shareLink, snapshotAndProject)\n    }\n  }\n\n  logger.info('[inkstone] awaiting snapshot share link')\n\n  return inkstone.snapshot.awaitSnapshotLink(sha, (err, shareLink) => {\n    if (err) return finish(err)\n\n    logger.info('[inkstone] share link received:', shareLink)\n\n    return inkstone.snapshot.getSnapshotAndProject(sha, (err, snapshotAndProject) => {\n      if (err) return finish(err)\n\n      logger.info('[inkstone] snapshot/project info:', snapshotAndProject)\n\n      return finish(null, shareLink, snapshotAndProject)\n    })\n  })\n}\n\nexport const project = {\n  getByName: inkstone.project.getByName.bind(inkstone.project)\n}\n"]}