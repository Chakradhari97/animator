{"version":3,"sources":["../src/Browserify.js"],"names":["stream","require","browserify","assign","tools","remapSource","logger","getHaikuKnownImportMatch","haikuify","makeStringTransform","content","options","done","updated","createBundle","folder","contents","standalone","cb","info","entry","Readable","push","opts","basedir","transform","br","runBundle","bundle","data","error","on","chunk","toString","err","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,YAAR,CAAjB;AACA,IAAIE,SAASF,QAAQ,eAAR,CAAb;AACA,IAAIG,QAAQH,QAAQ,4BAAR,CAAZ;AACA,IAAII,cAAcJ,QAAQ,yCAAR,CAAlB;AACA,IAAIK,SAASL,QAAQ,8CAAR,CAAb;AACA,IAAIM,2BAA2BN,QAAQ,wDAAR,CAA/B;;AAEA,IAAIO,WAAWJ,MAAMK,mBAAN,CAA0B,UAA1B,EAAsC,EAAtC,EAA0C,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,IAA5B,EAAkC;AACzF;AACA,MAAIC,UAAUR,YAAYK,OAAZ,EAAqBH,wBAArB,CAAd;AACA,SAAOK,KAAK,IAAL,EAAWC,OAAX,CAAP;AACD,CAJc,CAAf;;AAMA,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDN,OAArD,EAA8DO,EAA9D,EAAkE;AAChEZ,SAAOa,IAAP,CAAY,mCAAZ,EAAiDJ,MAAjD;;AAEA,MAAIK,QAAQpB,OAAOqB,QAAP,EAAZ;AACAD,QAAME,IAAN,CAAWN,QAAX;AACAI,QAAME,IAAN,CAAW,IAAX;AACA,MAAIC,OAAOpB,OAAO,EAAP,EAAW;AACpBqB,aAAST,MADW;AAEpBE,gBAAYA,UAFQ;AAGpBQ,eAAW,CAACjB,QAAD;AAHS,GAAX,EAIRG,OAJQ,CAAX;;AAMA,MAAIe,KAAKxB,WAAWkB,KAAX,EAAkBG,IAAlB,CAAT;AACA,SAAOI,UAAUD,EAAV,EAAcR,EAAd,CAAP;AACD;;AAED,SAASS,SAAT,CAAoBD,EAApB,EAAwBR,EAAxB,EAA4B;AAC1B,MAAIlB,SAAS0B,GAAGE,MAAH,EAAb;AACA,MAAIC,OAAO,EAAX;AACA,MAAIC,QAAQ,IAAZ;AACA9B,SAAO+B,EAAP,CAAU,MAAV,EAAkB,UAAUC,KAAV,EAAiB;AACjCH,YAAQG,MAAMC,QAAN,EAAR;AACD,GAFD;AAGAjC,SAAO+B,EAAP,CAAU,OAAV,EAAmB,UAAUG,GAAV,EAAe;AAChC;AACA;AACA,QAAI,CAACJ,KAAL,EAAY;AACVA,cAAQI,GAAR;AACA,aAAOhB,GAAGgB,GAAH,CAAP;AACD;AACF,GAPD;AAQAlC,SAAO+B,EAAP,CAAU,KAAV,EAAiB,YAAY;AAC3B;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAOZ,GAAG,IAAH,EAASW,IAAT,CAAP;AACD;AACF,GALD;AAMA,SAAOH,EAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiB;AACftB,gBAAcA;AADC,CAAjB","file":"Browserify.js","sourcesContent":["var stream = require('stream')\nvar browserify = require('browserify')\nvar assign = require('lodash.assign')\nvar tools = require('browserify-transform-tools')\nvar remapSource = require('haiku-serialization/src/ast/remapSource')\nvar logger = require('haiku-serialization/src/utils/LoggerInstance')\nvar getHaikuKnownImportMatch = require('haiku-serialization/src/model/getHaikuKnownImportMatch')\n\nvar haikuify = tools.makeStringTransform('haikuify', {}, function (content, options, done) {\n  // TODO: Cache? Only run for some files?\n  var updated = remapSource(content, getHaikuKnownImportMatch)\n  return done(null, updated)\n})\n\nfunction createBundle (folder, contents, standalone, options, cb) {\n  logger.info('[browserify] beginning in basedir', folder)\n\n  var entry = stream.Readable()\n  entry.push(contents)\n  entry.push(null)\n  var opts = assign({}, {\n    basedir: folder,\n    standalone: standalone,\n    transform: [haikuify]\n  }, options)\n\n  var br = browserify(entry, opts)\n  return runBundle(br, cb)\n}\n\nfunction runBundle (br, cb) {\n  var stream = br.bundle()\n  var data = ''\n  var error = null\n  stream.on('data', function (chunk) {\n    data += chunk.toString()\n  })\n  stream.on('error', function (err) {\n    // Don't call callback twice\n    // TODO: How are streams supposed to handle this? (i.e. bail on first error)\n    if (!error) {\n      error = err\n      return cb(err)\n    }\n  })\n  stream.on('end', function () {\n    // Don't call callback twice, we should have returned already\n    if (!error) {\n      return cb(null, data)\n    }\n  })\n  return br\n}\n\nmodule.exports = {\n  createBundle: createBundle\n}\n"]}