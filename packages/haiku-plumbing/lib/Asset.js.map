{"version":3,"sources":["../src/Asset.js"],"names":["assetsToDirectoryStructure","Sketch","dict","assets","relpath","push","dir","sketches","asset","index","extname","splice","forEach","sketch","sketchRelpath","exportFolder","exportFolderPath","type","fileName","basename","artboards","collection","pullArtboardsFor","slices","pullSlicesFor","pages","pullPagesFor","preview","abspath","updateTime","dtModified","assetsEach","dirname","indexOf","looksLikeArtboard","looksLikeSlice","looksLikePage","iterator","assetRelpath","assetDirname","assetBasename"],"mappings":"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","file":"Asset.js","sourcesContent":["import path from 'path'\nimport * as Sketch from './Sketch'\nimport reverseEach from './reverseEach'\n\nexport function assetsToDirectoryStructure (dict) {\n  const assets = []\n  for (const relpath in dict) {\n    assets.push(dict[relpath])\n  }\n\n  const dir = []\n  const sketches = []\n\n  // First go through and accumulate a list of Sketch-exported assets\n  reverseEach(assets, (asset, index) => {\n    const relpath = asset.relpath\n    const extname = path.extname(relpath)\n    if (extname === '.sketch') {\n      assets.splice(index, 1)\n      sketches.push(asset)\n    }\n  })\n\n  // Then infer which of any remainers are slices/artboards belonging to it\n  sketches.forEach((sketch) => {\n    const sketchRelpath = sketch.relpath\n    const exportFolder = Sketch.exportFolderPath(sketchRelpath)\n    dir.push({\n      type: 'sketch',\n      relpath: sketch.relpath,\n      fileName: path.basename(sketchRelpath),\n      artboards: {\n        type: 'folder',\n        collection: pullArtboardsFor(exportFolder, assets)\n      },\n      slices: {\n        type: 'folder',\n        collection: pullSlicesFor(exportFolder, assets)\n      },\n      pages: {\n        type: 'folder',\n        collection: pullPagesFor(exportFolder, assets)\n      }\n    })\n  })\n\n  // Remaining assets are those not belonging to a Sketch export\n  assets.forEach((asset) => {\n    dir.push({\n      type: 'file',\n      relpath: asset.relpath,\n      fileName: path.basename(asset.relpath),\n      preview: asset.abspath,\n      updateTime: asset.dtModified\n    })\n  })\n\n  return dir\n}\n\nfunction pullArtboardsFor (exportFolder, assets) {\n  const artboards = []\n  assetsEach(assets, (asset, index, relpath, dirname, basename) => {\n    if (dirname.indexOf(exportFolder) !== -1) {\n      if (Sketch.looksLikeArtboard(relpath)) {\n        assets.splice(index, 1)\n        artboards.push({\n          relpath,\n          fileName: basename,\n          preview: asset.abspath,\n          updateTime: asset.dtModified\n        })\n      }\n    }\n  })\n  return artboards\n}\n\nfunction pullSlicesFor (exportFolder, assets) {\n  const slices = []\n  assetsEach(assets, (asset, index, relpath, dirname, basename) => {\n    if (dirname.indexOf(exportFolder) !== -1) {\n      if (Sketch.looksLikeSlice(relpath)) {\n        assets.splice(index, 1)\n        slices.push({\n          relpath,\n          fileName: basename,\n          preview: asset.abspath,\n          updateTime: asset.dtModified\n        })\n      }\n    }\n  })\n  return slices\n}\n\nfunction pullPagesFor (exportFolder, assets) {\n  const pages = []\n  assetsEach(assets, (asset, index, relpath, dirname, basename) => {\n    if (dirname.indexOf(exportFolder) !== -1) {\n      if (Sketch.looksLikePage(relpath)) {\n        assets.splice(index, 1)\n        pages.push({\n          relpath,\n          fileName: basename,\n          preview: asset.abspath,\n          updateTime: asset.dtModified\n        })\n      }\n    }\n  })\n  return pages\n}\n\n// Just a bit of reusable logic for iterating over asseets\nfunction assetsEach (assets, iterator) {\n  reverseEach(assets, (asset, index) => {\n    const assetRelpath = asset.relpath\n    const assetDirname = path.dirname(assetRelpath)\n    const assetBasename = path.basename(assetRelpath)\n    iterator(asset, index, assetRelpath, assetDirname, assetBasename, assets)\n  })\n}\n"]}