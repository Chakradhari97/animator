{"version":3,"sources":["../src/Plumbing.js"],"names":["ProjectFolder","NOTIFIABLE_ENVS","production","staging","Raven","process","env","HAIKU_RELEASE_ENVIRONMENT","require","METHODS_TO_SKIP_IN_SENTRY","setTimelineTime","doesProjectHaveUnsavedChanges","masterHeartbeat","applyPropertyGroupDelta","applyPropertyGroupValue","moveSegmentEndpoints","moveKeyframes","toggleDevTools","fetchProjectInfo","IGNORED_METHOD_MESSAGES","METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY","openTextEditor","openTerminal","saveProject","previewProject","ROOT_DIR","join","__dirname","PROC_DIR","PROCS","master","name","path","creator","args","opts","electron","spawn","Q_GLASS","alias","Q_MASTER","Q_TIMELINE","Q_CREATOR","AWAIT_INTERVAL","WAIT_DELAY","MAX_MASTER_RESTART_ATTEMPTS","CODE_COMMIT_RACE_CONDITION_DELAY","HAIKU_DEFAULTS","socket","port","HAIKU_CONTROL_PORT","host","HAIKU_CONTROL_HOST","HAIKU_API","setConfig","baseUrl","emitter","PINFO","pid","basename","__filename","execPath","idIncrementor","_id","PLUMBING_INSTANCES","on","info","forEach","plumbing","teardown","exit","_safeErrorMessage","err","stack","message","Plumbing","push","subprocs","envoys","servers","clients","requests","caches","projects","_isTornDown","_masterRestartAttempts","_methodMessages","executeMethodMessagesWorker","folder","sacred","awaitFolderClientWithQuery","_handleUnrecoverableError","Error","projectInfo","getProjectInfoFor","restartProject","haikuTrackOnce","error","setTimeout","haiku","cb","envoyServer","WebSocket","logger","ready","then","envoy","envoyTimelineHandler","envoyTourHandler","envoyExporterHandler","envoyGlassHandler","bindHandler","launchControlServer","server","HAIKU_PLUMBING_PORT","HAIKU_PLUMBING_HOST","url","websocket","type","params","i","length","client","readyState","OPEN","close","splice","id","index","_index","j","responder","sendBroadcastMessage","callback","result","method","processMethodMessage","spawnSubgroup","spawned","apply","JSON","stringify","nextMethodMessage","shift","bind","methodMessageBeforeLog","handleClientAction","methodMessageAfterLog","plumbingMethod","sendMessageToClient","extras","fixed","captureException","concat","query","timeout","creatorClient","clientsOfFolder","clientMatching","sendClientMethod","response","sentryError","tags","sendClientRequest","undefined","Math","random","data","send","subproc","kill","stdin","pause","signal","sendFolderSpecificClientMethodQuery","masterState","maybeProjectName","maybeUsername","maybePassword","finish","projectsHome","projectPath","skipContentCreation","organizationName","authorName","projectOptions","projectName","username","password","get","skipCDNBundles","projectFolder","series","getCurrentOrganizationName","ensureProject","_projectFolder","exists","doesFolderExist","gitInitializeUsername","gitInitializePassword","projectOptionsAgain","initializeFolder","organization","options","projectNameOrFolder","answer","config","isAuthenticated","isAuthed","getUserId","mergeToPayload","distinct_id","setContext","user","email","authToken","getAuthToken","set","authenticate","authErr","authResponse","httpResponse","statusCode","serverErr","unexpectedError","Token","setAuthToken","setUserId","list","orgErr","orgsArray","orgHttpResp","Name","project","projectListErr","projectsList","finalList","map","remapProjectObjectToExpectedFormat","create","projectCreateErr","deleteByName","deleteErr","saveOptions","previewOptions","fetchOptions","assetAbspath","assetsAbspaths","assetRelpath","undoOptions","redoOptions","slice","from","modulepath","normalize","relative","eachSeries","clientSpec","nextStep","maybeOutput","center","prototype","existingSpawnedSubprocs","mode","spawnSubprocesses","extendEnvironment","next","spawnSubprocess","existing","_attributes","connected","disconnected","exited","closed","reestablishConnection","reused","proc","isElectronMain","default","NODE_ENV","NO_REMOTE_DEBUG","stdio","fork","match","emit","newProc","portrange","getPort","createServer","listen","once","code","socketInfo","websocketServer","createControlSocket","HAIKU_ENV","parse","getWsParams","request","split","Server","createResponder","messageResponder","reply","jsonrpc","projectObject","versions"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,a;;AACZ;;;;;;;;;;;;;;AAEA,IAAMC,kBAAkB;AACtBC,cAAY,IADU;AAEtBC,WAAS;AACT;AAHsB,CAAxB;;AAMA,IAAIC,cAAJ;AACA,IAAIH,gBAAgBI,QAAQC,GAAR,CAAYC,yBAA5B,CAAJ,EAA4D;AAC1DH,UAAQI,QAAQ,SAAR,CAAR;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,IAAMC,4BAA4B;AAChCC,mBAAiB,IADe;AAEhCC,iCAA+B,IAFC;AAGhCC,mBAAiB,IAHe;AAIhCC,2BAAyB,IAJO;AAKhCC,2BAAyB,IALO;AAMhCC,wBAAsB,IANU;AAOhCC,iBAAe,IAPiB;AAQhCC,kBAAgB,IARgB;AAShCC,oBAAkB;AATc,CAAlC;;AAYA,IAAMC,0BAA0B;AAC9BT,mBAAiB,IADa;AAE9BC,iCAA+B,IAFD;AAG9BC,mBAAiB;AACjB;AACA;AACA;AACA;AACA;;;AAGF;AAXgC,CAAhC,CAYA,IAAMQ,wCAAwC;AAC5CV,mBAAiB,IAD2B;AAE5CC,iCAA+B,IAFa;AAG5CC,mBAAiB,IAH2B;AAI5CK,kBAAgB,IAJ4B;AAK5CI,kBAAgB,IAL4B;AAM5CC,gBAAc,IAN8B;AAO5CC,eAAa,IAP+B;AAQ5CC,kBAAgB,IAR4B;AAS5CN,oBAAkB;AAT0B,CAA9C;;AAYA,IAAMO,WAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,CAAjB;AACA,IAAMC,WAAW,eAAKF,IAAL,CAAUC,SAAV,CAAjB;;AAEA,IAAME,QAAQ;AACZC,UAAQ,EAAEC,MAAM,QAAR,EAAkBC,MAAM,eAAKN,IAAL,CAAUE,QAAV,EAAoB,kBAApB,CAAxB,EADI;AAEZK,WAAS,EAAEF,MAAM,SAAR,EAAmBC,MAAMxB,QAAQ,UAAR,CAAzB,EAA8C0B,MAAM,CAAC,eAAKR,IAAL,CAAUD,QAAV,EAAoB,cAApB,EAAoC,wBAApC,EAA8D,KAA9D,EAAqE,aAArE,CAAD,CAApD,EAA2IU,MAAM,EAAEC,UAAU,IAAZ,EAAkBC,OAAO,IAAzB,EAAjJ;AAFG,CAAd;;AAKA,IAAMC,UAAU,EAAEC,OAAO,OAAT,EAAhB;AACA,IAAMC,WAAW,EAAED,OAAO,QAAT,EAAjB;AACA,IAAME,aAAa,EAAEF,OAAO,UAAT,EAAnB;AACA,IAAMG,YAAY,EAAEH,OAAO,SAAT,EAAlB;;AAEA,IAAMI,iBAAiB,GAAvB;AACA,IAAMC,aAAa,KAAK,IAAxB;AACA,IAAMC,8BAA8B,CAApC;;AAEA;AACA;AACA;AACA;AACA,IAAMC,mCAAmC,KAAzC;;AAEA,IAAMC,iBAAiB;AACrBC,UAAQ;AACNC,UAAM5C,QAAQC,GAAR,CAAY4C,kBADZ;AAENC,UAAM9C,QAAQC,GAAR,CAAY8C,kBAAZ,IAAkC;AAFlC;;AAMV;AAPuB,CAAvB,CAQA,IAAI/C,QAAQC,GAAR,CAAY+C,SAAhB,EAA2B;AACzB,6BAASC,SAAT,CAAmB;AACjBC,aAASlD,QAAQC,GAAR,CAAY+C;AADJ,GAAnB;AAGD;;AAED,IAAMG,UAAU,0BAAhB;;AAEA,IAAMC,QAAWpD,QAAQqD,GAAnB,SAA0B,eAAKC,QAAL,CAAcC,UAAd,CAA1B,SAAuD,eAAKD,QAAL,CAActD,QAAQwD,QAAtB,CAA7D;;AAEA,IAAIC,gBAAgB,CAApB;AACA,SAASC,GAAT,GAAgB;AACd,SAAOD,eAAP;AACD;;AAED,IAAME,qBAAqB,EAA3B;;AAEA;AACA;AACA;AACA3D,QAAQ4D,EAAR,CAAW,MAAX,EAAmB,YAAM;AACvB,2BAAOC,IAAP,mCAA4CT,KAA5C;AACAO,qBAAmBG,OAAnB,CAA2B,UAACC,QAAD;AAAA,WAAcA,SAASC,QAAT,EAAd;AAAA,GAA3B;AACD,CAHD;AAIAhE,QAAQ4D,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzB,2BAAOC,IAAP,mCAA4CT,KAA5C;AACAO,qBAAmBG,OAAnB,CAA2B,UAACC,QAAD;AAAA,WAAcA,SAASC,QAAT,EAAd;AAAA,GAA3B;AACAhE,UAAQiE,IAAR;AACD,CAJD;AAKAjE,QAAQ4D,EAAR,CAAW,SAAX,EAAsB,YAAM;AAC1B,2BAAOC,IAAP,mCAA4CT,KAA5C;AACAO,qBAAmBG,OAAnB,CAA2B,UAACC,QAAD;AAAA,WAAcA,SAASC,QAAT,EAAd;AAAA,GAA3B;AACAhE,UAAQiE,IAAR;AACD,CAJD;;AAMA,SAASC,iBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAI,CAACA,GAAL,EAAU,OAAO,eAAP;AACV,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAP;AAC7B,MAAIA,IAAIC,KAAR,EAAe,OAAOD,IAAIC,KAAX;AACf,MAAID,IAAIE,OAAR,EAAiB,OAAOF,IAAIE,OAAX;AACjB,SAAOF,MAAM,EAAb;AACD;;IAEoBG,Q;;;AACnB,sBAAe;AAAA;;AAGb;AACA;AACA;AALa;;AAMbX,uBAAmBY,IAAnB;;AAEA,UAAKC,QAAL,GAAgB,EAAhB;AACA,UAAKC,MAAL,GAAc,EAAd;AACA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgB,EAAhB;AACA,UAAKC,MAAL,GAAc,EAAd;AACA,UAAKC,QAAL,GAAgB,EAAhB;;AAEA;AACA;AACA;AACA,UAAKC,WAAL,GAAmB,KAAnB;AACA,UAAKC,sBAAL,GAA8B,EAA9B;;AAEA,UAAKC,eAAL,GAAuB,EAAvB;AACA,UAAKC,2BAAL;;AAEA/B,YAAQS,EAAR,CAAW,oBAAX,EAAiC,YAAM;AACrC,YAAKI,QAAL;AACD,KAFD;;AAIAb,YAAQS,EAAR,CAAW,gBAAX,EAA6B,UAACuB,MAAD,EAASjD,KAAT,EAAmB;AAC9C,UAAI,MAAK6C,WAAT,EAAsB;AACpB,iCAAOlB,IAAP,CAAY,uDAAZ;AACA,eAAO,KAAM,CAAb;AACD;;AAED,+BAAOuB,MAAP,mCAA8ClD,KAA9C,YAA0DiD,MAA1D;;AAEA;AACA;AACA,aAAO,MAAKE,0BAAL,CAAgCF,MAAhC,EAAwC,+BAAxC,EAAyE,EAAEjD,YAAF,EAAzE,EAAoFK,UAApF,EAAgG,UAAC4B,GAAD,EAAS;AAC9G,YAAIA,GAAJ,EAAS;AACP,iBAAO,MAAKmB,yBAAL,CAA+B,IAAIC,KAAJ,iCAAwCrD,KAAxC,YAAoDiD,MAApD,iBAAsEjB,kBAAkBC,GAAlB,CAAtE,CAA/B,CAAP;AACD;;AAED,YAAIjC,UAAU,QAAd,EAAwB;AACtB,cAAMsD,cAAc,MAAKC,iBAAL,CAAuBN,MAAvB,CAApB;;AAEA;AACA,iBAAO,MAAKO,cAAL,CAAoBP,MAApB,EAA4BK,WAA5B,EAAyC,UAACrB,GAAD,EAAS;AACvD,gBAAIA,GAAJ,EAAS;AACP,qBAAO,MAAKmB,yBAAL,CAA+B,IAAIC,KAAJ,yCAAgDrD,KAAhD,YAA4DiD,MAA5D,iBAA8EjB,kBAAkBC,GAAlB,CAA9E,CAA/B,CAAP;AACD;AACD,qCAAON,IAAP,kCAA2C3B,KAA3C,YAAuDiD,MAAvD;AACD,WALM,CAAP;AAMD;AACF,OAhBM,CAAP;AAiBD,KA3BD;AA7Ba;AAyDd;;;;8CAE0BhB,G,EAAK;AAC9B,yBAASwB,cAAT,CAAwB,WAAxB,EAAqC;AACnCC,eAAOzB,IAAIE;AADwB,OAArC;AAGA;AACAwB,iBAAW,YAAM;AACf,cAAM1B,GAAN;AACD,OAFD,EAEG,GAFH;AAGD;;AAED;;;;;;6BAIwB;AAAA;;AAAA,UAAhB2B,KAAgB,uEAAR,EAAQ;AAAA,UAAJC,EAAI;;AACtBD,cAAQ,sBAAM,EAAN,EAAUpD,cAAV,EAA0BoD,KAA1B,CAAR;;AAEA,+BAAOjC,IAAP,CAAY,+BAAZ,EAA6CiC,KAA7C;;AAEA,+BAAOjC,IAAP,CAAY,mCAAZ;;AAEA,UAAImC,cAAc,qBAAgB;AAChCC,+BADgC;AAEhCC,gBAAQ,qBAAgB,MAAhB;AAFwB,OAAhB,CAAlB;;AAKA,WAAKzB,MAAL,CAAYF,IAAZ,CAAiByB,WAAjB;;AAEA,aAAOA,YAAYG,KAAZ,GAAoBC,IAApB,CAAyB,YAAM;AACpC,YAAI,CAACN,MAAMO,KAAX,EAAkBP,MAAMO,KAAN,GAAc,EAAd,CADkB,CACD;AACnCP,cAAMO,KAAN,CAAYzD,IAAZ,GAAmBoD,YAAYpD,IAA/B;AACAkD,cAAMO,KAAN,CAAYvD,IAAZ,GAAmBkD,YAAYlD,IAA/B;;AAEA,YAAMwD,uBAAuB,uBAAoBN,WAApB,CAA7B;AACA,YAAMO,mBAAmB,mBAAgBP,WAAhB,CAAzB;AACA,YAAMQ,uBAAuB,8BAAoBR,WAApB,CAA7B;AACA,YAAMS,oBAAoB,wBAAiBT,WAAjB,CAA1B;;AAEAA,oBAAYU,WAAZ,CAAwB,UAAxB,sBAAqDJ,oBAArD;AACAN,oBAAYU,WAAZ,CAAwB,MAAxB,kBAA6CH,gBAA7C;AACAP,oBAAYU,WAAZ,wDAA2DF,oBAA3D;AACAR,oBAAYU,WAAZ,4CAAqDD,iBAArD;;AAEA,iCAAO5C,IAAP,CAAY,8CAAZ;;AAEA,eAAO,OAAK8C,mBAAL,CAAyBb,MAAMnD,MAA/B,EAAuC,UAACwB,GAAD,EAAMyC,MAAN,EAAc9D,IAAd,EAAoBF,IAApB,EAA6B;AACzE,cAAIuB,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;;AAET;AACAnE,kBAAQC,GAAR,CAAY4G,mBAAZ,GAAkCjE,IAAlC;AACA5C,kBAAQC,GAAR,CAAY6G,mBAAZ,GAAkChE,IAAlC;;AAEA,cAAI,CAACgD,MAAMnD,MAAX,EAAmBmD,MAAMnD,MAAN,GAAe,EAAf;AACnBmD,gBAAMnD,MAAN,CAAaC,IAAb,GAAoBA,IAApB;AACAkD,gBAAMnD,MAAN,CAAaG,IAAb,GAAoBA,IAApB;AACAgD,gBAAM/B,QAAN,GAAiB,EAAEgD,iBAAejE,IAAf,SAAuBF,IAAzB,EAAjB;;AAEA,iBAAK8B,OAAL,CAAaH,IAAb,CAAkBqC,MAAlB;;AAEAA,iBAAOhD,EAAP,CAAU,WAAV,EAAuB,UAACoD,SAAD,EAAYC,IAAZ,EAAkB/E,KAAlB,EAAyBiD,MAAzB,EAAiC+B,MAAjC,EAA4C;AACjE,qCAAO9B,MAAP,mCAA8C6B,IAA9C,SAAsD/E,KAAtD;;AAEA;AACA,iBAAK,IAAIiF,IAAI,OAAKxC,OAAL,CAAayC,MAAb,GAAsB,CAAnC,EAAsCD,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;AACjD,kBAAIE,SAAS,OAAK1C,OAAL,CAAawC,CAAb,CAAb;AACA,kBAAIE,OAAOH,MAAX,EAAmB;AACjB,oBAAIG,OAAOH,MAAP,CAAchF,KAAd,KAAwBA,KAAxB,IAAiCmF,OAAOH,MAAP,CAAc/B,MAAd,KAAyBA,MAA9D,EAAsE;AACpE,sBAAIkC,OAAOC,UAAP,KAAsB,aAAUC,IAApC,EAA0C;AACxCF,2BAAOG,KAAP;AACD;AACD,yBAAK7C,OAAL,CAAa8C,MAAb,CAAoBN,CAApB,EAAuB,CAAvB;AACD;AACF;AACF;;AAEDH,sBAAUE,MAAV,CAAiBQ,EAAjB,GAAsBhE,KAAtB;AACA,gBAAMiE,QAAQ,OAAKhD,OAAL,CAAaJ,IAAb,CAAkByC,SAAlB,IAA+B,CAA7C;;AAEAA,sBAAUY,MAAV,GAAmBD,KAAnB;;AAEAX,sBAAUpD,EAAV,CAAa,OAAb,EAAsB,YAAM;AAC1B,uCAAOwB,MAAP,mCAA8C6B,IAA9C,SAAsD/E,KAAtD;;AAEA;AACA,mBAAK,IAAI2F,IAAI,OAAKlD,OAAL,CAAayC,MAAb,GAAsB,CAAnC,EAAsCS,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;AACjD,oBAAIR,UAAS,OAAK1C,OAAL,CAAakD,CAAb,CAAb;AACA,oBAAIR,YAAWL,SAAf,EAA0B;AACxB,yBAAKrC,OAAL,CAAa8C,MAAb,CAAoBI,CAApB,EAAuB,CAAvB;AACD;AACF;AACF,aAVD;AAWD,WAhCD;;AAkCAjB,iBAAOhD,EAAP,CAAU,SAAV,EAAqB,UAACqD,IAAD,EAAO/E,KAAP,EAAciD,MAAd,EAAsBd,OAAtB,EAA+B2C,SAA/B,EAA0CJ,MAA1C,EAAkDkB,SAAlD,EAAgE;AACnF;AACA,gBAAI,CAAC3C,MAAD,IAAWd,QAAQc,MAAvB,EAA+B;AAC7BA,uBAASd,QAAQc,MAAjB;AACD;;AAED,gBAAId,QAAQ4C,IAAR,KAAiB,WAArB,EAAkC;AAChC;AACA,qBAAKc,oBAAL,CAA0B1D,OAA1B,EAAmCc,MAAnC,EAA2CjD,KAA3C,EAAkD8E,SAAlD;AACD,aAHD,MAGO,IAAI3C,QAAQqD,EAAR,IAAc,OAAK9C,QAAL,CAAcP,QAAQqD,EAAtB,CAAlB,EAA6C;AAClD;AADkD,kBAE1CM,QAF0C,GAE7B,OAAKpD,QAAL,CAAcP,QAAQqD,EAAtB,CAF6B,CAE1CM,QAF0C;;AAGlD,qBAAO,OAAKpD,QAAL,CAAcP,QAAQqD,EAAtB,CAAP;AACA,qBAAOM,SAAS3D,QAAQuB,KAAjB,EAAwBvB,QAAQ4D,MAAhC,EAAwC5D,OAAxC,CAAP;AACD,aALM,MAKA,IAAIA,QAAQ6D,MAAZ,EAAoB;AAAE;AAC3B;AACA,qBAAKC,oBAAL,CAA0BlB,IAA1B,EAAgC/E,KAAhC,EAAuCiD,MAAvC,EAA+Cd,OAA/C,EAAwDyD,SAAxD;AACD;AACF,WAlBD;;AAoBA,iBAAKM,aAAL,CAAmB,OAAK5D,QAAxB,EAAkCsB,KAAlC,EAAyC,UAAC3B,GAAD,EAAMkE,OAAN,EAAkB;AACzD,gBAAIlE,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,mBAAKK,QAAL,CAAcD,IAAd,CAAmB+D,KAAnB,CAAyB,OAAK9D,QAA9B,EAAwC6D,OAAxC;AACA,mBAAOtC,GAAG,IAAH,EAASjD,IAAT,EAAeF,IAAf,EAAqBgE,MAArB,EAA6ByB,OAA7B,EAAsCvC,MAAMO,KAA5C,CAAP;AACD,WAJD;AAKD,SAzEM,CAAP;AA0ED,OA3FM,CAAP;AA4FD;;;2CAEuBhC,O,EAASnC,K,EAAO;AACtC,UAAI,CAACpB,wBAAwBuD,QAAQ6D,MAAhC,CAAL,EAA8C;AAC5C,iCAAO9C,MAAP,0BAAgCf,QAAQ6D,MAAxC,aAAsDhG,KAAtD,YAAkEqG,KAAKC,SAAL,CAAenE,QAAQ6C,MAAvB,CAAlE;AACD;AACF;;;0CAEsB7C,O,EAASF,G,EAAK8D,M,EAAQ/F,K,EAAO;AAClD,UAAI,CAACpB,wBAAwBuD,QAAQ6D,MAAhC,CAAL,EAA8C;AAC5C,YAAK/D,OAAOA,IAAIE,OAAZ,IAAyBF,OAAOA,IAAIC,KAAxC,EAAgD;AAC9C,mCAAOgB,MAAP,iBAA4Bf,QAAQ6D,MAApC,gBAAoD/D,IAAIC,KAAJ,IAAaD,IAAIE,OAArE;AACD;AACD,iCAAOe,MAAP,0BAAgCf,QAAQ6D,MAAxC,aAAsDhG,KAAtD;AACD;AACF;;;kDAE8B;AAAA;;AAC7B,UAAI,KAAK6C,WAAT,EAAsB,OAAO,KAAM,CAAb,CADO,CACS;AACtC,UAAI0D,oBAAoB,KAAKxD,eAAL,CAAqByD,KAArB,EAAxB;AACA,UAAI,CAACD,iBAAL,EAAwB,OAAO5C,WAAW,KAAKX,2BAAL,CAAiCyD,IAAjC,CAAsC,IAAtC,CAAX,EAAwD,EAAxD,CAAP;;AAHK,UAKvB1B,IALuB,GAKcwB,iBALd,CAKvBxB,IALuB;AAAA,UAKjB/E,KALiB,GAKcuG,iBALd,CAKjBvG,KALiB;AAAA,UAKViD,MALU,GAKcsD,iBALd,CAKVtD,MALU;AAAA,UAKFd,OALE,GAKcoE,iBALd,CAKFpE,OALE;AAAA,UAKO0B,EALP,GAKc0C,iBALd,CAKO1C,EALP;;;AAO7B,WAAK6C,sBAAL,CAA4BvE,OAA5B,EAAqCnC,KAArC;;AAEA;AACA;AACA;AACA,UAAImC,QAAQ4C,IAAR,KAAiB,QAArB,EAA+B;AAC7B,eAAO,KAAK4B,kBAAL,CAAwB5B,IAAxB,EAA8B/E,KAA9B,EAAqCiD,MAArC,EAA6Cd,QAAQ6D,MAArD,EAA6D7D,QAAQ6C,MAArE,EAA6E,UAAC/C,GAAD,EAAM8D,MAAN,EAAiB;AACnG,iBAAKa,qBAAL,CAA2BzE,OAA3B,EAAoCF,GAApC,EAAyC8D,MAAzC,EAAiD/F,KAAjD;AACA6D,aAAG5B,GAAH,EAAQ8D,MAAR;AACA,iBAAK/C,2BAAL,GAHmG,CAGhE;AACpC,SAJM,CAAP;AAKD;;AAED,aAAO,KAAK6D,cAAL,CAAoB1E,QAAQ6D,MAA5B,EAAoC7D,QAAQ6C,MAAR,IAAkB,EAAtD,EAA0D,UAAC/C,GAAD,EAAM8D,MAAN,EAAiB;AAChF,eAAKa,qBAAL,CAA2BzE,OAA3B,EAAoCF,GAApC,EAAyC8D,MAAzC,EAAiD/F,KAAjD;AACA6D,WAAG5B,GAAH,EAAQ8D,MAAR;AACA,eAAK/C,2BAAL,GAHgF,CAG7C;AACpC,OAJM,CAAP;AAKD;;;yCAEqB+B,I,EAAM/E,K,EAAOiD,M,EAAQd,O,EAAS0B,E,EAAI;AACtD;AACA,UAAIhF,sCAAsCsD,QAAQ6D,MAA9C,CAAJ,EAA2D;AACzD,YAAI7D,QAAQ4C,IAAR,KAAiB,QAArB,EAA+B;AAC7B,iBAAO,KAAK4B,kBAAL,CAAwB5B,IAAxB,EAA8B/E,KAA9B,EAAqCiD,MAArC,EAA6Cd,QAAQ6D,MAArD,EAA6D7D,QAAQ6C,MAArE,EAA6EnB,EAA7E,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,KAAKgD,cAAL,CAAoB1E,QAAQ6D,MAA5B,EAAoC7D,QAAQ6C,MAA5C,EAAoDnB,EAApD,CAAP;AACD;AACF,OAND,MAMO;AACL,aAAKd,eAAL,CAAqBV,IAArB,CAA0B,EAAE0C,UAAF,EAAQ/E,YAAR,EAAeiD,cAAf,EAAuBd,gBAAvB,EAAgC0B,MAAhC,EAA1B;AACD;AACF;;;yCAEqB1B,O,EAASc,M,EAAQjD,K,EAAO8E,S,EAAW;AACvD,WAAKrC,OAAL,CAAab,OAAb,CAAqB,UAACuD,MAAD,EAAY;AAC/B,YAAIL,aAAaK,WAAWL,SAA5B,EAAuC,OAAO,KAAM,CAAb,CADR,CACwB;AACvD,YAAIK,OAAOC,UAAP,KAAsB,aAAUC,IAApC,EAA0C,OAAO,KAAM,CAAb;AAC1C,eAAOlD,QAAQqD,EAAf,CAH+B,CAGb;AAClBsB,4BAAoB3B,MAApB,EAA4B,sBAAMhD,OAAN,EAAe,EAAEc,cAAF,EAAUjD,YAAV,EAAf,CAA5B;AACD,OALD;AAMD;;;gCAEYgG,M,EAAQtC,K,EAAOqD,M,EAAQ;AAClC,+BAAO7D,MAAP,yBAAoC8C,MAApC,EAA8CtC,KAA9C,EAAqDqD,MAArD;AACA,UAAI,CAAClJ,KAAL,EAAY,OAAO,IAAP;AACZ,UAAImI,UAAU9H,0BAA0B8H,MAA1B,CAAd,EAAiD,OAAO,IAAP;AACjD,UAAI,CAACtC,KAAL,EAAY,OAAO,IAAP;AACZ,UAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6B,EAAEA,iBAAiBL,KAAnB,CAAjC,EAA4D;AAC1D,YAAI2D,QAAQ,IAAI3D,KAAJ,CAAUK,MAAMvB,OAAN,kBAA6B6D,MAA7B,WAAV,CAAZ;AACA,YAAItC,MAAMxB,KAAV,EAAiB8E,MAAM9E,KAAN,GAAcwB,MAAMxB,KAApB;AACjBwB,gBAAQsD,KAAR;AACD,OAJD,MAIO,IAAI,OAAOtD,KAAP,KAAiB,QAArB,EAA+B;AACpCA,gBAAQ,IAAIL,KAAJ,CAAUK,KAAV,CAAR,CADoC,CACX;AAC1B;AACD,aAAO7F,MAAMoJ,gBAAN,CAAuBvD,KAAvB,EAA8BqD,MAA9B,CAAP;AACD;;;mCAEef,M,EAAyB;AAAA,UAAjBhB,MAAiB,uEAAR,EAAQ;AAAA,UAAJnB,EAAI;;AACvC,UAAI,OAAO,KAAKmC,MAAL,CAAP,KAAwB,UAA5B,EAAwC,OAAOnC,GAAG,IAAIR,KAAJ,+BAAqC2C,MAArC,QAAH,CAAP;AACxC,aAAO,KAAKA,MAAL,EAAaI,KAAb,CAAmB,IAAnB,EAAyBpB,OAAOkC,MAAP,CAAc,UAACxD,KAAD,EAAQqC,MAAR,EAAmB;AAC/D,YAAIrC,KAAJ,EAAW,OAAOG,GAAGH,KAAH,CAAP;AACX,eAAOG,GAAG,IAAH,EAASkC,MAAT,CAAP;AACD,OAH+B,CAAzB,CAAP;AAID;;;+CAE2B9C,M,EAAQ+C,M,EAAQmB,K,EAAOC,O,EAASvD,E,EAAI;AAAA;;AAC9D,UAAI,CAACZ,MAAL,EAAa,OAAOY,GAAG,IAAIR,KAAJ,CAAU,6BAAV,CAAH,CAAP;AACb,UAAI,CAAC8D,KAAL,EAAY,OAAOtD,GAAG,IAAIR,KAAJ,CAAU,4BAAV,CAAH,CAAP;AACZ,UAAI+D,WAAW,CAAf,EAAkB;AAChB,eAAOvD,GAAG,IAAIR,KAAJ,mCAA0CgD,KAAKC,SAAL,CAAea,KAAf,CAA1C,YAAsElE,MAAtE,iBAAH,CAAP;AACD;;AAED;AACA;AACA,UAAIkE,MAAMnH,KAAN,KAAgB,SAApB,EAA+B;AAC7B,YAAMqH,gBAAgB,sBAAK,KAAK5E,OAAV,EAAmB,EAAEuC,QAAQmC,KAAV,EAAnB,CAAtB;AACA,YAAIE,aAAJ,EAAmB;AACjB,iBAAOxD,GAAG,IAAH,EAASwD,aAAT,CAAP;AACD;AACF,OALD,MAKO;AACL,YAAMC,kBAAkB,sBAAO,KAAK7E,OAAZ,EAAqB,EAAEuC,QAAQ,EAAE/B,cAAF,EAAV,EAArB,CAAxB;;AAEA;AACA;AACA;AACA;;AAEA,YAAIqE,mBAAmBA,gBAAgBpC,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,cAAMqC,iBAAiB,sBAAKD,eAAL,EAAsB,EAAEtC,QAAQmC,KAAV,EAAtB,CAAvB;AACA,cAAII,cAAJ,EAAoB;AAClB,mBAAO1D,GAAG,IAAH,EAAS0D,cAAT,CAAP;AACD;AACF;AACF;AACD,aAAO5D,WAAW,YAAM;AACtB,eAAO,OAAKR,0BAAL,CAAgCF,MAAhC,EAAwC+C,MAAxC,EAAgDmB,KAAhD,EAAuDC,UAAUhH,cAAjE,EAAiFyD,EAAjF,CAAP;AACD,OAFM,EAEJzD,cAFI,CAAP;AAGD;;;wDAEoC6C,M,EAA6C;AAAA,UAArCkE,KAAqC,uEAA7B,EAA6B;AAAA,UAAzBnB,MAAyB;;AAAA;;AAAA,UAAjBhB,MAAiB,uEAAR,EAAQ;AAAA,UAAJnB,EAAI;;AAChF,aAAO,KAAKV,0BAAL,CAAgCF,MAAhC,EAAwC+C,MAAxC,EAAgDmB,KAAhD,EAAuD9G,UAAvD,EAAmE,UAAC4B,GAAD,EAAMkD,MAAN,EAAiB;AACzF,YAAIlD,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,eAAO,OAAKuF,gBAAL,CAAsBrC,MAAtB,EAA8Ba,MAA9B,EAAsChB,MAAtC,EAA8C,UAACtB,KAAD,EAAQ+D,QAAR,EAAqB;AACxE,cAAI/D,KAAJ,EAAW;AACT,mBAAKgE,WAAL,CAAiB1B,MAAjB,EAAyBtC,KAAzB,EAAgC,EAAEiE,MAAMR,KAAR,EAAhC;AACA,mBAAOtD,GAAGH,KAAH,CAAP;AACD;AACD,iBAAOG,GAAG,IAAH,EAAS4D,QAAT,CAAP;AACD,SANM,CAAP;AAOD,OATM,CAAP;AAUD;;;qCAEiB3C,S,EAAWkB,M,EAA+B;AAAA,UAAvBhB,MAAuB,uEAAd,EAAc;AAAA,UAAVc,QAAU;;AAC1D,UAAI3D,UAAU,EAAE6D,cAAF,EAAUhB,cAAV,EAAd;AACA,aAAO,KAAK4C,iBAAL,CAAuB9C,SAAvB,EAAkC3C,OAAlC,EAA2C2D,QAA3C,CAAP;AACD;;;sCAEkBhB,S,EAAW3C,O,EAAS2D,Q,EAAU;AAC/C,UAAI3D,QAAQqD,EAAR,KAAeqC,SAAnB,EAA8B1F,QAAQqD,EAAR,QAAgBsC,KAAKC,MAAL,EAAhB;AAC9B,WAAKrF,QAAL,CAAcP,QAAQqD,EAAtB,IAA4B,EAAEV,oBAAF,EAAa3C,gBAAb,EAAsB2D,kBAAtB,EAA5B;AACA,UAAIhB,UAAUM,UAAV,KAAyB,aAAUC,IAAvC,EAA6C;AAC3C,YAAM2C,OAAO3B,KAAKC,SAAL,CAAenE,OAAf,CAAb;AACA,eAAO2C,UAAUmD,IAAV,CAAeD,IAAf,CAAP;AACD,OAHD,MAGO;AACL,iCAAOrG,IAAP,+EAAuFQ,QAAQ6D,MAAR,IAAkB7D,QAAQqD,EAAjH;AACAM,mBAFK,CAEM;AACZ;AACF;;;+BAEW;AACV,+BAAOnE,IAAP,CAAY,mCAAZ;AACA,WAAKW,QAAL,CAAcV,OAAd,CAAsB,UAACsG,OAAD,EAAa;AACjC,YAAIA,QAAQC,IAAZ,EAAkB;AAChB,cAAID,QAAQE,KAAZ,EAAmBF,QAAQE,KAAR,CAAcC,KAAd;AACnB;AACA;AACA,mCAAO1G,IAAP,CAAY,qCAAZ;AACAuG,kBAAQC,IAAR,CAAa,SAAb;AACD,SAND,MAMO,IAAID,QAAQnG,IAAZ,EAAkB;AACvB,mCAAOJ,IAAP,CAAY,yBAAZ;AACAuG,kBAAQnG,IAAR;AACD;AACF,OAXD;AAYA,WAAKQ,MAAL,CAAYX,OAAZ,CAAoB,UAACuC,KAAD,EAAW;AAC7B,iCAAOxC,IAAP,CAAY,0BAAZ;AACAwC,cAAMmB,KAAN;AACD,OAHD;AAIA,WAAK9C,OAAL,CAAaZ,OAAb,CAAqB,UAAC8C,MAAD,EAAY;AAC/B,iCAAO/C,IAAP,CAAY,2BAAZ;AACA+C,eAAOY,KAAP;AACD,OAHD;AAIA,WAAK7C,OAAL,CAAab,OAAb,CAAqB,UAACuD,MAAD,EAAY;AAC/B,YAAIA,OAAOC,UAAP,KAAsB,aAAUC,IAApC,EAA0C,OAAO,KAAM,CAAb;AAC1C,iCAAO1D,IAAP,CAAY,2CAAZ;AACAmF,4BAAoB3B,MAApB,EAA4B,EAAEmD,QAAQ,OAAV,EAA5B;AACD,OAJD;AAKA,WAAKzF,WAAL,GAAmB,IAAnB;AACD;;;mCAEeI,M,EAAQY,E,EAAI;AAC1B,WAAKgC,oBAAL,CAA0B,EAAEd,MAAM,WAAR,EAAqBvF,MAAM,kBAA3B,EAA1B;AACAqE;AACD;;AAED;;;;;;oCAIiBZ,M,EAAQY,E,EAAI;AAC3B,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,iBAA3D,EAA8E,EAA9E,EAAkF,UAACgC,GAAD,EAAMuG,WAAN,EAAsB;AAC7G,YAAIvG,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,eAAO4B,GAAG,IAAH,EAAS2E,WAAT,CAAP;AACD,OAHM,CAAP;AAID;;;kDAE8BvF,M,EAAQY,E,EAAI;AACzC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,+BAA3D,EAA4F,EAA5F,EAAgG4D,EAAhG,CAAP;AACD;;AAED;;;;;;;;;;sCAOmB4E,gB,QAAoGC,a,EAAeC,a,EAAeC,M,EAAQ;AAAA,UAAtHC,YAAsH,QAAtHA,YAAsH;AAAA,UAAxGC,WAAwG,QAAxGA,WAAwG;AAAA,UAA3FC,mBAA2F,QAA3FA,mBAA2F;AAAA,UAAtEC,gBAAsE,QAAtEA,gBAAsE;AAAA,UAApDC,UAAoD,QAApDA,UAAoD;;AAAA;;AAC3J,UAAMC,iBAAiB;AACrBL,kCADqB;AAErBC,gCAFqB;AAGrBC,gDAHqB;AAIrBC,0CAJqB;AAKrBG,qBAAaV,gBALQ;AAMrBW,kBAAUV,aANW;AAOrBW,kBAAUV;;AAGZ;AAVuB,OAAvB,CAWA,IAAI,CAACO,eAAeF,gBAApB,EAAsCE,eAAeF,gBAAf,GAAkC,KAAKM,GAAL,CAAS,kBAAT,CAAlC;AACtC,UAAI,CAACJ,eAAeD,UAApB,EAAgCC,eAAeD,UAAf,GAA4B,KAAKK,GAAL,CAAS,UAAT,CAA5B;;AAEhC;AACA;AACAJ,qBAAeK,cAAf,GAAgC,IAAhC;;AAEA,UAAIC,sBAAJ,CAnB2J,CAmBzI;;AAElB,aAAO,gBAAMC,MAAN,CAAa,CAClB,UAAC5F,EAAD,EAAQ;AACN,eAAO,OAAK6F,0BAAL,CAAgC,UAACzH,GAAD,EAAM+G,gBAAN,EAA2B;AAChE,cAAI/G,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACTiH,yBAAeF,gBAAf,GAAkCA,gBAAlC;AACA,iBAAOnF,IAAP;AACD,SAJM,CAAP;AAKD,OAPiB,EAQlB,UAACA,EAAD,EAAQ;AACN,eAAOpG,cAAckM,aAAd,CAA4BT,cAA5B,EAA4C,UAACjH,GAAD,EAAM2H,cAAN,EAAyB;AAC1E,cAAI3H,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACTuH,0BAAgBI,cAAhB;AACA,iBAAO/F,IAAP;AACD,SAJM,CAAP;AAKD,OAdiB,EAelB,UAACA,EAAD,EAAQ;AACN;AACA,eAAO,uBAAIgG,MAAJ,CAAWL,aAAX,EAA0B,UAACM,eAAD,EAAqB;AACpD,cAAI,CAACA,eAAL,EAAsB,OAAOjG,GAAG,IAAIR,KAAJ,CAAU,+BAAV,CAAH,CAAP;AACtB,iBAAOQ,IAAP;AACD,SAHM,CAAP;AAID,OArBiB,EAsBlB,UAACA,EAAD,EAAQ;AACN,eAAO,OAAKqC,aAAL,CAAmB,OAAK5D,QAAxB,EAAkC,EAAEW,QAAQuG,aAAV,EAAlC,EAA6D,UAACvH,GAAD,EAAMkE,OAAN,EAAkB;AACpF,cAAIlE,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,iBAAKK,QAAL,CAAcD,IAAd,CAAmB+D,KAAnB,CAAyB,OAAK9D,QAA9B,EAAwC6D,OAAxC;AACA,iBAAOtC,IAAP;AACD,SAJM,CAAP;AAKD,OA5BiB,CAAb,EA6BJ,UAAC5B,GAAD,EAAS;AACV,YAAIA,GAAJ,EAAS;AACP,iBAAKyF,WAAL,CAAiB,mBAAjB,EAAsCzF,GAAtC;AACA,iBAAO2G,OAAO3G,GAAP,CAAP;AACD;;AAED;AACA,YAAM8H,wBAAwBb,eAAeE,QAAf,IAA2B,OAAKE,GAAL,CAAS,UAAT,CAAzD;AACA,YAAMU,wBAAwBd,eAAeG,QAAf,IAA2B,OAAKC,GAAL,CAAS,UAAT,CAAzD;;AAEA;AACA,YAAMW,sBAAsB;AAC1BjB,4BAAkBE,eAAeF,gBADP;AAE1BI,oBAAUW,qBAFgB;AAG1BV,oBAAUW,qBAHgB;AAI1Bf;AAJ0B,SAA5B;;AAOA,eAAO,OAAKiB,gBAAL,CAAsBzB,gBAAtB,EAAwCe,aAAxC,EAAuDO,qBAAvD,EAA8EC,qBAA9E,EAAqGC,mBAArG,EAA0H,UAAChI,GAAD,EAAS;AACxI,cAAIA,GAAJ,EAAS,OAAO2G,OAAO3G,GAAP,CAAP;AACT;AACA,iBAAKW,QAAL,CAAc4G,aAAd,IAA+B;AAC7BhK,kBAAMiJ,gBADuB;AAE7BxF,oBAAQuG,aAFqB;AAG7BJ,sBAAUY,qBAHmB;AAI7BX,sBAAUW,qBAJmB;AAK7BG,0BAAcF,oBAAoBjB,gBALL;AAM7BoB,qBAASH;AANoB,WAA/B;;AASA,cAAIxB,gBAAJ,EAAsB;AACpB;AACA,mBAAK7F,QAAL,CAAc6F,gBAAd,IAAkC,OAAK7F,QAAL,CAAc4G,aAAd,CAAlC;AACD;;AAED,iBAAOZ,OAAO,IAAP,EAAaY,aAAb,CAAP;AACD,SAlBM,CAAP;AAmBD,OAlEM,CAAP;AAmED;;AAED;;;;;;iCAGcL,W,EAAa;AACzB,UAAIxH,OAAO,KAAK4B,iBAAL,CAAuB4F,WAAvB,CAAX;AACA,UAAI,CAACxH,IAAL,EAAW,OAAO,IAAP;AACX,aAAOA,KAAKsB,MAAZ;AACD;;;sCAEkBoH,mB,EAAqB;AACtC,aAAO,KAAKzH,QAAL,CAAcyH,mBAAd,CAAP;AACD;;AAED;;;;;;;qCAIkB5B,gB,EAAkBxF,M,EAAQyF,a,EAAeC,a,EAAeO,c,EAAgBrF,E,EAAI;AAC5F,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,kBAA3D,EAA+E,CAACwI,gBAAD,EAAmBC,aAAnB,EAAkCC,aAAlC,EAAiDO,cAAjD,CAA/E,EAAiJrF,EAAjJ,CAAP;AACD;;;iCAEa4E,gB,EAAkBxF,M,EAAQY,E,EAAI;AAC1C,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,cAA3D,EAA2E,EAA3E,EAA+E4D,EAA/E,CAAP;AACD;;;mCAEeZ,M,EAAQK,W,EAAaO,E,EAAI;AAAA;;AACvC;AACA;AACA;AACA,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,kBAA3D,EAA+E,CAACqD,YAAY9D,IAAb,EAAmB8D,YAAY8F,QAA/B,EAAyC9F,YAAY+F,QAArD,EAA+D/F,YAAY8G,OAA3E,CAA/E,EAAoK,UAACnI,GAAD,EAAS;AAClL,YAAIA,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,eAAO,OAAKsG,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,gBAA3D,EAA6E,EAA7E,EAAiF4D,EAAjF,CAAP;AACD,OAHM,CAAP;AAID;;;wCAEoBA,E,EAAI;AACvB,UAAIyG,SAAS,uBAAUC,MAAV,CAAiBC,eAAjB,EAAb;AACA,UAAI,CAACF,MAAL,EAAa;AACX,eAAOzG,GAAG,IAAH,EAAS,EAAE4G,UAAU,KAAZ,EAAT,CAAP;AACD;AACD,aAAO,KAAKf,0BAAL,CAAgC,UAACzH,GAAD,EAAM+G,gBAAN,EAA2B;AAChE,YAAI/G,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,YAAMmH,WAAW,uBAAUmB,MAAV,CAAiBG,SAAjB,EAAjB;AACA,2BAASC,cAAT,CAAwB,EAAEC,aAAaxB,QAAf,EAAxB;AACA,YAAIvL,KAAJ,EAAW;AACTA,gBAAMgN,UAAN,CAAiB;AACfC,kBAAM,EAAEC,OAAO3B,QAAT,EADS;AAEfzB,kBAAM,EAAEyB,kBAAF;AAFS,WAAjB;AAID;AACD,eAAOvF,GAAG,IAAH,EAAS;AACd4G,oBAAU,IADI;AAEdrB,oBAAUA,QAFI;AAGd4B,qBAAW,uBAAUT,MAAV,CAAiBU,YAAjB,EAHG;AAIdjC;AAJc,SAAT,CAAP;AAMD,OAhBM,CAAP;AAiBD;;;qCAEiBI,Q,EAAUC,Q,EAAUxF,E,EAAI;AAAA;;AACxC,WAAKqH,GAAL,CAAS,kBAAT,EAA6B,IAA7B,EADwC,CACL;AACnC,aAAO,2BAASJ,IAAT,CAAcK,YAAd,CAA2B/B,QAA3B,EAAqCC,QAArC,EAA+C,UAAC+B,OAAD,EAAUC,YAAV,EAAwBC,YAAxB,EAAyC;AAC7F,YAAIF,OAAJ,EAAa,OAAOvH,GAAGuH,OAAH,CAAP;AACb,YAAIE,aAAaC,UAAb,KAA4B,GAAhC,EAAqC,OAAO1H,GAAG,IAAIR,KAAJ,CAAU,cAAV,CAAH,CAAP;;AAErC,YAAIiI,aAAaC,UAAb,GAA0B,GAA9B,EAAmC;AACjC,cAAMC,YAAY,IAAInI,KAAJ,uBAA8BiI,aAAaC,UAA3C,CAAlB;AACA,iBAAK7D,WAAL,CAAiB,kBAAjB,EAAqC8D,SAArC;AACA,iBAAO3H,GAAG2H,SAAH,CAAP;AACD;;AAED,YAAIF,aAAaC,UAAb,GAA0B,GAA9B,EAAmC;AACjC,cAAME,kBAAkB,IAAIpI,KAAJ,uBAA8BiI,aAAaC,UAA3C,CAAxB;AACA,iBAAO1H,GAAG4H,eAAH,CAAP;AACD;;AAED,YAAI,CAACJ,YAAL,EAAmB,OAAOxH,GAAG,IAAIR,KAAJ,CAAU,yBAAV,CAAH,CAAP;AACnB,eAAK6H,GAAL,CAAS,UAAT,EAAqB9B,QAArB;AACA,eAAK8B,GAAL,CAAS,UAAT,EAAqB7B,QAArB;AACA,eAAK6B,GAAL,CAAS,mBAAT,EAA8BG,aAAaK,KAA3C;AACA,+BAAUnB,MAAV,CAAiBoB,YAAjB,CAA8BN,aAAaK,KAA3C;AACA,+BAAUnB,MAAV,CAAiBqB,SAAjB,CAA2BxC,QAA3B;AACA,2BAASuB,cAAT,CAAwB,EAAEC,aAAaxB,QAAf,EAAxB;AACA,YAAIvL,KAAJ,EAAW;AACTA,gBAAMgN,UAAN,CAAiB;AACfC,kBAAM,EAAEC,OAAO3B,QAAT,EADS;AAEfzB,kBAAM,EAAEyB,kBAAF;AAFS,WAAjB;AAID;AACD,eAAO,OAAKM,0BAAL,CAAgC,UAACzH,GAAD,EAAM+G,gBAAN,EAA2B;AAChE,cAAI/G,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,iBAAO4B,GAAG,IAAH,EAAS;AACd4G,sBAAU,IADI;AAEdrB,sBAAUA,QAFI;AAGd4B,uBAAWK,aAAaK,KAHV;AAId1C;AAJc,WAAT,CAAP;AAMD,SARM,CAAP;AASD,OArCM,CAAP;AAsCD;;;+CAE2BnF,E,EAAI;AAAA;;AAC9B,UAAI,KAAKyF,GAAL,CAAS,kBAAT,CAAJ,EAAkC,OAAOzF,GAAG,IAAH,EAAS,KAAKyF,GAAL,CAAS,kBAAT,CAAT,CAAP;AAClC,+BAAO3H,IAAP,CAAY,wDAAZ;AACA,UAAIqJ,YAAY,uBAAUT,MAAV,CAAiBU,YAAjB,EAAhB;AACA,aAAO,2BAASd,YAAT,CAAsB0B,IAAtB,CAA2Bb,SAA3B,EAAsC,UAACc,MAAD,EAASC,SAAT,EAAoBC,WAApB,EAAoC;AAC/E,YAAIF,MAAJ,EAAY,OAAOjI,GAAG,IAAIR,KAAJ,CAAU,oBAAV,CAAH,CAAP;AACZ,YAAI2I,YAAYT,UAAZ,KAA2B,GAA/B,EAAoC,OAAO1H,GAAG,IAAIR,KAAJ,CAAU,2BAAV,CAAH,CAAP;AACpC,YAAI2I,YAAYT,UAAZ,GAAyB,GAA7B,EAAkC,OAAO1H,GAAG,IAAIR,KAAJ,yBAAgC2I,YAAYT,UAA5C,CAAH,CAAP;AAClC,YAAI,CAACQ,SAAD,IAAcA,UAAU7G,MAAV,GAAmB,CAArC,EAAwC,OAAOrB,GAAG,IAAIR,KAAJ,CAAU,uBAAV,CAAH,CAAP;AACxC;AACA,YAAI2F,mBAAmB+C,UAAU,CAAV,EAAaE,IAApC;AACA,iCAAOtK,IAAP,CAAY,+BAAZ,EAA6CqH,gBAA7C;AACA,eAAKkC,GAAL,CAAS,kBAAT,EAA6BlC,gBAA7B;AACA,eAAOnF,GAAG,IAAH,EAAS,OAAKyF,GAAL,CAAS,kBAAT,CAAT,CAAP;AACD,OAVM,CAAP;AAWD;;;iCAEazF,E,EAAI;AAAA;;AAChB,+BAAOlC,IAAP,CAAY,6BAAZ;AACA,UAAIqJ,YAAY,uBAAUT,MAAV,CAAiBU,YAAjB,EAAhB;AACA,aAAO,2BAASiB,OAAT,CAAiBL,IAAjB,CAAsBb,SAAtB,EAAiC,UAACmB,cAAD,EAAiBC,YAAjB,EAAkC;AACxE,YAAID,cAAJ,EAAoB;AAClB,kBAAKzE,WAAL,CAAiB,cAAjB,EAAiCyE,cAAjC;AACA,iBAAOtI,GAAGsI,cAAH,CAAP;AACD;AACD,YAAIE,YAAYD,aAAaE,GAAb,CAAiBC,kCAAjB,CAAhB;AACA,iCAAO5K,IAAP,CAAY,iCAAZ,EAA+C0E,KAAKC,SAAL,CAAe+F,SAAf,CAA/C;AACA,eAAOxI,GAAG,IAAH,EAASwI,SAAT,CAAP;AACD,OARM,CAAP;AASD;;;kCAEc7M,I,EAAMqE,E,EAAI;AAAA;;AACvB,+BAAOlC,IAAP,CAAY,6BAAZ,EAA2CnC,IAA3C;AACA,UAAIwL,YAAY,uBAAUT,MAAV,CAAiBU,YAAjB,EAAhB;AACA,aAAO,2BAASiB,OAAT,CAAiBM,MAAjB,CAAwBxB,SAAxB,EAAmC,EAAEiB,MAAMzM,IAAR,EAAnC,EAAmD,UAACiN,gBAAD,EAAmBP,OAAnB,EAA+B;AACvF,YAAIO,gBAAJ,EAAsB;AACpB,kBAAK/E,WAAL,CAAiB,eAAjB,EAAkC+E,gBAAlC;AACA,iBAAO5I,GAAG4I,gBAAH,CAAP;AACD;AACD,eAAO9I,WAAW,YAAM;AACtB,iBAAOE,GAAG,IAAH,EAAS0I,mCAAmCL,OAAnC,CAAT,CAAP;AACD,SAFM,EAEJ3L,gCAFI,CAAP;AAGD,OARM,CAAP;AASD;;;kCAEcf,I,EAAMqE,E,EAAI;AAAA;;AACvB,+BAAOlC,IAAP,CAAY,6BAAZ,EAA2CnC,IAA3C;AACA,UAAIwL,YAAY,uBAAUT,MAAV,CAAiBU,YAAjB,EAAhB;AACA,aAAO,2BAASiB,OAAT,CAAiBQ,YAAjB,CAA8B1B,SAA9B,EAAyCxL,IAAzC,EAA+C,UAACmN,SAAD,EAAe;AACnE,YAAIA,SAAJ,EAAe;AACb,kBAAKjF,WAAL,CAAiB,eAAjB,EAAkCiF,SAAlC;AACA,iBAAO9I,GAAG8I,SAAH,CAAP;AACD;AACD,eAAO9I,IAAP;AACD,OANM,CAAP;AAOD;;;0CAEsBZ,M,EAAQY,E,EAAI;AACjC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,uBAA3D,EAAoF,EAApF,EAAwF4D,EAAxF,CAAP;AACD;;;gCAEYZ,M,EAAQkG,W,EAAaT,a,EAAeC,a,EAAeiE,W,EAAa/I,E,EAAI;AAC/E,UAAI,CAAC+I,WAAL,EAAkBA,cAAc,EAAd;AAClB,UAAI,CAACA,YAAY3D,UAAjB,EAA6B2D,YAAY3D,UAAZ,GAAyB,KAAKK,GAAL,CAAS,UAAT,CAAzB;AAC7B,UAAI,CAACsD,YAAY5D,gBAAjB,EAAmC4D,YAAY5D,gBAAZ,GAA+B,KAAKM,GAAL,CAAS,kBAAT,CAA/B;AACnC,+BAAO3H,IAAP,CAAY,gCAAZ,EAA8CiL,WAA9C;AACA,aAAO,KAAKrE,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,aAA3D,EAA0E,CAACkJ,WAAD,EAAcT,aAAd,EAA6BC,aAA7B,EAA4CiE,WAA5C,CAA1E,EAAoI/I,EAApI,CAAP;AACD;;;mCAEeZ,M,EAAQkG,W,EAAa0D,c,EAAgBhJ,E,EAAI;AACvD,UAAI,CAACgJ,cAAL,EAAqBA,iBAAiB,EAAjB;AACrB,UAAI,CAACA,eAAe5D,UAApB,EAAgC4D,eAAe5D,UAAf,GAA4B,KAAKK,GAAL,CAAS,UAAT,CAA5B;AAChC,UAAI,CAACuD,eAAe7D,gBAApB,EAAsC6D,eAAe7D,gBAAf,GAAkC,KAAKM,GAAL,CAAS,kBAAT,CAAlC;AACtC,+BAAO3H,IAAP,CAAY,oCAAZ,EAAkDkL,cAAlD;AACA,aAAO,KAAKtE,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,gBAA3D,EAA6E,CAACkJ,WAAD,EAAc0D,cAAd,CAA7E,EAA4GhJ,EAA5G,CAAP;AACD;;;qCAEiBZ,M,EAAQkG,W,EAAaT,a,EAAeC,a,EAAemE,Y,EAAcjJ,E,EAAI;AACrF,UAAI,CAACiJ,YAAL,EAAmBA,eAAe,EAAf;AACnB,UAAI,CAACA,aAAa7D,UAAlB,EAA8B6D,aAAa7D,UAAb,GAA0B,KAAKK,GAAL,CAAS,UAAT,CAA1B;AAC9B,UAAI,CAACwD,aAAa9D,gBAAlB,EAAoC8D,aAAa9D,gBAAb,GAAgC,KAAKM,GAAL,CAAS,kBAAT,CAAhC;AACpC,aAAO,KAAKf,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,kBAA3D,EAA+E,CAACkJ,WAAD,EAAcT,aAAd,EAA6BC,aAA7B,EAA4CmE,YAA5C,CAA/E,EAA0IjJ,EAA1I,CAAP;AACD;;;+BAEWZ,M,EAAQY,E,EAAI;AACtB,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,aAA3D,EAA0E,EAA1E,EAA8E4D,EAA9E,CAAP;AACD;;;8BAEUkJ,Y,EAAc9J,M,EAAQY,E,EAAI;AACnC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,WAA3D,EAAwE,CAAC8M,YAAD,CAAxE,EAAwFlJ,EAAxF,CAAP;AACD;;;mCAEemJ,c,EAAgB/J,M,EAAQY,E,EAAI;AAC1C,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,gBAA3D,EAA6E,CAAC+M,cAAD,CAA7E,EAA+FnJ,EAA/F,CAAP;AACD;;;gCAEYoJ,Y,EAAchK,M,EAAQY,E,EAAI;AACrC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,aAA3D,EAA0E,CAACgN,YAAD,CAA1E,EAA0FpJ,EAA1F,CAAP;AACD;;;4BAEQZ,M,EAAQiK,W,EAAarJ,E,EAAI;AAChC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,SAA3D,EAAsE,CAACgD,MAAD,EAASiK,WAAT,CAAtE,EAA6FrJ,EAA7F,CAAP;AACD;;;4BAEQZ,M,EAAQkK,W,EAAatJ,E,EAAI;AAChC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,SAA3D,EAAsE,CAACgD,MAAD,EAASkK,WAAT,CAAtE,EAA6FtJ,EAA7F,CAAP;AACD;;;iCAEaZ,M,EAAQY,E,EAAI;AACxB,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,cAA3D,EAA2E,CAACgD,MAAD,CAA3E,EAAqFY,EAArF,CAAP;AACD;;;uCAEmBZ,M,EAAQY,E,EAAI;AAC9B,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,oBAA3D,EAAiF,CAACgD,MAAD,CAAjF,EAA2FY,EAA3F,CAAP;AACD;;;yCAEqBZ,M,EAAQY,E,EAAI;AAChC,aAAO,KAAK0E,mCAAL,CAAyCtF,MAAzC,EAAiDhD,QAAjD,EAA2D,sBAA3D,EAAmF,CAACgD,MAAD,CAAnF,EAA6FY,EAA7F,CAAP;AACD;;AAED;AACA;AACA;;;;uCAEoBkB,I,EAAM/E,K,EAAOiD,M,EAAQ+C,M,EAAQhB,M,EAAQnB,E,EAAI;AAAA;;AAC3D;AACAmB,eAASA,OAAOoI,KAAP,CAAa,CAAb,CAAT;;AAEA;AACA,UAAIpH,WAAW,iBAAf,EAAkC;AAChC,YAAIhG,UAAU,UAAd,EAA0B;AACxB,iBAAO,KAAKuI,mCAAL,CAAyCtF,MAAzC,EAAiDlD,OAAjD,EAA0DiG,MAA1D,EAAkEhB,OAAOkC,MAAP,CAAc,EAAEmG,MAAMrN,KAAR,EAAd,CAAlE,EAAkG,YAAM,CAAE,CAA1G,CAAP;AACD,SAFD,MAEO,IAAIA,UAAU,OAAd,EAAuB;AAC5B,iBAAO,KAAKuI,mCAAL,CAAyCtF,MAAzC,EAAiD/C,UAAjD,EAA6D8F,MAA7D,EAAqEhB,OAAOkC,MAAP,CAAc,EAAEmG,MAAMrN,KAAR,EAAd,CAArE,EAAqG,YAAM,CAAE,CAA7G,CAAP;AACD;AACF;;AAED;AACA,UAAIgG,WAAW,sBAAf,EAAuC;AACrC,YAAIsH,aAAa,gDAAiCtI,OAAO,CAAP,CAAjC,EAA4C,QAAS,EAArD,CAAjB;AACA,YAAI,CAACsI,UAAL,EAAiB;AACftI,iBAAO,CAAP,IAAY,eAAKuI,SAAL,CAAe,eAAKC,QAAL,CAAcvK,MAAd,EAAsB+B,OAAO,CAAP,CAAtB,CAAf,CAAZ;AACD;AACF;;AAED;AACA;AACA,sBAAMyI,UAAN,CAAiB,CAAC1N,OAAD,EAAUG,UAAV,EAAsBC,SAAtB,EAAiCF,QAAjC,CAAjB,EAA6D,UAACyN,UAAD,EAAaC,QAAb,EAA0B;AACrF,YAAID,WAAW1N,KAAX,KAAqBA,KAAzB,EAAgC;AAC9B,cAAIgG,WAAW,cAAf,EAA+B;AAC7B;AACA;AACA,mBAAO2H,UAAP;AACD;AACF;;AAED;AACA,YAAI,CAAC3H,WAAW,sBAAX,IAAqCA,WAAW,cAAhD,IAAkEA,WAAW,eAA9E,KAAkG0H,WAAW1N,KAAX,KAAqB,SAA3H,EAAsI;AACpI,iBAAO2N,UAAP;AACD;;AAED,YAAI,CAAC/O,wBAAwBoH,MAAxB,CAAL,EAAsC;AACpC,mCAAOrE,IAAP,kCAA2CqE,MAA3C,uBAAmE0H,WAAW1N,KAA9E;AACD;;AAED;AACA,YAAI0N,WAAW1N,KAAX,KAAqB,OAArB,IAAgC0N,WAAW1N,KAAX,KAAqB,UAAzD,EAAqE;AACnE,iBAAO,QAAKuI,mCAAL,CAAyCtF,MAAzC,EAAiDyK,UAAjD,EAA6D1H,MAA7D,EAAqEhB,OAAOkC,MAAP,CAAc,EAAEmG,MAAMrN,KAAR,EAAd,CAArE,EAAqG,UAACiC,GAAD,EAAM2L,WAAN,EAAsB;AAChI,gBAAI3L,GAAJ,EAAS,OAAO0L,SAAS1L,GAAT,CAAP;;AAET;AACA;AACA;AACA,gBAAI+D,WAAW,sBAAX,IAAqC0H,WAAW1N,KAAX,KAAqB,OAA9D,EAAuE;AACrE,kBAAI4N,eAAeA,YAAYC,MAA/B,EAAuC;AACrC;AACA;AACA7I,uBAAO,CAAP,IAAY4I,YAAYC,MAAxB;AACD;AACF;;AAED,mBAAOF,UAAP;AACD,WAfM,CAAP;AAgBD,SAjBD,MAiBO;AACL,iBAAO,QAAKpF,mCAAL,CAAyCtF,MAAzC,EAAiDyK,UAAjD,EAA6D1H,MAA7D,EAAqEhB,MAArE,EAA6E,UAAC/C,GAAD,EAAS;AAC3F,gBAAIA,GAAJ,EAAS,OAAO0L,SAAS1L,GAAT,CAAP;AACT,mBAAO0L,UAAP;AACD,WAHM,CAAP;AAID;AACF,OA1CD,EA0CG,UAAC1L,GAAD,EAAS;AACV,YAAIA,GAAJ,EAAS;AACP,cAAI,CAACrD,wBAAwBoH,MAAxB,CAAL,EAAsC;AACpC,qCAAOrE,IAAP,kCAA2CqE,MAA3C,cAA0DjB,IAA1D,SAAkE/E,KAAlE,eAAmFiC,GAAnF;AACD;AACD,cAAI4B,EAAJ,EAAQ,OAAOA,GAAG5B,GAAH,CAAP;AACR,iBAAO,KAAM,CAAb;AACD;;AAED,YAAI,CAACrD,wBAAwBoH,MAAxB,CAAL,EAAsC;AACpC,mCAAOrE,IAAP,kCAA2CqE,MAA3C,cAA0DjB,IAA1D,SAAkE/E,KAAlE;AACD;AACD,YAAI6D,EAAJ,EAAQ,OAAOA,IAAP;AACR,eAAO,KAAM,CAAb;AACD,OAxDD;AAyDD;;;;;;kBAjxBkBzB,Q;;;AAoxBrBA,SAAS0L,SAAT,CAAmB5H,aAAnB,GAAmC,UAAU6H,uBAAV,EAAmCnK,KAAnC,EAA0CC,EAA1C,EAA8C;AAC/E,2BAAOlC,IAAP,CAAY,iDAAZ,EAA+DiC,KAA/D;AACA,MAAMtB,WAAW,EAAjB;AACA;AACA,MAAIsB,MAAMX,MAAV,EAAkB;AAChB;AACA;AACA;AACA,SAAKH,sBAAL,CAA4Bc,MAAMX,MAAlC,IAA4C,CAA5C;;AAEAX,aAASD,IAAT,CAAc/C,MAAMC,MAApB;AACD;AACD,MAAIqE,MAAMoK,IAAN,KAAe,SAAnB,EAA8B;AAC5B1L,aAASD,IAAT,CAAc/C,MAAMI,OAApB;AACD;AACD,SAAO,KAAKuO,iBAAL,CAAuBF,uBAAvB,EAAgDnK,KAAhD,EAAuDtB,QAAvD,EAAiEuB,EAAjE,CAAP;AACD,CAhBD;;AAkBAzB,SAAS0L,SAAT,CAAmBG,iBAAnB,GAAuC,UAAUF,uBAAV,EAAmCnK,KAAnC,EAA0CtB,QAA1C,EAAoDuB,EAApD,EAAwD;AAAA;;AAC7F,OAAKqK,iBAAL,CAAuBtK,KAAvB;AACA,SAAO,gBAAM0I,GAAN,CAAUhK,QAAV,EAAoB,UAAC4F,OAAD,EAAUiG,IAAV,EAAmB;AAC5C,WAAO,QAAKC,eAAL,CAAqBL,uBAArB,EAA8CnK,MAAMX,MAApD,EAA4DiF,OAA5D,EAAqEiG,IAArE,CAAP;AACD,GAFM,EAEJ,UAAClM,GAAD,EAAMkE,OAAN,EAAkB;AACnB,QAAIlE,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;AACT,WAAO4B,GAAG,IAAH,EAASsC,OAAT,CAAP;AACD,GALM,CAAP;AAMD,CARD;;AAUA/D,SAAS0L,SAAT,CAAmBM,eAAnB,GAAqC,SAASA,eAAT,CAA0BL,uBAA1B,EAAmD9K,MAAnD,SAAuFY,EAAvF,EAA2F;AAAA;;AAAA,MAA9BrE,IAA8B,SAA9BA,IAA8B;AAAA,MAAxBC,IAAwB,SAAxBA,IAAwB;AAAA,MAAlBE,IAAkB,SAAlBA,IAAkB;AAAA,MAAZC,IAAY,SAAZA,IAAY;;AAC9H,MAAMyO,WAAW,sBAAKN,uBAAL,EAA8B,EAAEO,aAAa,EAAE9O,UAAF,EAAQyD,cAAR,EAAf,EAA9B,CAAjB;AACA,MAAIoL,QAAJ,EAAc;AACZ;AACA,QAAIA,SAASE,SAAT,IAAsB,CAACF,SAASC,WAAT,CAAqBE,YAA5C,IAA4D,CAACH,SAASC,WAAT,CAAqBG,MAAlF,IAA4F,CAACJ,SAASC,WAAT,CAAqBI,MAAtH,EAA8H;AAC5H,UAAIL,SAASM,qBAAb,EAAoCN,SAASM,qBAAT,GAApC,KACMN,SAASpG,IAAT,CAAc,wBAAd,CAAD;;AAEL,+BAAOtG,IAAP,kCAA2CnC,IAA3C;AACA6O,eAASC,WAAT,CAAqBM,MAArB,GAA8B,IAA9B;;AAEA,aAAO/K,GAAG,IAAH,EAASwK,QAAT,CAAP;AACD;AACF;;AAED,MAAIQ,aAAJ;;AAEA,MAAIjP,QAAQA,KAAKC,QAAb,IAAyBiP,gBAAzB,IAA6C,QAAOrP,IAAP,yCAAOA,IAAP,OAAgB,QAAjE,EAA2E;AACzE;AACA;AACA;AACA;AACA;AACA,6BAAOkC,IAAP,2BAAoCnC,IAApC,WAA8CG,KAAK,CAAL,CAA9C;AACAkP,WAAO5Q,QAAQ0B,KAAK,CAAL,CAAR,EAAiBoP,OAAxB;AACD,GARD,MAQO;AACL;AACA,QAAInP,QAAQA,KAAKE,KAAjB,EAAwB;AACtB;AACA,UAAIhC,QAAQC,GAAR,CAAYiR,QAAZ,KAAyB,YAAzB,IAAyClR,QAAQC,GAAR,CAAYiR,QAAZ,KAAyB,SAAlE,IAA+ElR,QAAQC,GAAR,CAAYkR,eAAZ,KAAgC,GAAnH,EAAwH;AACtHtP,aAAK0C,IAAL,CAAU,kBAAV,EAA8B,8BAA9B;AACD;AACDwM,aAAO,wBAAG/O,KAAH,CAASL,IAAT,EAAeE,IAAf,EAAqB,EAAEuP,OAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAT,EAArB,CAAP;AACD,KAND,MAMO;AACLvP,aAAOA,QAAQ,EAAf;AACA;AACA,UAAI7B,QAAQC,GAAR,CAAYiR,QAAZ,KAAyB,YAAzB,IAAyClR,QAAQC,GAAR,CAAYiR,QAAZ,KAAyB,SAAlE,IAA+ElR,QAAQC,GAAR,CAAYkR,eAAZ,KAAgC,GAAnH,EAAwH;AACtHtP,aAAK0C,IAAL,CAAU,cAAV;AACD;AACDwM,aAAO,wBAAGM,IAAH,CAAQ1P,IAAR,EAAcE,IAAd,CAAP;AACD;;AAED,6BAAOgC,IAAP,sBAA+BnC,IAA/B,mBAAiDC,IAAjD;AACD;;AAEDoP,OAAKP,WAAL,GAAmB,EAAE9O,UAAF,EAAQyD,cAAR,EAAgBuC,IAAIhE,KAApB,EAAnB;;AAEAqN,OAAKnN,EAAL,CAAQ,MAAR,EAAgB,YAAM;AACpB,6BAAOwB,MAAP,sBAAiC1D,IAAjC;;AAEAqP,SAAKP,WAAL,CAAiBG,MAAjB,GAA0B,IAA1B;;AAEA,QAAII,KAAKP,WAAL,CAAiB9O,IAArB,EAA2B;AACzB;AACA,UAAIqP,KAAKP,WAAL,CAAiB9O,IAAjB,CAAsB4P,KAAtB,CAA4B,UAA5B,KAA2C5P,KAAK4P,KAAL,CAAW,SAAX,CAA/C,EAAsE;AACpEnO,gBAAQoO,IAAR,CAAa,oBAAb;AACD,OAFD,MAEO,IAAIR,KAAKP,WAAL,CAAiB9O,IAAjB,CAAsB4P,KAAtB,CAA4B,QAA5B,CAAJ,EAA2C;AAChD;AACA,YAAI,CAAC,QAAKvM,WAAV,EAAuB;AACrB,cAAI,CAAC,QAAKC,sBAAL,CAA4BG,MAA5B,CAAL,EAA0C;AACxC,oBAAKH,sBAAL,CAA4BG,MAA5B,IAAsC,CAAtC;AACD;AACD,kBAAKH,sBAAL,CAA4BG,MAA5B,KAAuC,CAAvC;AACA,cAAI,QAAKH,sBAAL,CAA4BG,MAA5B,IAAsC3C,2BAA1C,EAAuE;AACrE,mBAAO,QAAK8C,yBAAL,CAA+B,IAAIC,KAAJ,gCAAuCJ,MAAvC,8BAA/B,CAAP;AACD;;AAED;AACA,mCAAOC,MAAP,8CAAyDD,MAAzD;;AAEA,kBAAKmL,eAAL,CAAqBL,uBAArB,EAA8C9K,MAA9C,EAAsD,EAAEzD,UAAF,EAAQC,UAAR,EAAcE,UAAd,EAAoBC,UAApB,EAAtD,EAAkF,UAACqC,GAAD,EAAMqN,OAAN,EAAkB;AAClG,gBAAIrN,GAAJ,EAAS;AACP,qBAAO,QAAKmB,yBAAL,CAA+B,IAAIC,KAAJ,mCAA0CJ,MAA1C,iBAA4DjB,kBAAkBC,GAAlB,CAA5D,CAA/B,CAAP;AACD;;AAEDqN,oBAAQhB,WAAR,CAAoBI,MAApB,GAA6B7G,SAA7B;AACAyH,oBAAQhB,WAAR,CAAoBE,YAApB,GAAmC3G,SAAnC;AACAyH,oBAAQhB,WAAR,CAAoBG,MAApB,GAA6B5G,SAA7B;;AAEAkG,oCAAwB1L,IAAxB,CAA6BiN,OAA7B;;AAEA,qCAAO3N,IAAP,kDAA2DsB,MAA3D;;AAEA;AACA;AACAhC,oBAAQoO,IAAR,CAAa,gBAAb,EAA+BpM,MAA/B,EAAuCzD,IAAvC;AACD,WAhBD;AAiBD;AACF;AACF;;AAED;AACA,SAAK,IAAIyF,IAAI8I,wBAAwB7I,MAAxB,GAAiC,CAA9C,EAAiDD,KAAK,CAAtD,EAAyDA,GAAzD,EAA8D;AAC5D,UAAIoJ,YAAWN,wBAAwB9I,CAAxB,CAAf;AACA,UAAIoJ,cAAaQ,IAAjB,EAAuB;AACrBd,gCAAwBxI,MAAxB,CAA+BN,CAA/B,EAAkC,CAAlC;AACD;AACF;AACF,GAnDD;;AAqDA4J,OAAKnN,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACrBmN,SAAKP,WAAL,CAAiBI,MAAjB,GAA0B,IAA1B;AACD,GAFD;AAGAG,OAAKnN,EAAL,CAAQ,YAAR,EAAsB,YAAM;AAC1BmN,SAAKP,WAAL,CAAiBE,YAAjB,GAAgC,IAAhC;AACD,GAFD;AAGAK,OAAKnN,EAAL,CAAQ,OAAR,EAAiB,UAACgC,KAAD,EAAW;AAC1B,6BAAO/B,IAAP,sBAA+BnC,IAA/B,iBAAiDkE,KAAjD;AACD,GAFD;AAGAmL,OAAKnN,EAAL,CAAQ,SAAR,EAAmB,UAACS,OAAD,EAAa;AAC9B,6BAAOR,IAAP,sBAA+BnC,IAA/B,mBAAmD2C,OAAnD;AACD,GAFD;AAGA0M,OAAKnN,EAAL,CAAQ,SAAR,EAAmB,UAACS,OAAD,EAAa;AAC9B,6BAAOR,IAAP,sBAA+BnC,IAA/B,mBAAmD2C,OAAnD;AACD,GAFD;;AAIA,SAAO0B,GAAG,IAAH,EAASgL,IAAT,CAAP;AACD,CArHD;;AAuHA,IAAIU,YAAY,KAAhB;;AAEA;AACA;AACA,SAASC,OAAT,CAAkB5O,IAAlB,EAAwBiD,EAAxB,EAA4B;AAC1B,MAAInD,OAAO6O,SAAX;AACAA,eAAa,CAAb;AACA,MAAI7K,SAAS,cAAI+K,YAAJ,EAAb;AACA/K,SAAOgL,MAAP,CAAchP,IAAd,EAAoBE,IAApB;AACA8D,SAAOiL,IAAP,CAAY,WAAZ,EAAyB,YAAM;AAC7BjL,WAAOiL,IAAP,CAAY,OAAZ,EAAqB,YAAM;AACzB,aAAO9L,GAAG,IAAH,EAASnD,IAAT,CAAP;AACD,KAFD;AAGAgE,WAAOY,KAAP;AACD,GALD;AAMAZ,SAAOhD,EAAP,CAAU,OAAV,EAAmB,UAACO,GAAD,EAAS;AAC1B,QAAIA,OAAOA,IAAI2N,IAAJ,KAAa,YAAxB,EAAsC;AACpC,aAAOJ,QAAQ5O,IAAR,EAAciD,EAAd,CAAP;AACD;AACD;AACA,UAAM5B,GAAN;AACD,GAND;AAOA,SAAOyC,MAAP;AACD;;AAEDtC,SAAS0L,SAAT,CAAmBrJ,mBAAnB,GAAyC,SAASA,mBAAT,CAA8BoL,UAA9B,EAA0ChM,EAA1C,EAA8C;AAAA;;AACrF,MAAMjD,OAAQiP,cAAcA,WAAWjP,IAA1B,IAAmC,SAAhD;;AAEA,MAAIiP,cAAcA,WAAWnP,IAA7B,EAAmC;AACjC,6BAAOwC,MAAP,uEAAkF2M,WAAWnP,IAA7F;;AAEA,QAAMoP,kBAAkB,KAAKC,mBAAL,CAAyB,EAAEnP,UAAF,EAAQF,MAAMmP,WAAWnP,IAAzB,EAAzB,CAAxB;;AAEA,WAAOmD,GAAG,IAAH,EAASiM,eAAT,EAA0BlP,IAA1B,EAAgCiP,WAAWnP,IAA3C,CAAP;AACD;;AAED,2BAAOiB,IAAP,CAAY,iCAAZ;;AAEA,SAAO6N,QAAQ5O,IAAR,EAAc,UAACqB,GAAD,EAAMvB,IAAN,EAAe;AAClC,QAAIuB,GAAJ,EAAS,OAAO4B,GAAG5B,GAAH,CAAP;;AAET,6BAAOiB,MAAP,wEAAmFxC,IAAnF;;AAEA,QAAMoP,kBAAkB,QAAKC,mBAAL,CAAyB,EAAEnP,UAAF,EAAQF,MAAMA,IAAd,EAAzB,CAAxB;;AAEA,WAAOmD,GAAG,IAAH,EAASiM,eAAT,EAA0BlP,IAA1B,EAAgCF,IAAhC,CAAP;AACD,GARM,CAAP;AASD,CAtBD;;AAwBA0B,SAAS0L,SAAT,CAAmBI,iBAAnB,GAAuC,SAASA,iBAAT,CAA4BtK,KAA5B,EAAmC;AACxE,MAAMoM,YAAY3J,KAAK4J,KAAL,CAAWnS,QAAQC,GAAR,CAAYiS,SAAZ,IAAyB,IAApC,CAAlB;AACA,wBAAMA,SAAN,EAAiBpM,KAAjB;AACA,2BAAOV,MAAP,CAAc,oCAAd,EAAoDmD,KAAKC,SAAL,CAAe0J,SAAf,EAA0B,CAA1B,EAA6B,IAA7B,CAApD;AACAlS,UAAQC,GAAR,CAAYiS,SAAZ,GAAwB3J,KAAKC,SAAL,CAAe0J,SAAf,CAAxB,CAJwE,CAItB;AACnD,CALD;;AAOA,SAASE,WAAT,CAAsBpL,SAAtB,EAAiCqL,OAAjC,EAA0C;AACxC,MAAMtL,MAAMsL,QAAQtL,GAAR,IAAe,EAA3B;AACA,MAAMsC,QAAQtC,IAAIuL,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAAnC;AACA,MAAMpL,SAAS,aAAGiL,KAAH,CAAS9I,KAAT,CAAf;AACAnC,SAAOH,GAAP,GAAaA,GAAb;AACA,SAAOG,MAAP;AACD;;AAED5C,SAAS0L,SAAT,CAAmBiC,mBAAnB,GAAyC,SAASA,mBAAT,CAA8BF,UAA9B,EAA0C;AACjF,MAAMC,kBAAkB,IAAI,aAAUO,MAAd,CAAqB,EAAE3P,MAAMmP,WAAWnP,IAAnB,EAAyBE,MAAMiP,WAAWjP,IAA1C,EAArB,CAAxB;;AAEA;AACA;AACA;AACA;;AAEAkP,kBAAgBpO,EAAhB,CAAmB,YAAnB,EAAiC,UAACoD,SAAD,EAAYqL,OAAZ,EAAwB;AACvD,QAAMnL,SAASkL,YAAYpL,SAAZ,EAAuBqL,OAAvB,CAAf;;AAEA,QAAI,CAACnL,OAAOD,IAAZ,EAAkBC,OAAOD,IAAP,GAAc,SAAd;AAClB,QAAI,CAACC,OAAOpB,KAAZ,EAAmBoB,OAAOpB,KAAP,GAAe,EAAf;AACnB,QAAI,CAACkB,UAAUE,MAAf,EAAuBF,UAAUE,MAAV,GAAmBA,MAAnB;;AAEvB,QAAMD,OAAOD,UAAUE,MAAV,IAAoBF,UAAUE,MAAV,CAAiBD,IAAlD;AACA,QAAM/E,QAAQ8E,UAAUE,MAAV,IAAoBF,UAAUE,MAAV,CAAiBhF,KAAnD;;AAEA,QAAIiD,SAAS6B,UAAUE,MAAV,IAAoBF,UAAUE,MAAV,CAAiB/B,MAAlD;;AAEA6M,oBAAgBT,IAAhB,CAAqB,WAArB,EAAkCvK,SAAlC,EAA6CC,IAA7C,EAAmD/E,KAAnD,EAA0DiD,MAA1D,EAAkE+B,MAAlE;;AAEAF,cAAUpD,EAAV,CAAa,SAAb,EAAwB,UAACsG,IAAD,EAAU;AAChC,UAAM7F,UAAUkE,KAAK4J,KAAL,CAAWjI,IAAX,CAAhB;;AAEA;AACA;AACA,UAAI7F,QAAQc,MAAZ,EAAoBA,SAASd,QAAQc,MAAjB;;AAEpB6M,sBAAgBT,IAAhB,CAAqB,SAArB,EAAgCtK,IAAhC,EAAsC/E,KAAtC,EAA6CiD,MAA7C,EAAqDd,OAArD,EAA8D2C,SAA9D,EAAyEgL,eAAzE,EAA0FQ,gBAAgBnO,OAAhB,EAAyB2C,SAAzB,CAA1F;AACD,KARD;AASD,GAvBD;;AAyBA,SAAOgL,eAAP;AACD,CAlCD;;AAoCA,SAAShJ,mBAAT,CAA8B3B,MAA9B,EAAsChD,OAAtC,EAA+C;AAC7C,MAAIgD,OAAOC,UAAP,KAAsB,aAAUC,IAApC,EAA0C;AACxC,QAAM2C,OAAO3B,KAAKC,SAAL,CAAenE,OAAf,CAAb;AACA,WAAOgD,OAAO8C,IAAP,CAAYD,IAAZ,CAAP;AACD;AACF;;AAED,SAASsI,eAAT,CAA0BnO,OAA1B,EAAmC2C,SAAnC,EAA8C;AAC5C,SAAO,SAASyL,gBAAT,CAA2B7M,KAA3B,EAAkCqC,MAAlC,EAA0C;AAC/C,QAAMyK,QAAQ;AACZC,eAAS,KADG;AAEZjL,UAAIrD,QAAQqD,EAFA;AAGZO,cAAQA,UAAU,KAAM,CAHZ;AAIZrC,aAAQA,KAAD,GAAU,8BAAeA,KAAf,CAAV,GAAkC,KAAM;AAJnC,KAAd;AAMAoD,wBAAoBhC,SAApB,EAA+B0L,KAA/B;AACD,GARD;AASD;;AAED,SAASjE,kCAAT,CAA6CmE,aAA7C,EAA4D;AAC1D,SAAO;AACLvH,iBAAauH,cAAczE;AAC3B;AACA;AACA;AAJK,GAAP;AAMD;;AAED,SAAS6C,cAAT,GAA2B;AACzB,SAAO,OAAOhR,OAAP,KAAmB,WAAnB,IAAkCA,QAAQ6S,QAA1C,IAAsD,CAAC,CAAC7S,QAAQ6S,QAAR,CAAiB9Q,QAAhF;AACD","file":"Plumbing.js","sourcesContent":["import path from 'path'\nimport async from 'async'\nimport fse from 'haiku-fs-extra'\nimport find from 'lodash.find'\nimport merge from 'lodash.merge'\nimport filter from 'lodash.filter'\nimport net from 'net'\nimport cp from 'child_process'\nimport qs from 'qs'\nimport WebSocket from 'ws'\nimport { EventEmitter } from 'events'\nimport EnvoyServer from 'haiku-sdk-creator/lib/envoy/server'\nimport EnvoyLogger from 'haiku-sdk-creator/lib/envoy/logger'\nimport { EXPORTER_CHANNEL, ExporterHandler } from 'haiku-sdk-creator/lib/exporter'\nimport { GLASS_CHANNEL, GlassHandler } from 'haiku-sdk-creator/lib/glass'\nimport TimelineHandler from 'haiku-sdk-creator/lib/timeline'\nimport TourHandler from 'haiku-sdk-creator/lib/tour'\nimport { inkstone } from 'haiku-sdk-inkstone'\nimport { client as sdkClient } from 'haiku-sdk-client'\nimport StateObject from 'haiku-state-object'\nimport serializeError from 'haiku-serialization/src/utils/serializeError'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport mixpanel from 'haiku-serialization/src/utils/Mixpanel'\nimport * as ProjectFolder from './ProjectFolder'\nimport getNormalizedComponentModulePath from 'haiku-serialization/src/model/helpers/getNormalizedComponentModulePath'\n\nconst NOTIFIABLE_ENVS = {\n  production: true,\n  staging: true\n  // development: true\n}\n\nlet Raven\nif (NOTIFIABLE_ENVS[process.env.HAIKU_RELEASE_ENVIRONMENT]) {\n  Raven = require('./Raven')\n}\n\n// For any methods that are...\n// - noisy\n// - internal use only\n// - housekeeping\n// we'll skip Sentry for now.\nconst METHODS_TO_SKIP_IN_SENTRY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  applyPropertyGroupDelta: true,\n  applyPropertyGroupValue: true,\n  moveSegmentEndpoints: true,\n  moveKeyframes: true,\n  toggleDevTools: true,\n  fetchProjectInfo: true\n}\n\nconst IGNORED_METHOD_MESSAGES = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true\n  // These are noisy, maybe not worth including?\n  // applyPropertyGroupDelta: true,\n  // applyPropertyGroupValue: true,\n  // moveSegmentEndpoints: true,\n  // moveKeyframes: true\n}\n\n// See note under 'processMethodMessage' for the purpose of this\nconst METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  toggleDevTools: true,\n  openTextEditor: true,\n  openTerminal: true,\n  saveProject: true,\n  previewProject: true,\n  fetchProjectInfo: true\n}\n\nconst ROOT_DIR = path.join(__dirname, '..')\nconst PROC_DIR = path.join(__dirname)\n\nconst PROCS = {\n  master: { name: 'master', path: path.join(PROC_DIR, 'MasterProcess.js') },\n  creator: { name: 'creator', path: require('electron'), args: [path.join(ROOT_DIR, 'node_modules', 'haiku-creator-electron', 'lib', 'electron.js')], opts: { electron: true, spawn: true } }\n}\n\nconst Q_GLASS = { alias: 'glass' }\nconst Q_MASTER = { alias: 'master' }\nconst Q_TIMELINE = { alias: 'timeline' }\nconst Q_CREATOR = { alias: 'creator' }\n\nconst AWAIT_INTERVAL = 100\nconst WAIT_DELAY = 10 * 1000\nconst MAX_MASTER_RESTART_ATTEMPTS = 3\n\n// In normal conditions CodeCommit can take up to 10 seconds to initialize a new repository,\n// and unfortunately there's no callback to detect when it's finished. So when a project is\n// first created, we add this artificial delay to make it more likely that the first clone\n// attempt made (during project initialization) goes through without requiring re-attempt.\nconst CODE_COMMIT_RACE_CONDITION_DELAY = 10000\n\nconst HAIKU_DEFAULTS = {\n  socket: {\n    port: process.env.HAIKU_CONTROL_PORT,\n    host: process.env.HAIKU_CONTROL_HOST || '0.0.0.0'\n  }\n}\n\n// configure inkstone, useful for testing off of dev (HAIKU_API=https://localhost:8080/)\nif (process.env.HAIKU_API) {\n  inkstone.setConfig({\n    baseUrl: process.env.HAIKU_API\n  })\n}\n\nconst emitter = new EventEmitter()\n\nconst PINFO = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nvar idIncrementor = 1\nfunction _id () {\n  return idIncrementor++\n}\n\nconst PLUMBING_INSTANCES = []\n\n// In test environment these listeners may get wrapped so we begin listening\n// to them immediately in the hope that we can start listening before the\n// test wrapper steps in and interferes\nprocess.on('exit', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) exiting`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n})\nprocess.on('SIGINT', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGINT`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\nprocess.on('SIGTERM', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGTERM`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\n\nfunction _safeErrorMessage (err) {\n  if (!err) return 'unknown error'\n  if (typeof err === 'string') return err\n  if (err.stack) return err.stack\n  if (err.message) return err.message\n  return err + ''\n}\n\nexport default class Plumbing extends StateObject {\n  constructor () {\n    super()\n\n    // Keep track of all PLUMBING_INSTANCES so we can put our process.on listeners\n    // above this constructor, which is necessary in test environments such\n    // as tape where exit might never get called despite an exit.\n    PLUMBING_INSTANCES.push(this)\n\n    this.subprocs = []\n    this.envoys = []\n    this.servers = []\n    this.clients = []\n    this.requests = {}\n    this.caches = {}\n    this.projects = {}\n\n    // Keep track of whether we got a teardown signal so we know whether we should keep trying to\n    // reconnect any subprocs that seem to have disconnected. This seems useless (why not just kill\n    // the process) but keep in mind we need to unit test this.\n    this._isTornDown = false\n    this._masterRestartAttempts = {}\n\n    this._methodMessages = []\n    this.executeMethodMessagesWorker()\n\n    emitter.on('teardown-requested', () => {\n      this.teardown()\n    })\n\n    emitter.on('proc-respawned', (folder, alias) => {\n      if (this._isTornDown) {\n        logger.info('[plumbing] we are torn down, so not restarting client')\n        return void (0)\n      }\n\n      logger.sacred(`[plumbing] restarting client ${alias} in ${folder}`)\n\n      // This just waits until we have a 'master' client available with the given name.\n      // The reconnect logic is elsewhere\n      return this.awaitFolderClientWithQuery(folder, 'proc-respawned+restartProject', { alias }, WAIT_DELAY, (err) => {\n        if (err) {\n          return this._handleUnrecoverableError(new Error(`Waited too long for client ${alias} in ${folder} because ${_safeErrorMessage(err)}`))\n        }\n\n        if (alias === 'master') {\n          const projectInfo = this.getProjectInfoFor(folder)\n\n          // This actually calls the method in question on the given client\n          return this.restartProject(folder, projectInfo, (err) => {\n            if (err) {\n              return this._handleUnrecoverableError(new Error(`Unable to finish restart on client ${alias} in ${folder} because ${_safeErrorMessage(err)}`))\n            }\n            logger.info(`[plumbing] restarted client ${alias} in ${folder}`)\n          })\n        }\n      })\n    })\n  }\n\n  _handleUnrecoverableError (err) {\n    mixpanel.haikuTrackOnce('app:crash', {\n      error: err.message\n    })\n    // Crash in the timeout to give a chance for mixpanel to transmit\n    setTimeout(() => {\n      throw err\n    }, 100)\n  }\n\n  /**\n   * Mostly-internal methods\n   */\n\n  launch (haiku = {}, cb) {\n    haiku = merge({}, HAIKU_DEFAULTS, haiku)\n\n    logger.info('[plumbing] launching plumbing', haiku)\n\n    logger.info('[plumbing] launching envoy server')\n\n    var envoyServer = new EnvoyServer({\n      WebSocket: WebSocket,\n      logger: new EnvoyLogger('warn', logger)\n    })\n\n    this.envoys.push(envoyServer)\n\n    return envoyServer.ready().then(() => {\n      if (!haiku.envoy) haiku.envoy = {} // Gets stored in env vars before subprocs created\n      haiku.envoy.port = envoyServer.port\n      haiku.envoy.host = envoyServer.host\n\n      const envoyTimelineHandler = new TimelineHandler(envoyServer)\n      const envoyTourHandler = new TourHandler(envoyServer)\n      const envoyExporterHandler = new ExporterHandler(envoyServer)\n      const envoyGlassHandler = new GlassHandler(envoyServer)\n\n      envoyServer.bindHandler('timeline', TimelineHandler, envoyTimelineHandler)\n      envoyServer.bindHandler('tour', TourHandler, envoyTourHandler)\n      envoyServer.bindHandler(EXPORTER_CHANNEL, ExporterHandler, envoyExporterHandler)\n      envoyServer.bindHandler(GLASS_CHANNEL, GlassHandler, envoyGlassHandler)\n\n      logger.info('[plumbing] launching plumbing control server')\n\n      return this.launchControlServer(haiku.socket, (err, server, host, port) => {\n        if (err) return cb(err)\n\n        // Forward these env vars to creator\n        process.env.HAIKU_PLUMBING_PORT = port\n        process.env.HAIKU_PLUMBING_HOST = host\n\n        if (!haiku.socket) haiku.socket = {}\n        haiku.socket.port = port\n        haiku.socket.host = host\n        haiku.plumbing = { url: `http://${host}:${port}` }\n\n        this.servers.push(server)\n\n        server.on('connected', (websocket, type, alias, folder, params) => {\n          logger.sacred(`[plumbing] websocket opened (${type} ${alias})`)\n\n          // Don't allow duplicate clients\n          for (let i = this.clients.length - 1; i >= 0; i--) {\n            let client = this.clients[i]\n            if (client.params) {\n              if (client.params.alias === alias && client.params.folder === folder) {\n                if (client.readyState === WebSocket.OPEN) {\n                  client.close()\n                }\n                this.clients.splice(i, 1)\n              }\n            }\n          }\n\n          websocket.params.id = _id()\n          const index = this.clients.push(websocket) - 1\n\n          websocket._index = index\n\n          websocket.on('close', () => {\n            logger.sacred(`[plumbing] websocket closed (${type} ${alias})`)\n\n            // Clean up dead clients\n            for (let j = this.clients.length - 1; j >= 0; j--) {\n              let client = this.clients[j]\n              if (client === websocket) {\n                this.clients.splice(j, 1)\n              }\n            }\n          })\n        })\n\n        server.on('message', (type, alias, folder, message, websocket, server, responder) => {\n          // IMPORTANT! Creator uses this\n          if (!folder && message.folder) {\n            folder = message.folder\n          }\n\n          if (message.type === 'broadcast') {\n            // Give clients the chance to emit events to all others\n            this.sendBroadcastMessage(message, folder, alias, websocket)\n          } else if (message.id && this.requests[message.id]) {\n            // If we have an entry in this.requests, that means this is a reply\n            const { callback } = this.requests[message.id]\n            delete this.requests[message.id]\n            return callback(message.error, message.result, message)\n          } else if (message.method) { // This condition MUST happen before the one above since .method is present on that one too\n            // Ensure that actions/methods occur in order by using a queue\n            this.processMethodMessage(type, alias, folder, message, responder)\n          }\n        })\n\n        this.spawnSubgroup(this.subprocs, haiku, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb(null, host, port, server, spawned, haiku.envoy)\n        })\n      })\n    })\n  }\n\n  methodMessageBeforeLog (message, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.sacred(`[plumbing] ↓-- ${message.method} via ${alias} -> ${JSON.stringify(message.params)} --↓`)\n    }\n  }\n\n  methodMessageAfterLog (message, err, result, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      if ((err && err.message) || (err && err.stack)) {\n        logger.sacred(`[plumbing] ${message.method} error ${err.stack || err.message}`)\n      }\n      logger.sacred(`[plumbing] ↑-- ${message.method} via ${alias} --↑`)\n    }\n  }\n\n  executeMethodMessagesWorker () {\n    if (this._isTornDown) return void (0) // Avoid leaking a handle\n    let nextMethodMessage = this._methodMessages.shift()\n    if (!nextMethodMessage) return setTimeout(this.executeMethodMessagesWorker.bind(this), 64)\n\n    let { type, alias, folder, message, cb } = nextMethodMessage\n\n    this.methodMessageBeforeLog(message, alias)\n\n    // Actions are a special case of methods that end up routed through all of the clients,\n    // glass -> timeline -> master before returning. They go through one handler as opposed\n    // to the normal 'methods' which plumbing handles on a more a la carte basis\n    if (message.type === 'action') {\n      return this.handleClientAction(type, alias, folder, message.method, message.params, (err, result) => {\n        this.methodMessageAfterLog(message, err, result, alias)\n        cb(err, result)\n        this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n      })\n    }\n\n    return this.plumbingMethod(message.method, message.params || [], (err, result) => {\n      this.methodMessageAfterLog(message, err, result, alias)\n      cb(err, result)\n      this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n    })\n  }\n\n  processMethodMessage (type, alias, folder, message, cb) {\n    // Certain messages aren't of a kind that we can reliably enqueue - either they happen too fast or they are 'fire and forget'\n    if (METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY[message.method]) {\n      if (message.type === 'action') {\n        return this.handleClientAction(type, alias, folder, message.method, message.params, cb)\n      } else {\n        return this.plumbingMethod(message.method, message.params, cb)\n      }\n    } else {\n      this._methodMessages.push({ type, alias, folder, message, cb })\n    }\n  }\n\n  sendBroadcastMessage (message, folder, alias, websocket) {\n    this.clients.forEach((client) => {\n      if (websocket && client === websocket) return void (0) // Skip message's send\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      delete message.id // Don't confuse this as a request/response\n      sendMessageToClient(client, merge(message, { folder, alias }))\n    })\n  }\n\n  sentryError (method, error, extras) {\n    logger.sacred(`[plumbing] error @ ${method}`, error, extras)\n    if (!Raven) return null\n    if (method && METHODS_TO_SKIP_IN_SENTRY[method]) return null\n    if (!error) return null\n    if (typeof error === 'object' && !(error instanceof Error)) {\n      var fixed = new Error(error.message || `Plumbing.${method} error`)\n      if (error.stack) fixed.stack = error.stack\n      error = fixed\n    } else if (typeof error === 'string') {\n      error = new Error(error) // Unfortunately no good stack trace in this case\n    }\n    return Raven.captureException(error, extras)\n  }\n\n  plumbingMethod (method, params = [], cb) {\n    if (typeof this[method] !== 'function') return cb(new Error(`Plumbing has no method '${method}'`))\n    return this[method].apply(this, params.concat((error, result) => {\n      if (error) return cb(error)\n      return cb(null, result)\n    }))\n  }\n\n  awaitFolderClientWithQuery (folder, method, query, timeout, cb) {\n    if (!folder) return cb(new Error('Folder argument was missing'))\n    if (!query) return cb(new Error('Query argument was missing'))\n    if (timeout <= 0) {\n      return cb(new Error(`Timed out waiting for client ${JSON.stringify(query)} of ${folder} to connect`))\n    }\n\n    // HACK: At the time of this writing, there is only \"one\" creator client, not one per folder.\n    // So the method just get ssent to the one client (if available)\n    if (query.alias === 'creator') {\n      const creatorClient = find(this.clients, { params: query })\n      if (creatorClient) {\n        return cb(null, creatorClient)\n      }\n    } else {\n      const clientsOfFolder = filter(this.clients, { params: { folder } })\n\n      // // uncomment me for insight into why a request might not be making it\n      // if (method !== 'masterHeartbeat') {\n      //   console.log('awaiting', method, query, folder, JSON.stringify(this.clients.map((c) => c.params.alias)))\n      // }\n\n      if (clientsOfFolder && clientsOfFolder.length > 0) {\n        const clientMatching = find(clientsOfFolder, { params: query })\n        if (clientMatching) {\n          return cb(null, clientMatching)\n        }\n      }\n    }\n    return setTimeout(() => {\n      return this.awaitFolderClientWithQuery(folder, method, query, timeout - AWAIT_INTERVAL, cb)\n    }, AWAIT_INTERVAL)\n  }\n\n  sendFolderSpecificClientMethodQuery (folder, query = {}, method, params = [], cb) {\n    return this.awaitFolderClientWithQuery(folder, method, query, WAIT_DELAY, (err, client) => {\n      if (err) return cb(err)\n      return this.sendClientMethod(client, method, params, (error, response) => {\n        if (error) {\n          this.sentryError(method, error, { tags: query })\n          return cb(error)\n        }\n        return cb(null, response)\n      })\n    })\n  }\n\n  sendClientMethod (websocket, method, params = [], callback) {\n    var message = { method, params }\n    return this.sendClientRequest(websocket, message, callback)\n  }\n\n  sendClientRequest (websocket, message, callback) {\n    if (message.id === undefined) message.id = `${Math.random()}`\n    this.requests[message.id] = { websocket, message, callback }\n    if (websocket.readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message)\n      return websocket.send(data)\n    } else {\n      logger.info(`[plumbing] websocket readyState was not open so we did not send message ${message.method || message.id}`)\n      callback() // Should this return an error or remain silent?\n    }\n  }\n\n  teardown () {\n    logger.info('[plumbing] teardown method called')\n    this.subprocs.forEach((subproc) => {\n      if (subproc.kill) {\n        if (subproc.stdin) subproc.stdin.pause()\n        // Using sigterm as opposed to kill to give the processes a chance to cleanup\n        // so we don't end up with corrupt git objects\n        logger.info('[plumbing] sending terminate signal')\n        subproc.kill('SIGTERM')\n      } else if (subproc.exit) {\n        logger.info('[plumbing] calling exit')\n        subproc.exit()\n      }\n    })\n    this.envoys.forEach((envoy) => {\n      logger.info('[plumbing] closing envoy')\n      envoy.close()\n    })\n    this.servers.forEach((server) => {\n      logger.info('[plumbing] closing server')\n      server.close()\n    })\n    this.clients.forEach((client) => {\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      logger.info('[plumbing] sending crash signal to client')\n      sendMessageToClient(client, { signal: 'CRASH' })\n    })\n    this._isTornDown = true\n  }\n\n  toggleDevTools (folder, cb) {\n    this.sendBroadcastMessage({ type: 'broadcast', name: 'dev-tools:toggle' })\n    cb()\n  }\n\n  /**\n   * Outward-facing\n   */\n\n  masterHeartbeat (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'masterHeartbeat', [], (err, masterState) => {\n      if (err) return cb(err)\n      return cb(null, masterState)\n    })\n  }\n\n  doesProjectHaveUnsavedChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'doesProjectHaveUnsavedChanges', [], cb)\n  }\n\n  /**\n   * @method initializeProject\n   * @description Flexible method for setting up a project based on an unknown file system state and possibly missing inputs.\n   * We make a decision here as to where + whether to generate a new folder.\n   * With a folder in hand, we boot up the MasterProcess for the folder in question.\n   * When it is ready, we kick off the content initialization step with initializeFolder.\n   */\n  initializeProject (maybeProjectName, { projectsHome, projectPath, skipContentCreation, organizationName, authorName }, maybeUsername, maybePassword, finish) {\n    const projectOptions = {\n      projectsHome,\n      projectPath,\n      skipContentCreation,\n      organizationName,\n      projectName: maybeProjectName,\n      username: maybeUsername,\n      password: maybePassword\n    }\n\n    // TODO/QUESTION: When do these attributes get set upstream?\n    if (!projectOptions.organizationName) projectOptions.organizationName = this.get('organizationName')\n    if (!projectOptions.authorName) projectOptions.authorName = this.get('username')\n\n    // We don't need to waste time making these bundles before we have done anything -\n    // Instead, we'll generate them just-in-time when the user saves.\n    projectOptions.skipCDNBundles = true\n\n    let projectFolder // To be populated momentarily...\n\n    return async.series([\n      (cb) => {\n        return this.getCurrentOrganizationName((err, organizationName) => {\n          if (err) return cb(err)\n          projectOptions.organizationName = organizationName\n          return cb()\n        })\n      },\n      (cb) => {\n        return ProjectFolder.ensureProject(projectOptions, (err, _projectFolder) => {\n          if (err) return cb(err)\n          projectFolder = _projectFolder\n          return cb()\n        })\n      },\n      (cb) => {\n        // Just a second check to make sure we created the folder - probably not necessary\n        return fse.exists(projectFolder, (doesFolderExist) => {\n          if (!doesFolderExist) return cb(new Error('Project folder does not exist'))\n          return cb()\n        })\n      },\n      (cb) => {\n        return this.spawnSubgroup(this.subprocs, { folder: projectFolder }, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb()\n        })\n      }\n    ], (err) => {\n      if (err) {\n        this.sentryError('initializeProject', err)\n        return finish(err)\n      }\n\n      // QUESTION: Does this *need* to happen down here after the org fetch?\n      const gitInitializeUsername = projectOptions.username || this.get('username')\n      const gitInitializePassword = projectOptions.password || this.get('password')\n\n      // A simpler project options to avoid passing options only used for the first pass, e.g. skipContentCreation\n      const projectOptionsAgain = {\n        organizationName: projectOptions.organizationName,\n        username: gitInitializeUsername,\n        password: gitInitializePassword,\n        authorName\n      }\n\n      return this.initializeFolder(maybeProjectName, projectFolder, gitInitializeUsername, gitInitializePassword, projectOptionsAgain, (err) => {\n        if (err) return finish(err)\n        // HACK: used when restarting the process to allow us to reinitialize properly\n        this.projects[projectFolder] = {\n          name: maybeProjectName,\n          folder: projectFolder,\n          username: gitInitializePassword,\n          password: gitInitializePassword,\n          organization: projectOptionsAgain.organizationName,\n          options: projectOptionsAgain\n        }\n\n        if (maybeProjectName) {\n          // HACK: alias to allow lookup by project name\n          this.projects[maybeProjectName] = this.projects[projectFolder]\n        }\n\n        return finish(null, projectFolder)\n      })\n    })\n  }\n\n  /**\n   * Returns the absolute path of the folder of a project by name, if we are tracking one.\n   */\n  getFolderFor (projectName) {\n    let info = this.getProjectInfoFor(projectName)\n    if (!info) return null\n    return info.folder\n  }\n\n  getProjectInfoFor (projectNameOrFolder) {\n    return this.projects[projectNameOrFolder]\n  }\n\n  /**\n   * @method initializeFolder\n   * @description Assuming we already have a folder created, an organization name, etc., now bootstrap the folder itself.\n   */\n  initializeFolder (maybeProjectName, folder, maybeUsername, maybePassword, projectOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [maybeProjectName, maybeUsername, maybePassword, projectOptions], cb)\n  }\n\n  startProject (maybeProjectName, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'startProject', [], cb)\n  }\n\n  restartProject (folder, projectInfo, cb) {\n    // We run initializeFolder first to ensure the Git bootstrapping works correctly, especially setting\n    // a branch name and ensuring we have a good baseline commit with which to start; we get errors on restart\n    // unless we do this so take care if you plan to re/move this\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [projectInfo.name, projectInfo.username, projectInfo.password, projectInfo.options], (err) => {\n      if (err) return cb(err)\n      return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'restartProject', [], cb)\n    })\n  }\n\n  isUserAuthenticated (cb) {\n    var answer = sdkClient.config.isAuthenticated()\n    if (!answer) {\n      return cb(null, { isAuthed: false })\n    }\n    return this.getCurrentOrganizationName((err, organizationName) => {\n      if (err) return cb(err)\n      const username = sdkClient.config.getUserId()\n      mixpanel.mergeToPayload({ distinct_id: username })\n      if (Raven) {\n        Raven.setContext({\n          user: { email: username },\n          tags: { username }\n        })\n      }\n      return cb(null, {\n        isAuthed: true,\n        username: username,\n        authToken: sdkClient.config.getAuthToken(),\n        organizationName\n      })\n    })\n  }\n\n  authenticateUser (username, password, cb) {\n    this.set('organizationName', null) // Unset this cache to avoid writing others folders if somebody switches accounts in the middle of a session\n    return inkstone.user.authenticate(username, password, (authErr, authResponse, httpResponse) => {\n      if (authErr) return cb(authErr)\n      if (httpResponse.statusCode === 401) return cb(new Error('Unauthorized'))\n\n      if (httpResponse.statusCode > 499) {\n        const serverErr = new Error(`Auth HTTP Error: ${httpResponse.statusCode}`)\n        this.sentryError('authenticateUser', serverErr)\n        return cb(serverErr)\n      }\n\n      if (httpResponse.statusCode > 299) {\n        const unexpectedError = new Error(`Auth HTTP Error: ${httpResponse.statusCode}`)\n        return cb(unexpectedError)\n      }\n\n      if (!authResponse) return cb(new Error('Auth response was empty'))\n      this.set('username', username)\n      this.set('password', password)\n      this.set('inkstoneAuthToken', authResponse.Token)\n      sdkClient.config.setAuthToken(authResponse.Token)\n      sdkClient.config.setUserId(username)\n      mixpanel.mergeToPayload({ distinct_id: username })\n      if (Raven) {\n        Raven.setContext({\n          user: { email: username },\n          tags: { username }\n        })\n      }\n      return this.getCurrentOrganizationName((err, organizationName) => {\n        if (err) return cb(err)\n        return cb(null, {\n          isAuthed: true,\n          username: username,\n          authToken: authResponse.Token,\n          organizationName\n        })\n      })\n    })\n  }\n\n  getCurrentOrganizationName (cb) {\n    if (this.get('organizationName')) return cb(null, this.get('organizationName'))\n    logger.info('[plumbing] fetching organization name for current user')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.organization.list(authToken, (orgErr, orgsArray, orgHttpResp) => {\n      if (orgErr) return cb(new Error('Organization error'))\n      if (orgHttpResp.statusCode === 401) return cb(new Error('Unauthorized organization'))\n      if (orgHttpResp.statusCode > 299) return cb(new Error(`Error status code: ${orgHttpResp.statusCode}`))\n      if (!orgsArray || orgsArray.length < 1) return cb(new Error('No organization found'))\n      // Cache this since it's used to write/manage some project files\n      var organizationName = orgsArray[0].Name\n      logger.info('[plumbing] organization name:', organizationName)\n      this.set('organizationName', organizationName)\n      return cb(null, this.get('organizationName'))\n    })\n  }\n\n  listProjects (cb) {\n    logger.info('[plumbing] listing projects')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.list(authToken, (projectListErr, projectsList) => {\n      if (projectListErr) {\n        this.sentryError('listProjects', projectListErr)\n        return cb(projectListErr)\n      }\n      var finalList = projectsList.map(remapProjectObjectToExpectedFormat)\n      logger.info('[plumbing] fetched project list', JSON.stringify(finalList))\n      return cb(null, finalList)\n    })\n  }\n\n  createProject (name, cb) {\n    logger.info('[plumbing] creating project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.create(authToken, { Name: name }, (projectCreateErr, project) => {\n      if (projectCreateErr) {\n        this.sentryError('createProject', projectCreateErr)\n        return cb(projectCreateErr)\n      }\n      return setTimeout(() => {\n        return cb(null, remapProjectObjectToExpectedFormat(project))\n      }, CODE_COMMIT_RACE_CONDITION_DELAY)\n    })\n  }\n\n  deleteProject (name, cb) {\n    logger.info('[plumbing] deleting project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.deleteByName(authToken, name, (deleteErr) => {\n      if (deleteErr) {\n        this.sentryError('deleteProject', deleteErr)\n        return cb(deleteErr)\n      }\n      return cb()\n    })\n  }\n\n  discardProjectChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'discardProjectChanges', [], cb)\n  }\n\n  saveProject (folder, projectName, maybeUsername, maybePassword, saveOptions, cb) {\n    if (!saveOptions) saveOptions = {}\n    if (!saveOptions.authorName) saveOptions.authorName = this.get('username')\n    if (!saveOptions.organizationName) saveOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] saving with options', saveOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'saveProject', [projectName, maybeUsername, maybePassword, saveOptions], cb)\n  }\n\n  previewProject (folder, projectName, previewOptions, cb) {\n    if (!previewOptions) previewOptions = {}\n    if (!previewOptions.authorName) previewOptions.authorName = this.get('username')\n    if (!previewOptions.organizationName) previewOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] previewing with options', previewOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'previewProject', [projectName, previewOptions], cb)\n  }\n\n  fetchProjectInfo (folder, projectName, maybeUsername, maybePassword, fetchOptions, cb) {\n    if (!fetchOptions) fetchOptions = {}\n    if (!fetchOptions.authorName) fetchOptions.authorName = this.get('username')\n    if (!fetchOptions.organizationName) fetchOptions.organizationName = this.get('organizationName')\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchProjectInfo', [projectName, maybeUsername, maybePassword, fetchOptions], cb)\n  }\n\n  listAssets (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchAssets', [], cb)\n  }\n\n  linkAsset (assetAbspath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'linkAsset', [assetAbspath], cb)\n  }\n\n  bulkLinkAssets (assetsAbspaths, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'bulkLinkAssets', [assetsAbspaths], cb)\n  }\n\n  unlinkAsset (assetRelpath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'unlinkAsset', [assetRelpath], cb)\n  }\n\n  gitUndo (folder, undoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitUndo', [folder, undoOptions], cb)\n  }\n\n  gitRedo (folder, redoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitRedo', [folder, redoOptions], cb)\n  }\n\n  readMetadata (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readMetadata', [folder], cb)\n  }\n\n  readAllStateValues (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllStateValues', [folder], cb)\n  }\n\n  readAllEventHandlers (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllEventHandlers', [folder], cb)\n  }\n\n  /** ------------------- */\n  /** ------------------- */\n  /** ------------------- */\n\n  handleClientAction (type, alias, folder, method, params, cb) {\n    // Params always arrive with the folder as the first argument, so we strip that off\n    params = params.slice(1)\n\n    // This special method gets called frequently (up to 60 times per second) so fast-path it and don't log it\n    if (method === 'setTimelineTime') {\n      if (alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_GLASS, method, params.concat({ from: alias }), () => {})\n      } else if (alias === 'glass') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_TIMELINE, method, params.concat({ from: alias }), () => {})\n      }\n    }\n\n    // HACK: A few methods require this special handling; #FIXME\n    if (method === 'instantiateComponent') {\n      var modulepath = getNormalizedComponentModulePath(params[0], /* ?? */ '')\n      if (!modulepath) {\n        params[0] = path.normalize(path.relative(folder, params[0]))\n      }\n    }\n\n    // Start with the glass, since that's most visible, then move through the rest, and end\n    // with master at the end, which results in a file system update reflecting the change\n    async.eachSeries([Q_GLASS, Q_TIMELINE, Q_CREATOR, Q_MASTER], (clientSpec, nextStep) => {\n      if (clientSpec.alias === alias) {\n        if (method !== 'mergeDesigns') {\n          // Don't send to oneself, unless it is mergeDesigns, which is a special snowflake\n          // that originates in 'master' but also needs to be sent back to it (HACK)\n          return nextStep()\n        }\n      }\n\n      // There are a bunch of methods (actually...most of them) that creator doesn't need to receive\n      if ((method === 'moveSegmentEndpoints' || method === 'mergeDesigns' || method === 'moveKeyframes') && clientSpec.alias === 'creator') {\n        return nextStep()\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] -> client action ${method} being sent to ${clientSpec.alias}`)\n      }\n\n      // HACK: Glass and timeline always expect some metadata as the last argument\n      if (clientSpec.alias === 'glass' || clientSpec.alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params.concat({ from: alias }), (err, maybeOutput) => {\n          if (err) return nextStep(err)\n\n          // HACK: Stupidly we have to rely on glass to tell us where to position the element based on the\n          // offset of the artboard. So in this one case we have the glass transmit a return value that\n          // we read and then use as the payload to the next actions in this pipeline\n          if (method === 'instantiateComponent' && clientSpec.alias === 'glass') {\n            if (maybeOutput && maybeOutput.center) {\n              // Called 'posdata' in the ActiveComponent method as the second arg.\n              // The third arg is the more open-ended 'metadata' (API change from May 10)\n              params[1] = maybeOutput.center\n            }\n          }\n\n          return nextStep()\n        })\n      } else {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params, (err) => {\n          if (err) return nextStep(err)\n          return nextStep()\n        })\n      }\n    }, (err) => {\n      if (err) {\n        if (!IGNORED_METHOD_MESSAGES[method]) {\n          logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} errored`, err)\n        }\n        if (cb) return cb(err)\n        return void (0)\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} complete`)\n      }\n      if (cb) return cb()\n      return void (0)\n    })\n  }\n}\n\nPlumbing.prototype.spawnSubgroup = function (existingSpawnedSubprocs, haiku, cb) {\n  logger.info('[plumbing] spawning subprocesses for this group', haiku)\n  const subprocs = []\n  // MasterProcess can only operate if a folder is defined\n  if (haiku.folder) {\n    // Starting master from this point assumes it has been triggered explicitly\n    // as opposed to by an automatic restart attempt, so we reset the restart attempt\n    // counter back to zero.\n    this._masterRestartAttempts[haiku.folder] = 0\n\n    subprocs.push(PROCS.master)\n  }\n  if (haiku.mode === 'creator') {\n    subprocs.push(PROCS.creator)\n  }\n  return this.spawnSubprocesses(existingSpawnedSubprocs, haiku, subprocs, cb)\n}\n\nPlumbing.prototype.spawnSubprocesses = function (existingSpawnedSubprocs, haiku, subprocs, cb) {\n  this.extendEnvironment(haiku)\n  return async.map(subprocs, (subproc, next) => {\n    return this.spawnSubprocess(existingSpawnedSubprocs, haiku.folder, subproc, next)\n  }, (err, spawned) => {\n    if (err) return cb(err)\n    return cb(null, spawned)\n  })\n}\n\nPlumbing.prototype.spawnSubprocess = function spawnSubprocess (existingSpawnedSubprocs, folder, { name, path, args, opts }, cb) {\n  const existing = find(existingSpawnedSubprocs, { _attributes: { name, folder } })\n  if (existing) {\n    // Reconnection (via websocket) is only available if the process itself is still alive\n    if (existing.connected && !existing._attributes.disconnected && !existing._attributes.exited && !existing._attributes.closed) {\n      if (existing.reestablishConnection) existing.reestablishConnection()\n      else (existing.send('reestablishConnection!'))\n\n      logger.info(`[plumbing] reusing existing ${name} process`)\n      existing._attributes.reused = true\n\n      return cb(null, existing)\n    }\n  }\n\n  let proc\n\n  if (opts && opts.electron && isElectronMain() && typeof path === 'object') {\n    // If we are *in* Electron, this 'path', which would normally be an absolute path to the\n    // Electron binary, is actually the require('electron') export object. Instead of launching\n    // the subprocess 'with' Electron binary as the command, we can just 'require' it since\n    // that is where we already are. This is condition is critical for our packaging hooks.\n    // Be aware that a change here might break the ability to create a working distribution.\n    logger.info(`[plumbing] requiring ${name} @ ${args[0]}`)\n    proc = require(args[0]).default\n  } else {\n    // If we aren't in electron, start the process using the electron binary path\n    if (opts && opts.spawn) {\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--enable-logging', '--remote-debugging-port=9222')\n      }\n      proc = cp.spawn(path, args, { stdio: [null, null, null, 'ipc'] })\n    } else {\n      args = args || []\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--debug=5859')\n      }\n      proc = cp.fork(path, args)\n    }\n\n    logger.info(`[plumbing] proc ${name} created @ ${path}`)\n  }\n\n  proc._attributes = { name, folder, id: _id() }\n\n  proc.on('exit', () => {\n    logger.sacred(`[plumbing] proc ${name} exiting`)\n\n    proc._attributes.exited = true\n\n    if (proc._attributes.name) {\n      // If electron is finished, we should clean up stuff. This usually means the user has closed the view.\n      if (proc._attributes.name.match(/electron/) || name.match(/creator/)) {\n        emitter.emit('teardown-requested')\n      } else if (proc._attributes.name.match(/master/)) {\n        // Avoid ending up in an endless loop of fail if we find ourselves torn down\n        if (!this._isTornDown) {\n          if (!this._masterRestartAttempts[folder]) {\n            this._masterRestartAttempts[folder] = 0\n          }\n          this._masterRestartAttempts[folder] += 1\n          if (this._masterRestartAttempts[folder] > MAX_MASTER_RESTART_ATTEMPTS) {\n            return this._handleUnrecoverableError(new Error(`Cannot respawn master for ${folder} after too many attempts`))\n          }\n\n          // Master should probably keep running, since it does peristence stuff, so reconnect if we detect it crashed.\n          logger.sacred(`[plumbing] trying to respawn master for ${folder}`)\n\n          this.spawnSubprocess(existingSpawnedSubprocs, folder, { name, path, args, opts }, (err, newProc) => {\n            if (err) {\n              return this._handleUnrecoverableError(new Error(`Unable to respawn master for ${folder} because ${_safeErrorMessage(err)}`))\n            }\n\n            newProc._attributes.closed = undefined\n            newProc._attributes.disconnected = undefined\n            newProc._attributes.exited = undefined\n\n            existingSpawnedSubprocs.push(newProc)\n\n            logger.info(`[plumbing] respawned proc master for folder ${folder}; restarting project`)\n\n            // Emit this event to notify ourselves that we want to wait for the websocket\n            // in the given process to reconnect itself and then do any of the usual setup\n            emitter.emit('proc-respawned', folder, name)\n          })\n        }\n      }\n    }\n\n    // Remove the old, unused process from the list of existing ones\n    for (let i = existingSpawnedSubprocs.length - 1; i >= 0; i--) {\n      let existing = existingSpawnedSubprocs[i]\n      if (existing === proc) {\n        existingSpawnedSubprocs.splice(i, 1)\n      }\n    }\n  })\n\n  proc.on('close', () => {\n    proc._attributes.closed = true\n  })\n  proc.on('disconnect', () => {\n    proc._attributes.disconnected = true\n  })\n  proc.on('error', (error) => {\n    logger.info(`[plumbing] proc ${name} got error`, error)\n  })\n  proc.on('message', (message) => {\n    logger.info(`[plumbing] proc ${name} got message`, message)\n  })\n  proc.on('request', (message) => {\n    logger.info(`[plumbing] proc ${name} got request`, message)\n  })\n\n  return cb(null, proc)\n}\n\nlet portrange = 45032\n\n// On the given host, return the port number of an open port. Note that the host must be\n// specified otherwise you end up getting false positives! E.g. ipv4 0.0.0.0 vs ipv6 ::.\nfunction getPort (host, cb) {\n  let port = portrange\n  portrange += 1\n  let server = net.createServer()\n  server.listen(port, host)\n  server.once('listening', () => {\n    server.once('close', () => {\n      return cb(null, port)\n    })\n    server.close()\n  })\n  server.on('error', (err) => {\n    if (err && err.code === 'EADDRINUSE') {\n      return getPort(host, cb)\n    }\n    // If not an address-in-use error, something bad has happened and we likely shouldn't continue\n    throw err\n  })\n  return server\n}\n\nPlumbing.prototype.launchControlServer = function launchControlServer (socketInfo, cb) {\n  const host = (socketInfo && socketInfo.host) || '0.0.0.0'\n\n  if (socketInfo && socketInfo.port) {\n    logger.sacred(`[plumbing] plumbing websocket server listening on specified port ${socketInfo.port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: socketInfo.port })\n\n    return cb(null, websocketServer, host, socketInfo.port)\n  }\n\n  logger.info('[plumbing] finding open port...')\n\n  return getPort(host, (err, port) => {\n    if (err) return cb(err)\n\n    logger.sacred(`[plumbing] plumbing websocket server listening on discovered port ${port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: port })\n\n    return cb(null, websocketServer, host, port)\n  })\n}\n\nPlumbing.prototype.extendEnvironment = function extendEnvironment (haiku) {\n  const HAIKU_ENV = JSON.parse(process.env.HAIKU_ENV || '{}')\n  merge(HAIKU_ENV, haiku)\n  logger.sacred('[plumbing] environment forwarding:', JSON.stringify(HAIKU_ENV, 2, null))\n  process.env.HAIKU_ENV = JSON.stringify(HAIKU_ENV) // Forward env to subprocesses\n}\n\nfunction getWsParams (websocket, request) {\n  const url = request.url || ''\n  const query = url.split('?')[1] || ''\n  const params = qs.parse(query)\n  params.url = url\n  return params\n}\n\nPlumbing.prototype.createControlSocket = function createControlSocket (socketInfo) {\n  const websocketServer = new WebSocket.Server({ port: socketInfo.port, host: socketInfo.host })\n\n  // Reserve this port so that OpenPort sees it as being unavailable in case other instances\n  // of plumbing happen to open. This isn't intended to do anything except that, hence the no-op listener.\n  // const httpServer = http.createServer()\n  // httpServer.listen(socketInfo.port)\n\n  websocketServer.on('connection', (websocket, request) => {\n    const params = getWsParams(websocket, request)\n\n    if (!params.type) params.type = 'default'\n    if (!params.haiku) params.haiku = {}\n    if (!websocket.params) websocket.params = params\n\n    const type = websocket.params && websocket.params.type\n    const alias = websocket.params && websocket.params.alias\n\n    let folder = websocket.params && websocket.params.folder\n\n    websocketServer.emit('connected', websocket, type, alias, folder, params)\n\n    websocket.on('message', (data) => {\n      const message = JSON.parse(data)\n\n      // Allow explicit override; Creator uses this!\n      // Also some tests use this.\n      if (message.folder) folder = message.folder\n\n      websocketServer.emit('message', type, alias, folder, message, websocket, websocketServer, createResponder(message, websocket))\n    })\n  })\n\n  return websocketServer\n}\n\nfunction sendMessageToClient (client, message) {\n  if (client.readyState === WebSocket.OPEN) {\n    const data = JSON.stringify(message)\n    return client.send(data)\n  }\n}\n\nfunction createResponder (message, websocket) {\n  return function messageResponder (error, result) {\n    const reply = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: result || void (0),\n      error: (error) ? serializeError(error) : void (0)\n    }\n    sendMessageToClient(websocket, reply)\n  }\n}\n\nfunction remapProjectObjectToExpectedFormat (projectObject) {\n  return {\n    projectName: projectObject.Name\n    // GitRemoteUrl\n    // GitRemoteName\n    // GitRemoteArn\n  }\n}\n\nfunction isElectronMain () {\n  return typeof process !== 'undefined' && process.versions && !!process.versions.electron\n}\n"]}