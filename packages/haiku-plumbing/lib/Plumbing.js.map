{"version":3,"sources":["../src/Plumbing.js"],"names":["ProjectFolder","IGNORED_METHOD_MESSAGES","setTimelineTime","doesProjectHaveUnsavedChanges","masterHeartbeat","METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY","toggleDevTools","openTextEditor","openTerminal","saveProject","previewProject","fetchProjectInfo","ROOT_DIR","join","__dirname","PROC_DIR","PROCS","master","name","path","creator","require","args","opts","electron","spawn","Q_GLASS","alias","Q_MASTER","Q_TIMELINE","Q_CREATOR","AWAIT_INTERVAL","WAIT_DELAY","HAIKU_DEFAULTS","socket","port","process","env","HAIKU_CONTROL_PORT","host","HAIKU_CONTROL_HOST","HAIKU_API","setConfig","baseUrl","emitter","PINFO","pid","basename","__filename","execPath","idIncrementor","_id","PLUMBING_INSTANCES","on","info","forEach","plumbing","teardown","exit","Plumbing","push","subprocs","envoys","servers","clients","requests","caches","_isTornDown","_methodMessages","executeMethodMessagesWorker","folder","awaitFolderClientWithQuery","err","Error","restartProject","haiku","cb","envoyServer","WebSocket","logger","ready","then","envoy","envoyTimelineHandler","envoyTourHandler","bindHandler","launchControlServer","server","HAIKU_PLUMBING_PORT","HAIKU_PLUMBING_HOST","url","websocket","type","params","JSON","stringify","i","length","client","readyState","OPEN","close","splice","id","index","_index","message","responder","sendBroadcastMessage","callback","error","result","method","processMethodMessage","spawnSubgroup","spawned","apply","stack","nextMethodMessage","shift","setTimeout","bind","methodMessageBeforeLog","handleClientAction","methodMessageAfterLog","plumbingMethod","sendMessageToClient","concat","query","timeout","creatorClient","clientsOfFolder","clientMatching","sendClientMethod","sendClientRequest","undefined","Math","random","data","send","subproc","kill","stdin","pause","signal","sendFolderSpecificClientMethodQuery","masterState","maybeProjectName","maybeUsername","maybePassword","finish","projectsHome","projectPath","skipContentCreation","organizationName","authorName","projectOptions","projectName","username","password","get","skipCDNBundles","projectFolder","series","getCurrentOrganizationName","ensureProject","_projectFolder","exists","doesFolderExist","gitInitializeUsername","gitInitializePassword","projectOptionsAgain","initializeFolder","answer","config","isAuthenticated","isAuthed","getUserId","authToken","getAuthToken","set","user","authenticate","authErr","authResponse","httpResponse","statusCode","Token","setAuthToken","setUserId","organization","list","orgErr","orgsArray","orgHttpResp","Name","project","projectListErr","projectsList","finalList","map","remapProjectObjectToExpectedFormat","create","projectCreateErr","deleteByName","saveOptions","previewOptions","fetchOptions","assetAbspath","assetRelpath","undoOptions","redoOptions","slice","from","modulepath","normalize","relative","eachSeries","clientSpec","nextStep","maybeOutput","center","prototype","existingSpawnedSubprocs","mode","spawnSubprocesses","extendEnvironment","next","spawnSubprocess","existing","_attributes","connected","disconnected","exited","closed","reestablishConnection","reused","proc","isElectronMain","default","NODE_ENV","NO_REMOTE_DEBUG","stdio","fork","match","emit","newProc","portrange","getPort","createServer","listen","once","code","socketInfo","websocketServer","createControlSocket","HAIKU_ENV","parse","getWsParams","request","split","Server","createResponder","messageResponder","reply","jsonrpc","projectObject","versions"],"mappings":"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","file":"Plumbing.js","sourcesContent":["import path from 'path'\nimport async from 'async'\nimport fse from 'haiku-fs-extra'\nimport find from 'lodash.find'\nimport merge from 'lodash.merge'\nimport filter from 'lodash.filter'\nimport net from 'net'\nimport cp from 'child_process'\nimport qs from 'qs'\nimport WebSocket from 'ws'\nimport { EventEmitter } from 'events'\nimport EnvoyServer from 'haiku-sdk-creator/lib/envoy/server'\nimport EnvoyLogger from 'haiku-sdk-creator/lib/envoy/logger'\nimport TimelineHandler from 'haiku-sdk-creator/lib/timeline'\nimport TourHandler from 'haiku-sdk-creator/lib/tour'\nimport { inkstone } from 'haiku-sdk-inkstone'\nimport { client as sdkClient } from 'haiku-sdk-client'\nimport StateObject from 'haiku-state-object'\nimport serializeError from 'haiku-serialization/src/utils/serializeError'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport * as ProjectFolder from './ProjectFolder'\nimport getNormalizedComponentModulePath from 'haiku-serialization/src/model/helpers/getNormalizedComponentModulePath'\n\nconst IGNORED_METHOD_MESSAGES = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true\n  // These are noisy, maybe not worth including?\n  // applyPropertyGroupDelta: true,\n  // applyPropertyGroupValue: true,\n  // moveSegmentEndpoints: true,\n  // moveKeyframes: true\n}\n\n// See note under 'processMethodMessage' for the purpose of this\nconst METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  toggleDevTools: true,\n  openTextEditor: true,\n  openTerminal: true,\n  saveProject: true,\n  previewProject: true,\n  fetchProjectInfo: true\n}\n\nconst ROOT_DIR = path.join(__dirname, '..')\nconst PROC_DIR = path.join(__dirname)\n\nconst PROCS = {\n  master: { name: 'master', path: path.join(PROC_DIR, 'MasterProcess.js') },\n  creator: { name: 'creator', path: require('electron'), args: [path.join(ROOT_DIR, 'node_modules', 'haiku-creator-electron', 'lib', 'electron.js')], opts: { electron: true, spawn: true } }\n}\n\nconst Q_GLASS = { alias: 'glass' }\nconst Q_MASTER = { alias: 'master' }\nconst Q_TIMELINE = { alias: 'timeline' }\nconst Q_CREATOR = { alias: 'creator' }\n\nconst AWAIT_INTERVAL = 100\nconst WAIT_DELAY = 10 * 1000\n\nconst HAIKU_DEFAULTS = {\n  socket: {\n    port: process.env.HAIKU_CONTROL_PORT,\n    host: process.env.HAIKU_CONTROL_HOST || '0.0.0.0'\n  }\n}\n\n// configure inkstone, useful for testing off of dev (HAIKU_API=https://localhost:8080/)\nif (process.env.HAIKU_API) {\n  inkstone.setConfig({\n    baseUrl: process.env.HAIKU_API\n  })\n}\n\nconst emitter = new EventEmitter()\n\nconst PINFO = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nvar idIncrementor = 1\nfunction _id () {\n  return idIncrementor++\n}\n\nconst PLUMBING_INSTANCES = []\n\n// In test environment these listeners may get wrapped so we begin listening\n// to them immediately in the hope that we can start listening before the\n// test wrapper steps in and interferes\nprocess.on('exit', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) exiting`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n})\nprocess.on('SIGINT', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGINT`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\nprocess.on('SIGTERM', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGTERM`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\n\nexport default class Plumbing extends StateObject {\n  constructor () {\n    super()\n\n    // Keep track of all PLUMBING_INSTANCES so we can put our process.on listeners\n    // above this constructor, which is necessary in test environments such\n    // as tape where exit might never get called despite an exit.\n    PLUMBING_INSTANCES.push(this)\n\n    this.subprocs = []\n    this.envoys = []\n    this.servers = []\n    this.clients = []\n    this.requests = {}\n    this.caches = {}\n\n    // Keep track of whether we got a teardown signal so we know whether we should keep trying to\n    // reconnect any subprocs that seem to have disconnected. This seems useless (why not just kill\n    // the process) but keep in mind we need to unit test this.\n    this._isTornDown = false\n\n    this._methodMessages = []\n    this.executeMethodMessagesWorker()\n\n    emitter.on('teardown-requested', () => {\n      this.teardown()\n    })\n\n    emitter.on('proc-respawned', (folder, alias) => {\n      if (this._isTornDown) {\n        logger.info('[plumbing] we are torn down, so not restarting client')\n        return void (0)\n      }\n\n      logger.info(`[plumbing] restarting client ${alias} in ${folder}`)\n\n      // This just waits until we have a 'master' client available with the given name.\n      // The reconnect logic is elsewhere\n      return this.awaitFolderClientWithQuery(folder, 'proc-respawned+restartProject', { alias }, WAIT_DELAY, (err) => {\n        if (err) {\n          throw new Error(`Waited too long for client ${alias} in ${folder} because ${err}`)\n        }\n\n        if (alias === 'master') {\n          // This actually calls the method in question on the given client\n          return this.restartProject(null/* projectName is ignored */, folder, (err) => {\n            if (err) {\n              throw new Error(`Unable to finish restart on client ${alias} in ${folder} because ${err}`)\n            }\n            logger.info(`[plumbing] restarted client ${alias} in ${folder}`)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Mostly-internal methods\n   */\n\n  launch (haiku = {}, cb) {\n    haiku = merge({}, HAIKU_DEFAULTS, haiku)\n\n    logger.info('[plumbing] launching plumbing', haiku)\n\n    logger.info('[plumbing] launching envoy server')\n\n    var envoyServer = new EnvoyServer({\n      WebSocket: WebSocket,\n      logger: new EnvoyLogger('warn', logger)\n    })\n\n    this.envoys.push(envoyServer)\n\n    return envoyServer.ready().then(() => {\n      if (!haiku.envoy) haiku.envoy = {} // Gets stored in env vars before subprocs created\n      haiku.envoy.port = envoyServer.port\n      haiku.envoy.host = envoyServer.host\n\n      var envoyTimelineHandler = new TimelineHandler(envoyServer)\n      var envoyTourHandler = new TourHandler(envoyServer)\n\n      envoyServer.bindHandler('timeline', TimelineHandler, envoyTimelineHandler)\n      envoyServer.bindHandler('tour', TourHandler, envoyTourHandler)\n\n      logger.info('[plumbing] launching plumbing control server')\n\n      return this.launchControlServer(haiku.socket, (err, server, host, port) => {\n        if (err) return cb(err)\n\n        // Forward these env vars to creator\n        process.env.HAIKU_PLUMBING_PORT = port\n        process.env.HAIKU_PLUMBING_HOST = host\n\n        if (!haiku.socket) haiku.socket = {}\n        haiku.socket.port = port\n        haiku.socket.host = host\n        haiku.plumbing = { url: `http://${host}:${port}` }\n\n        this.servers.push(server)\n\n        server.on('connected', (websocket, type, alias, folder, params) => {\n          logger.info(`[plumbing] websocket client connection opened: (${type} ${alias}) ${JSON.stringify(params)}`)\n\n          // Don't allow duplicate clients\n          for (let i = this.clients.length - 1; i >= 0; i--) {\n            let client = this.clients[i]\n            if (client.params) {\n              if (client.params.alias === alias && client.params.folder === folder) {\n                if (client.readyState === WebSocket.OPEN) {\n                  client.close()\n                }\n                this.clients.splice(i, 1)\n              }\n            }\n          }\n\n          websocket.params.id = _id()\n          const index = this.clients.push(websocket) - 1\n\n          websocket._index = index\n\n          websocket.on('close', () => {\n            logger.info(`[plumbing] websocket client connection closed (${type} ${alias})`)\n            this.clients.splice(index, 1)\n          })\n        })\n\n        server.on('message', (type, alias, folder, message, websocket, server, responder) => {\n          // IMPORTANT! Creator uses this\n          if (!folder && message.folder) {\n            folder = message.folder\n          }\n\n          if (message.type === 'broadcast') {\n            // Give clients the chance to emit events to all others\n            this.sendBroadcastMessage(message, folder, alias, websocket)\n          } else if (message.id && this.requests[message.id]) {\n            // If we have an entry in this.requests, that means this is a reply\n            const { callback } = this.requests[message.id]\n            delete this.requests[message.id]\n            return callback(message.error, message.result, message)\n          } else if (message.method) { // This condition MUST happen before the one above since .method is present on that one too\n            // Ensure that actions/methods occur in order by using a queue\n            this.processMethodMessage(type, alias, folder, message, responder)\n          }\n        })\n\n        this.spawnSubgroup(this.subprocs, haiku, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb(null, host, port, server, spawned, haiku.envoy)\n        })\n      })\n    })\n  }\n\n  methodMessageBeforeLog (message, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.info(`[plumbing] ↓-------- BEGAN ${message.method} from ${alias} --------↓`)\n      logger.info(`[plumbing] ${message.method} -> ${JSON.stringify(message.params)}`)\n    }\n  }\n\n  methodMessageAfterLog (message, err, result, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.info(`[plumbing] ${message.method} <-`, (err && err.message) || '', (err && err.stack) || '', result)\n      logger.info(`[plumbing] ↑-------- ENDED ${message.method} from ${alias} --------↑`)\n    }\n  }\n\n  executeMethodMessagesWorker () {\n    if (this._isTornDown) return void (0) // Avoid leaking a handle\n    let nextMethodMessage = this._methodMessages.shift()\n    if (!nextMethodMessage) return setTimeout(this.executeMethodMessagesWorker.bind(this), 64)\n\n    let { type, alias, folder, message, cb } = nextMethodMessage\n\n    this.methodMessageBeforeLog(message, alias)\n\n    // Actions are a special case of methods that end up routed through all of the clients,\n    // glass -> timeline -> master before returning. They go through one handler as opposed\n    // to the normal 'methods' which plumbing handles on a more a la carte basis\n    if (message.type === 'action') {\n      return this.handleClientAction(type, alias, folder, message.method, message.params, (err, result) => {\n        this.methodMessageAfterLog(message, err, result, alias)\n        cb(err, result)\n        this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n      })\n    }\n\n    return this.plumbingMethod(message.method, message.params || [], (err, result) => {\n      this.methodMessageAfterLog(message, err, result, alias)\n      cb(err, result)\n      this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n    })\n  }\n\n  processMethodMessage (type, alias, folder, message, cb) {\n    // Certain messages aren't of a kind that we can reliably enqueue, either because they happen\n    // too fast or because they have a 'fire and forget' nature.\n    if (METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY[message.method]) {\n      if (message.type === 'action') return this.handleClientAction(type, alias, folder, message.method, message.params, cb)\n      else return this.plumbingMethod(message.method, message.params, cb)\n    } else {\n      this._methodMessages.push({ type, alias, folder, message, cb })\n    }\n  }\n\n  sendBroadcastMessage (message, folder, alias, websocket) {\n    this.clients.forEach((client) => {\n      if (websocket && client === websocket) return void (0) // Skip message's send\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      delete message.id // Don't confuse this as a request/response\n      sendMessageToClient(client, merge(message, { folder, alias }))\n    })\n  }\n\n  plumbingMethod (method, params = [], cb) {\n    if (typeof this[method] !== 'function') return cb(new Error(`Plumbing has no method '${method}'`))\n    return this[method].apply(this, params.concat((error, result) => {\n      if (error) return cb(error)\n      return cb(null, result)\n    }))\n  }\n\n  awaitFolderClientWithQuery (folder, method, query, timeout, cb) {\n    if (!folder) return cb(new Error('Folder argument was missing'))\n    if (!query) return cb(new Error('Query argument was missing'))\n    if (timeout <= 0) {\n      return cb(new Error(`Timed out waiting for client ${JSON.stringify(query)} of ${folder} to connect`))\n    }\n\n    // // uncomment me for insight into why a request might not be making it\n    // console.log('==== awaiting', method, query)\n\n    // HACK: At the time of this writing, there is only \"one\" creator client, not one per folder.\n    // So the method just get ssent to the one client (if available)\n    if (query.alias === 'creator') {\n      const creatorClient = find(this.clients, { params: query })\n      if (creatorClient) {\n        return cb(null, creatorClient)\n      }\n    } else {\n      const clientsOfFolder = filter(this.clients, { params: { folder } })\n      if (clientsOfFolder && clientsOfFolder.length > 0) {\n        const clientMatching = find(clientsOfFolder, { params: query })\n        if (clientMatching) {\n          return cb(null, clientMatching)\n        }\n      }\n    }\n    return setTimeout(() => {\n      return this.awaitFolderClientWithQuery(folder, method, query, timeout - AWAIT_INTERVAL, cb)\n    }, AWAIT_INTERVAL)\n  }\n\n  sendFolderSpecificClientMethodQuery (folder, query = {}, method, params = [], cb) {\n    return this.awaitFolderClientWithQuery(folder, method, query, WAIT_DELAY, (err, client) => {\n      if (err) return cb(err)\n      return this.sendClientMethod(client, method, params, cb)\n    })\n  }\n\n  sendClientMethod (websocket, method, params = [], callback) {\n    var message = { method, params }\n    return this.sendClientRequest(websocket, message, callback)\n  }\n\n  sendClientRequest (websocket, message, callback) {\n    if (message.id === undefined) message.id = `${Math.random()}`\n    this.requests[message.id] = { websocket, message, callback }\n    if (websocket.readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message)\n      return websocket.send(data)\n    } else {\n      logger.info(`[plumbing] websocket readyState was not open so we did not send message ${message.method || message.id}`)\n      callback() // Should this return an error or remain silent?\n    }\n  }\n\n  teardown () {\n    logger.info('[plumbing] teardown method called')\n    this.subprocs.forEach((subproc) => {\n      if (subproc.kill) {\n        logger.info('[plumbing] sending interrupt signal')\n        if (subproc.stdin) subproc.stdin.pause()\n        subproc.kill('SIGKILL')\n      } else if (subproc.exit) {\n        logger.info('[plumbing] calling exit')\n        subproc.exit()\n      }\n    })\n    this.envoys.forEach((envoy) => {\n      logger.info('[plumbing] closing envoy')\n      envoy.close()\n    })\n    this.servers.forEach((server) => {\n      logger.info('[plumbing] closing server')\n      server.close()\n    })\n    this.clients.forEach((client) => {\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      logger.info('[plumbing] sending crash signal to client')\n      sendMessageToClient(client, { signal: 'CRASH' })\n    })\n    this._isTornDown = true\n  }\n\n  toggleDevTools (folder, cb) {\n    this.sendBroadcastMessage({ type: 'broadcast', name: 'dev-tools:toggle' })\n    cb()\n  }\n\n  /**\n   * Outward-facing\n   */\n\n  masterHeartbeat (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'masterHeartbeat', [], (err, masterState) => {\n      if (err) return cb(err)\n      return cb(null, masterState)\n    })\n  }\n\n  doesProjectHaveUnsavedChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'doesProjectHaveUnsavedChanges', [], cb)\n  }\n\n  /**\n   * @method initializeProject\n   * @description Flexible method for setting up a project based on an unknown file system state and possibly missing inputs.\n   * We make a decision here as to where + whether to generate a new folder.\n   * With a folder in hand, we boot up the MasterProcess for the folder in question.\n   * When it is ready, we kick off the content initialization step with initializeFolder.\n   */\n  initializeProject (maybeProjectName, { projectsHome, projectPath, skipContentCreation, organizationName, authorName }, maybeUsername, maybePassword, finish) {\n    const projectOptions = {\n      projectsHome,\n      projectPath,\n      skipContentCreation,\n      organizationName,\n      projectName: maybeProjectName,\n      username: maybeUsername,\n      password: maybePassword\n    }\n\n    // TODO/QUESTION: When do these attributes get set upstream?\n    if (!projectOptions.organizationName) projectOptions.organizationName = this.get('organizationName')\n    if (!projectOptions.authorName) projectOptions.authorName = this.get('username')\n\n    // We don't need to waste time making these bundles before we have done anything -\n    // Instead, we'll generate them just-in-time when the user saves.\n    projectOptions.skipCDNBundles = true\n\n    let projectFolder // To be populated momentarily...\n\n    return async.series([\n      (cb) => {\n        return this.getCurrentOrganizationName((err, organizationName) => {\n          if (err) return cb(err)\n          projectOptions.organizationName = organizationName\n          return cb()\n        })\n      },\n      (cb) => {\n        return ProjectFolder.ensureProject(projectOptions, (err, _projectFolder) => {\n          if (err) return cb(err)\n          projectFolder = _projectFolder\n          return cb()\n        })\n      },\n      (cb) => {\n        // Just a second check to make sure we created the folder - probably not necessary\n        return fse.exists(projectFolder, (doesFolderExist) => {\n          if (!doesFolderExist) return cb(new Error('Project folder does not exist'))\n          return cb()\n        })\n      },\n      (cb) => {\n        return this.spawnSubgroup(this.subprocs, { folder: projectFolder }, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb()\n        })\n      },\n      (cb) => {\n        // QUESTION: Does this *need* to happen down here after the org fetch?\n        const gitInitializeUsername = maybeUsername || this.get('username')\n        const gitInitializePassword = maybePassword || this.get('password')\n\n        // A simpler project options to avoid passing options only used for the first pass, e.g. skipContentCreation\n        const projectOptionsAgain = {\n          organizationName: projectOptions.organizationName,\n          username: projectOptions.username,\n          password: projectOptions.password,\n          authorName\n        }\n\n        return this.initializeFolder(maybeProjectName, projectFolder, gitInitializeUsername, gitInitializePassword, projectOptionsAgain, (err) => {\n          if (err) return cb(err)\n          return cb(null, projectFolder)\n        })\n      }\n    ], (err) => {\n      if (err) return finish(err)\n      return finish(null, projectFolder)\n    })\n  }\n\n  /**\n   * @method initializeFolder\n   * @description Assuming we already have a folder created, an organization name, etc., now bootstrap the folder itself.\n   */\n  initializeFolder (maybeProjectName, folder, maybeUsername, maybePassword, projectOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [maybeProjectName, maybeUsername, maybePassword, projectOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  startProject (maybeProjectName, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'startProject', [], cb)\n  }\n\n  restartProject (maybeProjectName, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'restartProject', [], cb)\n  }\n\n  isUserAuthenticated (cb) {\n    var answer = sdkClient.config.isAuthenticated()\n    if (!answer) {\n      return cb(null, { isAuthed: false })\n    }\n    return this.getCurrentOrganizationName((err, organizationName) => {\n      if (err) return cb(err)\n      return cb(null, {\n        isAuthed: true,\n        username: sdkClient.config.getUserId(),\n        authToken: sdkClient.config.getAuthToken(),\n        organizationName\n      })\n    })\n  }\n\n  authenticateUser (username, password, cb) {\n    this.set('organizationName', null) // Unset this cache to avoid writing others folders if somebody switches accounts in the middle of a session\n    return inkstone.user.authenticate(username, password, (authErr, authResponse, httpResponse) => {\n      if (authErr) return cb(authErr)\n      if (httpResponse.statusCode === 401) return cb(new Error('Unauthorized'))\n      if (httpResponse.statusCode > 299) return cb(new Error(`Error status code: ${httpResponse.statusCode}`))\n      if (!authResponse) return cb(new Error('Auth response was empty'))\n      this.set('username', username)\n      this.set('password', password)\n      this.set('inkstoneAuthToken', authResponse.Token)\n      sdkClient.config.setAuthToken(authResponse.Token)\n      sdkClient.config.setUserId(username)\n      return this.getCurrentOrganizationName((err, organizationName) => {\n        if (err) return cb(err)\n        return cb(null, {\n          isAuthed: true,\n          username: username,\n          authToken: authResponse.Token,\n          organizationName\n        })\n      })\n    })\n  }\n\n  getCurrentOrganizationName (cb) {\n    if (this.get('organizationName')) return cb(null, this.get('organizationName'))\n    logger.info('[plumbing] fetching organization name for current user')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.organization.list(authToken, (orgErr, orgsArray, orgHttpResp) => {\n      if (orgErr) return cb(new Error('Organization error'))\n      if (orgHttpResp.statusCode === 401) return cb(new Error('Unauthorized organization'))\n      if (orgHttpResp.statusCode > 299) return cb(new Error(`Error status code: ${orgHttpResp.statusCode}`))\n      if (!orgsArray || orgsArray.length < 1) return cb(new Error('No organization found'))\n      // Cache this since it's used to write/manage some project files\n      var organizationName = orgsArray[0].Name\n      logger.info('[plumbing] organization name:', organizationName)\n      this.set('organizationName', organizationName)\n      return cb(null, this.get('organizationName'))\n    })\n  }\n\n  listProjects (cb) {\n    logger.info('[plumbing] listing projects')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.list(authToken, (projectListErr, projectsList) => {\n      if (projectListErr) return cb(projectListErr)\n      var finalList = projectsList.map(remapProjectObjectToExpectedFormat)\n      logger.info('[plumbing] fetched project list', JSON.stringify(finalList))\n      return cb(null, finalList)\n    })\n  }\n\n  createProject (name, cb) {\n    logger.info('[plumbing] creating project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.create(authToken, { Name: name }, (projectCreateErr, project) => {\n      if (projectCreateErr) return cb(projectCreateErr)\n      return cb(null, remapProjectObjectToExpectedFormat(project))\n    })\n  }\n\n  deleteProject (name, cb) {\n    logger.info('[plumbing] deleting project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.deleteByName(authToken, name, cb)\n  }\n\n  discardProjectChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'discardProjectChanges', [], cb)\n  }\n\n  saveProject (folder, projectName, maybeUsername, maybePassword, saveOptions, cb) {\n    if (!saveOptions) saveOptions = {}\n    if (!saveOptions.authorName) saveOptions.authorName = this.get('username')\n    if (!saveOptions.organizationName) saveOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] saving with options', saveOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'saveProject', [projectName, maybeUsername, maybePassword, saveOptions], cb)\n  }\n\n  previewProject (folder, projectName, previewOptions, cb) {\n    if (!previewOptions) previewOptions = {}\n    if (!previewOptions.authorName) previewOptions.authorName = this.get('username')\n    if (!previewOptions.organizationName) previewOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] previewing with options', previewOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'previewProject', [projectName, previewOptions], cb)\n  }\n\n  fetchProjectInfo (folder, projectName, maybeUsername, maybePassword, fetchOptions, cb) {\n    if (!fetchOptions) fetchOptions = {}\n    if (!fetchOptions.authorName) fetchOptions.authorName = this.get('username')\n    if (!fetchOptions.organizationName) fetchOptions.organizationName = this.get('organizationName')\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchProjectInfo', [projectName, maybeUsername, maybePassword, fetchOptions], cb)\n  }\n\n  listAssets (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchAssets', [], cb)\n  }\n\n  linkAsset (assetAbspath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'linkAsset', [assetAbspath], cb)\n  }\n\n  unlinkAsset (assetRelpath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'unlinkAsset', [assetRelpath], cb)\n  }\n\n  gitUndo (folder, undoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitUndo', [folder, undoOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  gitRedo (folder, redoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitRedo', [folder, redoOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  readMetadata (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readMetadata', [folder], cb)\n  }\n\n  readAllStateValues (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllStateValues', [folder], cb)\n  }\n\n  readAllEventHandlers (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllEventHandlers', [folder], cb)\n  }\n\n  /** ------------------- */\n  /** ------------------- */\n  /** ------------------- */\n\n  handleClientAction (type, alias, folder, method, params, cb) {\n    // Params always arrive with the folder as the first argument, so we strip that off\n    params = params.slice(1)\n\n    // This special method gets called frequently (up to 60 times per second) so fast-path it and don't log it\n    if (method === 'setTimelineTime') {\n      if (alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_GLASS, method, params.concat({ from: alias }), () => {})\n      } else if (alias === 'glass') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_TIMELINE, method, params.concat({ from: alias }), () => {})\n      }\n    }\n\n    // HACK: A few methods require this special handling; #FIXME\n    if (method === 'instantiateComponent') {\n      var modulepath = getNormalizedComponentModulePath(params[0], /* ?? */ '')\n      if (!modulepath) {\n        params[0] = path.normalize(path.relative(folder, params[0]))\n      }\n    } else if (method === 'mergeDesigns') {\n      params[2] = path.normalize(path.relative(folder, params[2]))\n    }\n\n    // Start with the glass, since that's most visible, then move through the rest, and end\n    // with master at the end, which results in a file system update reflecting the change\n    async.eachSeries([Q_GLASS, Q_TIMELINE, Q_CREATOR, Q_MASTER], (clientSpec, nextStep) => {\n      if (clientSpec.alias === alias) {\n        if (method !== 'mergeDesigns') {\n          // Don't send to oneself, unless it is mergeDesigns, which is a special snowflake\n          // that originates in 'master' but also needs to be sent back to it (HACK)\n          return nextStep()\n        }\n      }\n\n      // There are a bunch of methods (actually...most of them) that creator doesn't need to receive\n      if ((method === 'moveSegmentEndpoints' || method === 'mergeDesigns' || method === 'moveKeyframes') && clientSpec.alias === 'creator') {\n        return nextStep()\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] -> client action ${method} being sent to ${clientSpec.alias}`)\n      }\n\n      // HACK: Glass and timeline always expect some metadata as the last argument\n      if (clientSpec.alias === 'glass' || clientSpec.alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params.concat({ from: alias }), (err, maybeOutput) => {\n          if (err) return nextStep(err)\n\n          // HACK: Stupidly we have to rely on glass to tell us where to position the element based on the\n          // offset of the artboard. So in this one case we have the glass transmit a return value that\n          // we read and then use as the payload to the next actions in this pipeline\n          if (method === 'instantiateComponent' && clientSpec.alias === 'glass') {\n            if (maybeOutput && maybeOutput.center) {\n              // Called 'posdata' in the ActiveComponent method as the second arg.\n              // The third arg is the more open-ended 'metadata' (API change from May 10)\n              params[1] = maybeOutput.center\n            }\n          }\n\n          return nextStep()\n        })\n      } else {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params, (err) => {\n          if (err) return nextStep(err)\n          return nextStep()\n        })\n      }\n    }, (err) => {\n      if (err) {\n        if (!IGNORED_METHOD_MESSAGES[method]) {\n          logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} errored`, err)\n        }\n        if (cb) return cb(err)\n        return void (0)\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} complete`)\n      }\n      if (cb) return cb()\n      return void (0)\n    })\n  }\n}\n\nPlumbing.prototype.spawnSubgroup = function (existingSpawnedSubprocs, haiku, cb) {\n  logger.info('[plumbing] spawning subprocesses for this group', haiku)\n  const subprocs = []\n  // MasterProcess can only operate if a folder is defined\n  if (haiku.folder) {\n    subprocs.push(PROCS.master)\n  }\n  if (haiku.mode === 'creator') {\n    subprocs.push(PROCS.creator)\n  }\n  return this.spawnSubprocesses(existingSpawnedSubprocs, haiku, subprocs, cb)\n}\n\nPlumbing.prototype.spawnSubprocesses = function (existingSpawnedSubprocs, haiku, subprocs, cb) {\n  this.extendEnvironment(haiku)\n  return async.map(subprocs, (subproc, next) => {\n    return this.spawnSubprocess(existingSpawnedSubprocs, haiku.folder, subproc, next)\n  }, (err, spawned) => {\n    if (err) return cb(err)\n    return cb(null, spawned)\n  })\n}\n\nPlumbing.prototype.spawnSubprocess = function spawnSubprocess (existingSpawnedSubprocs, folder, { name, path, args, opts }, cb) {\n  const existing = find(existingSpawnedSubprocs, { _attributes: { name, folder } })\n  if (existing) {\n    // Reconnection (via websocket) is only available if the process itself is still alive\n    if (existing.connected && !existing._attributes.disconnected && !existing._attributes.exited && !existing._attributes.closed) {\n      if (existing.reestablishConnection) existing.reestablishConnection()\n      else (existing.send('reestablishConnection!'))\n\n      logger.info(`[plumbing] reusing existing ${name} process`)\n      existing._attributes.reused = true\n\n      return cb(null, existing)\n    }\n  }\n\n  let proc\n\n  if (opts && opts.electron && isElectronMain() && typeof path === 'object') {\n    // If we are *in* Electron, this 'path', which would normally be an absolute path to the\n    // Electron binary, is actually the require('electron') export object. Instead of launching\n    // the subprocess 'with' Electron binary as the command, we can just 'require' it since\n    // that is where we already are. This is condition is critical for our packaging hooks.\n    // Be aware that a change here might break the ability to create a working distribution.\n    logger.info(`[plumbing] requiring ${name} @ ${args[0]}`)\n    proc = require(args[0]).default\n  } else {\n    // If we aren't in electron, start the process using the electron binary path\n    if (opts && opts.spawn) {\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--enable-logging', '--remote-debugging-port=9222')\n      }\n      proc = cp.spawn(path, args, { stdio: [null, null, null, 'ipc'] })\n    } else {\n      args = args || []\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--debug=5859')\n      }\n      proc = cp.fork(path, args)\n    }\n\n    logger.info(`[plumbing] proc ${name} created @ ${path}`)\n  }\n\n  proc._attributes = { name, folder, id: _id() }\n\n  proc.on('exit', () => {\n    logger.info(`[plumbing] proc ${name} exiting`)\n\n    proc._attributes.exited = true\n\n    if (proc._attributes.name) {\n      // If electron is finished, we should clean up stuff. This usually means the user has closed the view.\n      if (proc._attributes.name.match(/electron/) || name.match(/creator/)) {\n        emitter.emit('teardown-requested')\n      } else if (proc._attributes.name.match(/master/)) {\n        // Avoid ending up in an endless loop of fail if we find ourselves torn down\n        if (!this._isTornDown) {\n          // Master should probably keep running, since it does peristence stuff, so reconnect if we detect it crashed.\n          logger.info(`[plumbing] trying to respawn master for ${folder}`)\n\n          this.spawnSubprocess(existingSpawnedSubprocs, folder, { name, path, args, opts }, (err, newProc) => {\n            if (err) {\n              throw new Error(`Unable to respawn master for ${folder} because ${err}`)\n            }\n\n            newProc._attributes.closed = undefined\n            newProc._attributes.disconnected = undefined\n            newProc._attributes.exited = undefined\n\n            existingSpawnedSubprocs.push(newProc)\n\n            logger.info(`[plumbing] respawned proc master for folder ${folder}; restarting project`)\n\n            // Emit this event to notify ourselves that we want to wait for the websocket\n            // in the given process to reconnect itself and then do any of the usual setup\n            emitter.emit('proc-respawned', folder, name)\n          })\n        }\n      }\n    }\n\n    // Remove the old, unused process from the list of existing ones\n    for (let i = existingSpawnedSubprocs.length - 1; i >= 0; i--) {\n      let existing = existingSpawnedSubprocs[i]\n      if (existing === proc) {\n        existingSpawnedSubprocs.splice(i, 1)\n      }\n    }\n  })\n\n  proc.on('close', () => {\n    proc._attributes.closed = true\n  })\n  proc.on('disconnect', () => {\n    proc._attributes.disconnected = true\n  })\n  proc.on('error', (error) => {\n    logger.info(`[plumbing] proc ${name} got error`, error)\n  })\n  proc.on('message', (message) => {\n    logger.info(`[plumbing] proc ${name} got message`, message)\n  })\n  proc.on('request', (message) => {\n    logger.info(`[plumbing] proc ${name} got request`, message)\n  })\n\n  return cb(null, proc)\n}\n\nlet portrange = 45032\n\n// On the given host, return the port number of an open port. Note that the host must be\n// specified otherwise you end up getting false positives! E.g. ipv4 0.0.0.0 vs ipv6 ::.\nfunction getPort (host, cb) {\n  let port = portrange\n  portrange += 1\n  let server = net.createServer()\n  server.listen(port, host)\n  server.once('listening', () => {\n    server.once('close', () => {\n      return cb(null, port)\n    })\n    server.close()\n  })\n  server.on('error', (err) => {\n    if (err && err.code === 'EADDRINUSE') {\n      return getPort(host, cb)\n    }\n    // If not an address-in-use error, something bad has happened and we likely shouldn't continue\n    throw err\n  })\n  return server\n}\n\nPlumbing.prototype.launchControlServer = function launchControlServer (socketInfo, cb) {\n  const host = (socketInfo && socketInfo.host) || '0.0.0.0'\n\n  if (socketInfo && socketInfo.port) {\n    logger.info(`[plumbing] plumbing websocket server listening on specified port ${socketInfo.port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: socketInfo.port })\n\n    return cb(null, websocketServer, host, socketInfo.port)\n  }\n\n  logger.info('[plumbing] finding open port...')\n\n  return getPort(host, (err, port) => {\n    if (err) return cb(err)\n\n    logger.info(`[plumbing] plumbing websocket server listening on discovered port ${port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: port })\n\n    return cb(null, websocketServer, host, port)\n  })\n}\n\nPlumbing.prototype.extendEnvironment = function extendEnvironment (haiku) {\n  const HAIKU_ENV = JSON.parse(process.env.HAIKU_ENV || '{}')\n  merge(HAIKU_ENV, haiku)\n  logger.info('[plumbing] environment forwarding:', JSON.stringify(HAIKU_ENV, 2, null))\n  process.env.HAIKU_ENV = JSON.stringify(HAIKU_ENV) // Forward env to subprocesses\n}\n\nfunction getWsParams (websocket, request) {\n  const url = request.url || ''\n  const query = url.split('?')[1] || ''\n  const params = qs.parse(query)\n  params.url = url\n  return params\n}\n\nPlumbing.prototype.createControlSocket = function createControlSocket (socketInfo) {\n  const websocketServer = new WebSocket.Server({ port: socketInfo.port, host: socketInfo.host })\n\n  // Reserve this port so that OpenPort sees it as being unavailable in case other instances\n  // of plumbing happen to open. This isn't intended to do anything except that, hence the no-op listener.\n  // const httpServer = http.createServer()\n  // httpServer.listen(socketInfo.port)\n\n  websocketServer.on('connection', (websocket, request) => {\n    const params = getWsParams(websocket, request)\n\n    if (!params.type) params.type = 'default'\n    if (!params.haiku) params.haiku = {}\n    if (!websocket.params) websocket.params = params\n\n    const type = websocket.params && websocket.params.type\n    const alias = websocket.params && websocket.params.alias\n\n    let folder = websocket.params && websocket.params.folder\n\n    websocketServer.emit('connected', websocket, type, alias, folder, params)\n\n    websocket.on('message', (data) => {\n      const message = JSON.parse(data)\n\n      // Allow explicit override; Creator uses this!\n      // Also some tests use this.\n      if (message.folder) folder = message.folder\n\n      websocketServer.emit('message', type, alias, folder, message, websocket, websocketServer, createResponder(message, websocket))\n    })\n  })\n\n  return websocketServer\n}\n\nfunction sendMessageToClient (client, message) {\n  if (client.readyState === WebSocket.OPEN) {\n    const data = JSON.stringify(message)\n    return client.send(data)\n  }\n}\n\nfunction createResponder (message, websocket) {\n  return function messageResponder (error, result) {\n    const reply = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: result || void (0),\n      error: (error) ? serializeError(error) : void (0)\n    }\n    sendMessageToClient(websocket, reply)\n  }\n}\n\nfunction remapProjectObjectToExpectedFormat (projectObject) {\n  return {\n    projectName: projectObject.Name\n    // GitRemoteUrl\n    // GitRemoteName\n    // GitRemoteArn\n  }\n}\n\nfunction isElectronMain () {\n  return typeof process !== 'undefined' && process.versions && !!process.versions.electron\n}\n"]}