{"version":3,"sources":["../src/Plumbing.js"],"names":[],"mappings":"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","file":"Plumbing.js","sourcesContent":["import path from 'path'\nimport async from 'async'\nimport fse from 'haiku-fs-extra'\nimport find from 'lodash.find'\nimport merge from 'lodash.merge'\nimport filter from 'lodash.filter'\nimport net from 'net'\nimport cp from 'child_process'\nimport qs from 'qs'\nimport WebSocket from 'ws'\nimport { EventEmitter } from 'events'\nimport EnvoyServer from 'haiku-sdk-creator/lib/envoy/server'\nimport EnvoyLogger from 'haiku-sdk-creator/lib/envoy/logger'\nimport { EXPORTER_CHANNEL, ExporterHandler } from 'haiku-sdk-creator/lib/exporter'\nimport { GLASS_CHANNEL, GlassHandler } from 'haiku-sdk-creator/lib/glass'\nimport TimelineHandler from 'haiku-sdk-creator/lib/timeline'\nimport TourHandler from 'haiku-sdk-creator/lib/tour'\nimport { inkstone } from 'haiku-sdk-inkstone'\nimport { client as sdkClient } from 'haiku-sdk-client'\nimport StateObject from 'haiku-state-object'\nimport serializeError from 'haiku-serialization/src/utils/serializeError'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport mixpanel from 'haiku-serialization/src/utils/Mixpanel'\nimport * as ProjectFolder from './ProjectFolder'\nimport getNormalizedComponentModulePath from 'haiku-serialization/src/model/helpers/getNormalizedComponentModulePath'\nimport {crashReport} from 'haiku-serialization/src/utils/carbonite'\n\nconst NOTIFIABLE_ENVS = {\n  production: true,\n  staging: true\n  // development: true\n}\n\nlet Raven\nif (NOTIFIABLE_ENVS[process.env.HAIKU_RELEASE_ENVIRONMENT]) {\n  Raven = require('./Raven')\n}\n\n// For any methods that are...\n// - noisy\n// - internal use only\n// - housekeeping\n// we'll skip Sentry for now.\nconst METHODS_TO_SKIP_IN_SENTRY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  applyPropertyGroupDelta: true,\n  applyPropertyGroupValue: true,\n  moveSegmentEndpoints: true,\n  moveKeyframes: true,\n  toggleDevTools: true,\n  fetchProjectInfo: true\n}\n\nconst IGNORED_METHOD_MESSAGES = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true\n  // These are noisy, maybe not worth including?\n  // applyPropertyGroupDelta: true,\n  // applyPropertyGroupValue: true,\n  // moveSegmentEndpoints: true,\n  // moveKeyframes: true\n}\n\n// See note under 'processMethodMessage' for the purpose of this\nconst METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  toggleDevTools: true,\n  openTextEditor: true,\n  openTerminal: true,\n  saveProject: true,\n  previewProject: true,\n  fetchProjectInfo: true\n}\n\nconst ROOT_DIR = path.join(__dirname, '..')\nconst PROC_DIR = path.join(__dirname)\n\nconst PROCS = {\n  master: { name: 'master', path: path.join(PROC_DIR, 'MasterProcess.js') },\n  creator: { name: 'creator', path: require('electron'), args: [path.join(ROOT_DIR, 'node_modules', 'haiku-creator-electron', 'lib', 'electron.js')], opts: { electron: true, spawn: true } }\n}\n\nconst Q_GLASS = { alias: 'glass' }\nconst Q_MASTER = { alias: 'master' }\nconst Q_TIMELINE = { alias: 'timeline' }\nconst Q_CREATOR = { alias: 'creator' }\n\nconst AWAIT_INTERVAL = 100\nconst WAIT_DELAY = 10 * 1000\nconst MAX_MASTER_RESTART_ATTEMPTS = 3\n\n// In normal conditions CodeCommit can take up to 10 seconds to initialize a new repository,\n// and unfortunately there's no callback to detect when it's finished. So when a project is\n// first created, we add this artificial delay to make it more likely that the first clone\n// attempt made (during project initialization) goes through without requiring re-attempt.\nconst CODE_COMMIT_RACE_CONDITION_DELAY = 10000\n\nconst HAIKU_DEFAULTS = {\n  socket: {\n    port: process.env.HAIKU_CONTROL_PORT,\n    host: process.env.HAIKU_CONTROL_HOST || '0.0.0.0'\n  }\n}\n\n// configure inkstone, useful for testing off of dev (HAIKU_API=https://localhost:8080/)\nif (process.env.HAIKU_API) {\n  inkstone.setConfig({\n    baseUrl: process.env.HAIKU_API\n  })\n}\n\nconst emitter = new EventEmitter()\n\nconst PINFO = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nvar idIncrementor = 1\nfunction _id () {\n  return idIncrementor++\n}\n\nconst PLUMBING_INSTANCES = []\n\n// In test environment these listeners may get wrapped so we begin listening\n// to them immediately in the hope that we can start listening before the\n// test wrapper steps in and interferes\nprocess.on('exit', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) exiting`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n})\nprocess.on('SIGINT', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGINT`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\nprocess.on('SIGTERM', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGTERM`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\n\nfunction _safeErrorMessage (err) {\n  if (!err) return 'unknown error'\n  if (typeof err === 'string') return err\n  if (err.stack) return err.stack\n  if (err.message) return err.message\n  return err + ''\n}\n\nexport default class Plumbing extends StateObject {\n  constructor () {\n    super()\n\n    // Keep track of all PLUMBING_INSTANCES so we can put our process.on listeners\n    // above this constructor, which is necessary in test environments such\n    // as tape where exit might never get called despite an exit.\n    PLUMBING_INSTANCES.push(this)\n\n    this.subprocs = []\n    this.envoys = []\n    this.servers = []\n    this.clients = []\n    this.requests = {}\n    this.caches = {}\n    this.projects = {}\n\n    // Keep track of whether we got a teardown signal so we know whether we should keep trying to\n    // reconnect any subprocs that seem to have disconnected. This seems useless (why not just kill\n    // the process) but keep in mind we need to unit test this.\n    this._isTornDown = false\n    this._masterRestartAttempts = {}\n\n    this._methodMessages = []\n    this.executeMethodMessagesWorker()\n\n    emitter.on('teardown-requested', () => {\n      this.teardown()\n    })\n\n    emitter.on('proc-respawned', (folder, alias) => {\n      if (this._isTornDown) {\n        logger.info('[plumbing] we are torn down, so not restarting client')\n        return void (0)\n      }\n\n      logger.sacred(`[plumbing] restarting client ${alias} in ${folder}`)\n\n      // This just waits until we have a 'master' client available with the given name.\n      // The reconnect logic is elsewhere\n      return this.awaitFolderClientWithQuery(folder, 'proc-respawned+restartProject', { alias }, WAIT_DELAY, (err) => {\n        if (err) {\n          return this._handleUnrecoverableError(new Error(`Waited too long for client ${alias} in ${folder} because ${_safeErrorMessage(err)}`))\n        }\n\n        if (alias === 'master') {\n          const projectInfo = this.getProjectInfoFor(folder)\n\n          // This actually calls the method in question on the given client\n          return this.restartProject(folder, projectInfo, (err) => {\n            if (err) {\n              return this._handleUnrecoverableError(new Error(`Unable to finish restart on client ${alias} in ${folder} because ${_safeErrorMessage(err)}`))\n            }\n            logger.info(`[plumbing] restarted client ${alias} in ${folder}`)\n          })\n        }\n      })\n    })\n  }\n\n  _handleUnrecoverableError (err) {\n    mixpanel.haikuTrackOnce('app:crash', {\n      error: err.message\n    })\n    // Crash in the timeout to give a chance for mixpanel to transmit\n    setTimeout(() => {\n      throw err\n    }, 100)\n  }\n\n  /**\n   * Mostly-internal methods\n   */\n\n  launch (haiku = {}, cb) {\n    haiku = merge({}, HAIKU_DEFAULTS, haiku)\n\n    logger.info('[plumbing] launching plumbing', haiku)\n\n    logger.info('[plumbing] launching envoy server')\n\n    var envoyServer = new EnvoyServer({\n      WebSocket: WebSocket,\n      logger: new EnvoyLogger('warn', logger)\n    })\n\n    this.envoys.push(envoyServer)\n\n    return envoyServer.ready().then(() => {\n      if (!haiku.envoy) haiku.envoy = {} // Gets stored in env vars before subprocs created\n      haiku.envoy.port = envoyServer.port\n      haiku.envoy.host = envoyServer.host\n\n      const envoyTimelineHandler = new TimelineHandler(envoyServer)\n      const envoyTourHandler = new TourHandler(envoyServer)\n      const envoyExporterHandler = new ExporterHandler(envoyServer)\n      const envoyGlassHandler = new GlassHandler(envoyServer)\n\n      envoyServer.bindHandler('timeline', TimelineHandler, envoyTimelineHandler)\n      envoyServer.bindHandler('tour', TourHandler, envoyTourHandler)\n      envoyServer.bindHandler(EXPORTER_CHANNEL, ExporterHandler, envoyExporterHandler)\n      envoyServer.bindHandler(GLASS_CHANNEL, GlassHandler, envoyGlassHandler)\n\n      logger.info('[plumbing] launching plumbing control server')\n\n      return this.launchControlServer(haiku.socket, (err, server, host, port) => {\n        if (err) return cb(err)\n\n        // Forward these env vars to creator\n        process.env.HAIKU_PLUMBING_PORT = port\n        process.env.HAIKU_PLUMBING_HOST = host\n\n        if (!haiku.socket) haiku.socket = {}\n        haiku.socket.port = port\n        haiku.socket.host = host\n        haiku.plumbing = { url: `http://${host}:${port}` }\n\n        this.servers.push(server)\n\n        server.on('connected', (websocket, type, alias, folder, params) => {\n          logger.sacred(`[plumbing] websocket opened (${type} ${alias})`)\n\n          // Don't allow duplicate clients\n          for (let i = this.clients.length - 1; i >= 0; i--) {\n            let client = this.clients[i]\n            if (client.params) {\n              if (client.params.alias === alias && client.params.folder === folder) {\n                if (client.readyState === WebSocket.OPEN) {\n                  client.close()\n                }\n                this.clients.splice(i, 1)\n              }\n            }\n          }\n\n          websocket.params.id = _id()\n          const index = this.clients.push(websocket) - 1\n\n          websocket._index = index\n\n          websocket.on('close', () => {\n            logger.sacred(`[plumbing] websocket closed (${type} ${alias})`)\n\n            // Clean up dead clients\n            for (let j = this.clients.length - 1; j >= 0; j--) {\n              let client = this.clients[j]\n              if (client === websocket) {\n                this.clients.splice(j, 1)\n              }\n            }\n          })\n        })\n\n        server.on('message', (type, alias, folder, message, websocket, server, responder) => {\n          // IMPORTANT! Creator uses this\n          if (!folder && message.folder) {\n            folder = message.folder\n          }\n\n          if (message.type === 'broadcast') {\n            // Give clients the chance to emit events to all others\n            this.sendBroadcastMessage(message, folder, alias, websocket)\n          } else if (message.id && this.requests[message.id]) {\n            // If we have an entry in this.requests, that means this is a reply\n            const { callback } = this.requests[message.id]\n            delete this.requests[message.id]\n            return callback(message.error, message.result, message)\n          } else if (message.method) { // This condition MUST happen before the one above since .method is present on that one too\n            // Ensure that actions/methods occur in order by using a queue\n            this.processMethodMessage(type, alias, folder, message, responder)\n          }\n        })\n\n        this.spawnSubgroup(this.subprocs, haiku, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb(null, host, port, server, spawned, haiku.envoy)\n        })\n      })\n    })\n  }\n\n  methodMessageBeforeLog (message, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.sacred(`[plumbing] ↓-- ${message.method} via ${alias} -> ${JSON.stringify(message.params)} --↓`)\n    }\n  }\n\n  methodMessageAfterLog (message, err, result, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      if ((err && err.message) || (err && err.stack)) {\n        logger.sacred(`[plumbing] ${message.method} error ${err.stack || err.message}`)\n      }\n      logger.sacred(`[plumbing] ↑-- ${message.method} via ${alias} --↑`)\n    }\n  }\n\n  executeMethodMessagesWorker () {\n    if (this._isTornDown) return void (0) // Avoid leaking a handle\n    let nextMethodMessage = this._methodMessages.shift()\n    if (!nextMethodMessage) return setTimeout(this.executeMethodMessagesWorker.bind(this), 64)\n\n    let { type, alias, folder, message, cb } = nextMethodMessage\n\n    this.methodMessageBeforeLog(message, alias)\n\n    // Actions are a special case of methods that end up routed through all of the clients,\n    // glass -> timeline -> master before returning. They go through one handler as opposed\n    // to the normal 'methods' which plumbing handles on a more a la carte basis\n    if (message.type === 'action') {\n      return this.handleClientAction(type, alias, folder, message.method, message.params, (err, result) => {\n        this.methodMessageAfterLog(message, err, result, alias)\n        cb(err, result)\n        this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n      })\n    }\n\n    return this.plumbingMethod(message.method, message.params || [], (err, result) => {\n      this.methodMessageAfterLog(message, err, result, alias)\n      cb(err, result)\n      this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n    })\n  }\n\n  processMethodMessage (type, alias, folder, message, cb) {\n    // Certain messages aren't of a kind that we can reliably enqueue - either they happen too fast or they are 'fire and forget'\n    if (METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY[message.method]) {\n      if (message.type === 'action') {\n        return this.handleClientAction(type, alias, folder, message.method, message.params, cb)\n      } else {\n        return this.plumbingMethod(message.method, message.params, cb)\n      }\n    } else {\n      this._methodMessages.push({ type, alias, folder, message, cb })\n    }\n  }\n\n  sendBroadcastMessage (message, folder, alias, websocket) {\n    this.clients.forEach((client) => {\n      if (websocket && client === websocket) return void (0) // Skip message's send\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      delete message.id // Don't confuse this as a request/response\n      sendMessageToClient(client, merge(message, { folder, alias }))\n    })\n  }\n\n  sentryError (method, error, extras) {\n    logger.sacred(`[plumbing] error @ ${method}`, error, extras)\n    if (!Raven) return null\n    if (method && METHODS_TO_SKIP_IN_SENTRY[method]) return null\n    if (!error) return null\n    if (typeof error === 'object' && !(error instanceof Error)) {\n      var fixed = new Error(error.message || `Plumbing.${method} error`)\n      if (error.stack) fixed.stack = error.stack\n      error = fixed\n    } else if (typeof error === 'string') {\n      error = new Error(error) // Unfortunately no good stack trace in this case\n    }\n    crashReport(this.get('organizationName'), this.get('lastOpenedProject'))\n    return Raven.captureException(error, extras)\n  }\n\n  plumbingMethod (method, params = [], cb) {\n    if (typeof this[method] !== 'function') return cb(new Error(`Plumbing has no method '${method}'`))\n    return this[method].apply(this, params.concat((error, result) => {\n      if (error) return cb(error)\n      return cb(null, result)\n    }))\n  }\n\n  awaitFolderClientWithQuery (folder, method, query, timeout, cb) {\n    if (!folder) return cb(new Error('Folder argument was missing'))\n    if (!query) return cb(new Error('Query argument was missing'))\n    if (timeout <= 0) {\n      return cb(new Error(`Timed out waiting for client ${JSON.stringify(query)} of ${folder} to connect`))\n    }\n\n    // HACK: At the time of this writing, there is only \"one\" creator client, not one per folder.\n    // So the method just get ssent to the one client (if available)\n    if (query.alias === 'creator') {\n      const creatorClient = find(this.clients, { params: query })\n      if (creatorClient) {\n        return cb(null, creatorClient)\n      }\n    } else {\n      const clientsOfFolder = filter(this.clients, { params: { folder } })\n\n      // // uncomment me for insight into why a request might not be making it\n      // if (method !== 'masterHeartbeat') {\n      //   console.log('awaiting', method, query, folder, JSON.stringify(this.clients.map((c) => c.params.alias)))\n      // }\n\n      if (clientsOfFolder && clientsOfFolder.length > 0) {\n        const clientMatching = find(clientsOfFolder, { params: query })\n        if (clientMatching) {\n          return cb(null, clientMatching)\n        }\n      }\n    }\n    return setTimeout(() => {\n      return this.awaitFolderClientWithQuery(folder, method, query, timeout - AWAIT_INTERVAL, cb)\n    }, AWAIT_INTERVAL)\n  }\n\n  sendFolderSpecificClientMethodQuery (folder, query = {}, method, params = [], cb) {\n    return this.awaitFolderClientWithQuery(folder, method, query, WAIT_DELAY, (err, client) => {\n      if (err) return cb(err)\n      return this.sendClientMethod(client, method, params, (error, response) => {\n        if (error) {\n          this.sentryError(method, error, { tags: query })\n          return cb(error)\n        }\n        return cb(null, response)\n      })\n    })\n  }\n\n  sendClientMethod (websocket, method, params = [], callback) {\n    var message = { method, params }\n    return this.sendClientRequest(websocket, message, callback)\n  }\n\n  sendClientRequest (websocket, message, callback) {\n    if (message.id === undefined) message.id = `${Math.random()}`\n    this.requests[message.id] = { websocket, message, callback }\n    if (websocket.readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message)\n      return websocket.send(data)\n    } else {\n      logger.info(`[plumbing] websocket readyState was not open so we did not send message ${message.method || message.id}`)\n      callback() // Should this return an error or remain silent?\n    }\n  }\n\n  teardown () {\n    logger.info('[plumbing] teardown method called')\n    this.subprocs.forEach((subproc) => {\n      if (subproc.kill) {\n        if (subproc.stdin) subproc.stdin.pause()\n        // Using sigterm as opposed to kill to give the processes a chance to cleanup\n        // so we don't end up with corrupt git objects\n        logger.info('[plumbing] sending terminate signal')\n        subproc.kill('SIGTERM')\n      } else if (subproc.exit) {\n        logger.info('[plumbing] calling exit')\n        subproc.exit()\n      }\n    })\n    this.envoys.forEach((envoy) => {\n      logger.info('[plumbing] closing envoy')\n      envoy.close()\n    })\n    this.servers.forEach((server) => {\n      logger.info('[plumbing] closing server')\n      server.close()\n    })\n    this.clients.forEach((client) => {\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      logger.info('[plumbing] sending crash signal to client')\n      sendMessageToClient(client, { signal: 'CRASH' })\n    })\n    this._isTornDown = true\n  }\n\n  toggleDevTools (folder, cb) {\n    this.sendBroadcastMessage({ type: 'broadcast', name: 'dev-tools:toggle' })\n    cb()\n  }\n\n  /**\n   * Outward-facing\n   */\n\n  masterHeartbeat (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'masterHeartbeat', [], (err, masterState) => {\n      if (err) return cb(err)\n      return cb(null, masterState)\n    })\n  }\n\n  doesProjectHaveUnsavedChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'doesProjectHaveUnsavedChanges', [], cb)\n  }\n\n  /**\n   * @method initializeProject\n   * @description Flexible method for setting up a project based on an unknown file system state and possibly missing inputs.\n   * We make a decision here as to where + whether to generate a new folder.\n   * With a folder in hand, we boot up the MasterProcess for the folder in question.\n   * When it is ready, we kick off the content initialization step with initializeFolder.\n   */\n  initializeProject (maybeProjectName, { projectsHome, projectPath, skipContentCreation, organizationName, authorName }, maybeUsername, maybePassword, finish) {\n    const projectOptions = {\n      projectsHome,\n      projectPath,\n      skipContentCreation,\n      organizationName,\n      projectName: maybeProjectName,\n      username: maybeUsername,\n      password: maybePassword\n    }\n\n    // TODO/QUESTION: When do these attributes get set upstream?\n    if (!projectOptions.organizationName) projectOptions.organizationName = this.get('organizationName')\n    if (!projectOptions.authorName) projectOptions.authorName = this.get('username')\n\n    // We don't need to waste time making these bundles before we have done anything -\n    // Instead, we'll generate them just-in-time when the user saves.\n    projectOptions.skipCDNBundles = true\n\n    let projectFolder // To be populated momentarily...\n\n    return async.series([\n      (cb) => {\n        return this.getCurrentOrganizationName((err, organizationName) => {\n          if (err) return cb(err)\n          projectOptions.organizationName = organizationName\n          return cb()\n        })\n      },\n      (cb) => {\n        return ProjectFolder.ensureProject(projectOptions, (err, _projectFolder) => {\n          if (err) return cb(err)\n          projectFolder = _projectFolder\n          return cb()\n        })\n      },\n      (cb) => {\n        // Just a second check to make sure we created the folder - probably not necessary\n        return fse.exists(projectFolder, (doesFolderExist) => {\n          if (!doesFolderExist) return cb(new Error('Project folder does not exist'))\n          return cb()\n        })\n      },\n      (cb) => {\n        return this.spawnSubgroup(this.subprocs, { folder: projectFolder }, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb()\n        })\n      }\n    ], (err) => {\n      if (err) {\n        this.sentryError('initializeProject', err)\n        return finish(err)\n      }\n\n      // QUESTION: Does this *need* to happen down here after the org fetch?\n      const gitInitializeUsername = projectOptions.username || this.get('username')\n      const gitInitializePassword = projectOptions.password || this.get('password')\n\n      // A simpler project options to avoid passing options only used for the first pass, e.g. skipContentCreation\n      const projectOptionsAgain = {\n        organizationName: projectOptions.organizationName,\n        username: gitInitializeUsername,\n        password: gitInitializePassword,\n        authorName\n      }\n\n      return this.initializeFolder(maybeProjectName, projectFolder, gitInitializeUsername, gitInitializePassword, projectOptionsAgain, (err) => {\n        if (err) return finish(err)\n        // HACK: used when restarting the process to allow us to reinitialize properly\n        this.projects[projectFolder] = {\n          name: maybeProjectName,\n          folder: projectFolder,\n          username: gitInitializePassword,\n          password: gitInitializePassword,\n          organization: projectOptionsAgain.organizationName,\n          options: projectOptionsAgain\n        }\n\n        if (Raven) {\n          Raven.setContext({\n            projectName: maybeProjectName,\n            organizationName: projectOptionsAgain.organizationName\n          })\n        }\n\n        this.set('lastOpenedProject', maybeProjectName)\n\n        if (maybeProjectName) {\n          // HACK: alias to allow lookup by project name\n          this.projects[maybeProjectName] = this.projects[projectFolder]\n        }\n\n        return finish(null, projectFolder)\n      })\n    })\n  }\n\n  /**\n   * Returns the absolute path of the folder of a project by name, if we are tracking one.\n   */\n  getFolderFor (projectName) {\n    let info = this.getProjectInfoFor(projectName)\n    if (!info) return null\n    return info.folder\n  }\n\n  getProjectInfoFor (projectNameOrFolder) {\n    return this.projects[projectNameOrFolder]\n  }\n\n  /**\n   * @method initializeFolder\n   * @description Assuming we already have a folder created, an organization name, etc., now bootstrap the folder itself.\n   */\n  initializeFolder (maybeProjectName, folder, maybeUsername, maybePassword, projectOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [maybeProjectName, maybeUsername, maybePassword, projectOptions], cb)\n  }\n\n  startProject (maybeProjectName, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'startProject', [], cb)\n  }\n\n  restartProject (folder, projectInfo, cb) {\n    // We run initializeFolder first to ensure the Git bootstrapping works correctly, especially setting\n    // a branch name and ensuring we have a good baseline commit with which to start; we get errors on restart\n    // unless we do this so take care if you plan to re/move this\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [projectInfo.name, projectInfo.username, projectInfo.password, projectInfo.options], (err) => {\n      if (err) return cb(err)\n      return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'restartProject', [], cb)\n    })\n  }\n\n  isUserAuthenticated (cb) {\n    var answer = sdkClient.config.isAuthenticated()\n    if (!answer) {\n      return cb(null, { isAuthed: false })\n    }\n    return this.getCurrentOrganizationName((err, organizationName) => {\n      if (err) return cb(err)\n      const username = sdkClient.config.getUserId()\n      mixpanel.mergeToPayload({ distinct_id: username })\n      if (Raven) {\n        Raven.setContext({\n          user: { email: username },\n          tags: { username }\n        })\n      }\n      return cb(null, {\n        isAuthed: true,\n        username: username,\n        authToken: sdkClient.config.getAuthToken(),\n        organizationName\n      })\n    })\n  }\n\n  authenticateUser (username, password, cb) {\n    this.set('organizationName', null) // Unset this cache to avoid writing others folders if somebody switches accounts in the middle of a session\n    return inkstone.user.authenticate(username, password, (authErr, authResponse, httpResponse) => {\n      if (authErr) return cb(authErr)\n      if (httpResponse.statusCode === 401) return cb(new Error('Unauthorized'))\n\n      if (httpResponse.statusCode > 499) {\n        const serverErr = new Error(`Auth HTTP Error: ${httpResponse.statusCode}`)\n        this.sentryError('authenticateUser', serverErr)\n        return cb(serverErr)\n      }\n\n      if (httpResponse.statusCode > 299) {\n        const unexpectedError = new Error(`Auth HTTP Error: ${httpResponse.statusCode}`)\n        return cb(unexpectedError)\n      }\n\n      if (!authResponse) return cb(new Error('Auth response was empty'))\n      this.set('username', username)\n      this.set('password', password)\n      this.set('inkstoneAuthToken', authResponse.Token)\n      sdkClient.config.setAuthToken(authResponse.Token)\n      sdkClient.config.setUserId(username)\n      mixpanel.mergeToPayload({ distinct_id: username })\n      if (Raven) {\n        Raven.setContext({\n          user: { email: username },\n          tags: { username }\n        })\n      }\n      return this.getCurrentOrganizationName((err, organizationName) => {\n        if (err) return cb(err)\n        return cb(null, {\n          isAuthed: true,\n          username: username,\n          authToken: authResponse.Token,\n          organizationName\n        })\n      })\n    })\n  }\n\n  getCurrentOrganizationName (cb) {\n    if (this.get('organizationName')) return cb(null, this.get('organizationName'))\n    logger.info('[plumbing] fetching organization name for current user')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.organization.list(authToken, (orgErr, orgsArray, orgHttpResp) => {\n      if (orgErr) return cb(new Error('Organization error'))\n      if (orgHttpResp.statusCode === 401) return cb(new Error('Unauthorized organization'))\n      if (orgHttpResp.statusCode > 299) return cb(new Error(`Error status code: ${orgHttpResp.statusCode}`))\n      if (!orgsArray || orgsArray.length < 1) return cb(new Error('No organization found'))\n      // Cache this since it's used to write/manage some project files\n      var organizationName = orgsArray[0].Name\n      logger.info('[plumbing] organization name:', organizationName)\n      this.set('organizationName', organizationName)\n      return cb(null, this.get('organizationName'))\n    })\n  }\n\n  listProjects (cb) {\n    logger.info('[plumbing] listing projects')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.list(authToken, (projectListErr, projectsList) => {\n      if (projectListErr) {\n        this.sentryError('listProjects', projectListErr)\n        return cb(projectListErr)\n      }\n      var finalList = projectsList.map(remapProjectObjectToExpectedFormat)\n      logger.info('[plumbing] fetched project list', JSON.stringify(finalList))\n      return cb(null, finalList)\n    })\n  }\n\n  createProject (name, cb) {\n    logger.info('[plumbing] creating project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.create(authToken, { Name: name }, (projectCreateErr, project) => {\n      if (projectCreateErr) {\n        this.sentryError('createProject', projectCreateErr)\n        return cb(projectCreateErr)\n      }\n      return setTimeout(() => {\n        return cb(null, remapProjectObjectToExpectedFormat(project))\n      }, CODE_COMMIT_RACE_CONDITION_DELAY)\n    })\n  }\n\n  deleteProject (name, cb) {\n    logger.info('[plumbing] deleting project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.deleteByName(authToken, name, (deleteErr) => {\n      if (deleteErr) {\n        this.sentryError('deleteProject', deleteErr)\n        return cb(deleteErr)\n      }\n      return cb()\n    })\n  }\n\n  discardProjectChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'discardProjectChanges', [], cb)\n  }\n\n  saveProject (folder, projectName, maybeUsername, maybePassword, saveOptions, cb) {\n    if (!saveOptions) saveOptions = {}\n    if (!saveOptions.authorName) saveOptions.authorName = this.get('username')\n    if (!saveOptions.organizationName) saveOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] saving with options', saveOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'saveProject', [projectName, maybeUsername, maybePassword, saveOptions], cb)\n  }\n\n  previewProject (folder, projectName, previewOptions, cb) {\n    if (!previewOptions) previewOptions = {}\n    if (!previewOptions.authorName) previewOptions.authorName = this.get('username')\n    if (!previewOptions.organizationName) previewOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] previewing with options', previewOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'previewProject', [projectName, previewOptions], cb)\n  }\n\n  fetchProjectInfo (folder, projectName, maybeUsername, maybePassword, fetchOptions, cb) {\n    if (!fetchOptions) fetchOptions = {}\n    if (!fetchOptions.authorName) fetchOptions.authorName = this.get('username')\n    if (!fetchOptions.organizationName) fetchOptions.organizationName = this.get('organizationName')\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchProjectInfo', [projectName, maybeUsername, maybePassword, fetchOptions], cb)\n  }\n\n  checkInkstoneUpdates (options = {}, cb) {\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.updates.check(authToken, options, cb)\n  }\n\n  listAssets (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchAssets', [], cb)\n  }\n\n  linkAsset (assetAbspath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'linkAsset', [assetAbspath], cb)\n  }\n\n  bulkLinkAssets (assetsAbspaths, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'bulkLinkAssets', [assetsAbspaths], cb)\n  }\n\n  unlinkAsset (assetRelpath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'unlinkAsset', [assetRelpath], cb)\n  }\n\n  gitUndo (folder, undoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitUndo', [folder, undoOptions], cb)\n  }\n\n  gitRedo (folder, redoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitRedo', [folder, redoOptions], cb)\n  }\n\n  readMetadata (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readMetadata', [folder], cb)\n  }\n\n  readAllStateValues (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllStateValues', [folder], cb)\n  }\n\n  readAllEventHandlers (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllEventHandlers', [folder], cb)\n  }\n\n  /** ------------------- */\n  /** ------------------- */\n  /** ------------------- */\n\n  handleClientAction (type, alias, folder, method, params, cb) {\n    // Params always arrive with the folder as the first argument, so we strip that off\n    params = params.slice(1)\n\n    // This special method gets called frequently (up to 60 times per second) so fast-path it and don't log it\n    if (method === 'setTimelineTime') {\n      if (alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_GLASS, method, params.concat({ from: alias }), () => {})\n      } else if (alias === 'glass') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_TIMELINE, method, params.concat({ from: alias }), () => {})\n      }\n    }\n\n    // HACK: A few methods require this special handling; #FIXME\n    if (method === 'instantiateComponent') {\n      var modulepath = getNormalizedComponentModulePath(params[0], /* ?? */ '')\n      if (!modulepath) {\n        params[0] = path.normalize(path.relative(folder, params[0]))\n      }\n    }\n\n    // Start with the glass, since that's most visible, then move through the rest, and end\n    // with master at the end, which results in a file system update reflecting the change\n    async.eachSeries([Q_GLASS, Q_TIMELINE, Q_CREATOR, Q_MASTER], (clientSpec, nextStep) => {\n      if (clientSpec.alias === alias) {\n        if (method !== 'mergeDesigns') {\n          // Don't send to oneself, unless it is mergeDesigns, which is a special snowflake\n          // that originates in 'master' but also needs to be sent back to it (HACK)\n          return nextStep()\n        }\n      }\n\n      // There are a bunch of methods (actually...most of them) that creator doesn't need to receive\n      if ((method === 'moveSegmentEndpoints' || method === 'mergeDesigns' || method === 'moveKeyframes') && clientSpec.alias === 'creator') {\n        return nextStep()\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] -> client action ${method} being sent to ${clientSpec.alias}`)\n      }\n\n      // HACK: Glass and timeline always expect some metadata as the last argument\n      if (clientSpec.alias === 'glass' || clientSpec.alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params.concat({ from: alias }), (err, maybeOutput) => {\n          if (err) return nextStep(err)\n\n          // HACK: Stupidly we have to rely on glass to tell us where to position the element based on the\n          // offset of the artboard. So in this one case we have the glass transmit a return value that\n          // we read and then use as the payload to the next actions in this pipeline\n          if (method === 'instantiateComponent' && clientSpec.alias === 'glass') {\n            if (maybeOutput && maybeOutput.center) {\n              // Called 'posdata' in the ActiveComponent method as the second arg.\n              // The third arg is the more open-ended 'metadata' (API change from May 10)\n              params[1] = maybeOutput.center\n            }\n          }\n\n          return nextStep()\n        })\n      } else {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params, (err) => {\n          if (err) return nextStep(err)\n          return nextStep()\n        })\n      }\n    }, (err) => {\n      if (err) {\n        if (!IGNORED_METHOD_MESSAGES[method]) {\n          logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} errored`, err)\n        }\n        if (cb) return cb(err)\n        return void (0)\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} complete`)\n      }\n      if (cb) return cb()\n      return void (0)\n    })\n  }\n}\n\nPlumbing.prototype.spawnSubgroup = function (existingSpawnedSubprocs, haiku, cb) {\n  logger.info('[plumbing] spawning subprocesses for this group', haiku)\n  const subprocs = []\n  // MasterProcess can only operate if a folder is defined\n  if (haiku.folder) {\n    // Starting master from this point assumes it has been triggered explicitly\n    // as opposed to by an automatic restart attempt, so we reset the restart attempt\n    // counter back to zero.\n    this._masterRestartAttempts[haiku.folder] = 0\n\n    subprocs.push(PROCS.master)\n  }\n  if (haiku.mode === 'creator') {\n    subprocs.push(PROCS.creator)\n  }\n  return this.spawnSubprocesses(existingSpawnedSubprocs, haiku, subprocs, cb)\n}\n\nPlumbing.prototype.spawnSubprocesses = function (existingSpawnedSubprocs, haiku, subprocs, cb) {\n  this.extendEnvironment(haiku)\n  return async.map(subprocs, (subproc, next) => {\n    return this.spawnSubprocess(existingSpawnedSubprocs, haiku.folder, subproc, next)\n  }, (err, spawned) => {\n    if (err) return cb(err)\n    return cb(null, spawned)\n  })\n}\n\nPlumbing.prototype.spawnSubprocess = function spawnSubprocess (existingSpawnedSubprocs, folder, { name, path, args, opts }, cb) {\n  const existing = find(existingSpawnedSubprocs, { _attributes: { name, folder } })\n  if (existing) {\n    // Reconnection (via websocket) is only available if the process itself is still alive\n    if (existing.connected && !existing._attributes.disconnected && !existing._attributes.exited && !existing._attributes.closed) {\n      if (existing.reestablishConnection) existing.reestablishConnection()\n      else (existing.send('reestablishConnection!'))\n\n      logger.info(`[plumbing] reusing existing ${name} process`)\n      existing._attributes.reused = true\n\n      return cb(null, existing)\n    }\n  }\n\n  let proc\n\n  if (opts && opts.electron && isElectronMain() && typeof path === 'object') {\n    // If we are *in* Electron, this 'path', which would normally be an absolute path to the\n    // Electron binary, is actually the require('electron') export object. Instead of launching\n    // the subprocess 'with' Electron binary as the command, we can just 'require' it since\n    // that is where we already are. This is condition is critical for our packaging hooks.\n    // Be aware that a change here might break the ability to create a working distribution.\n    logger.info(`[plumbing] requiring ${name} @ ${args[0]}`)\n    proc = require(args[0]).default\n  } else {\n    // If we aren't in electron, start the process using the electron binary path\n    if (opts && opts.spawn) {\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--enable-logging', '--remote-debugging-port=9222')\n      }\n      proc = cp.spawn(path, args, { stdio: [null, null, null, 'ipc'] })\n    } else {\n      args = args || []\n      // Remote debugging hook only used in development; causes problems in distro\n      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'staging' && process.env.NO_REMOTE_DEBUG !== '1') {\n        args.push('--debug=5859')\n      }\n      proc = cp.fork(path, args)\n    }\n\n    logger.info(`[plumbing] proc ${name} created @ ${path}`)\n  }\n\n  proc._attributes = { name, folder, id: _id() }\n\n  proc.on('exit', () => {\n    logger.sacred(`[plumbing] proc ${name} exiting`)\n\n    proc._attributes.exited = true\n\n    if (proc._attributes.name) {\n      // If electron is finished, we should clean up stuff. This usually means the user has closed the view.\n      if (proc._attributes.name.match(/electron/) || name.match(/creator/)) {\n        emitter.emit('teardown-requested')\n      } else if (proc._attributes.name.match(/master/)) {\n        // Avoid ending up in an endless loop of fail if we find ourselves torn down\n        if (!this._isTornDown) {\n          if (!this._masterRestartAttempts[folder]) {\n            this._masterRestartAttempts[folder] = 0\n          }\n          this._masterRestartAttempts[folder] += 1\n          if (this._masterRestartAttempts[folder] > MAX_MASTER_RESTART_ATTEMPTS) {\n            return this._handleUnrecoverableError(new Error(`Cannot respawn master for ${folder} after too many attempts`))\n          }\n\n          // Master should probably keep running, since it does peristence stuff, so reconnect if we detect it crashed.\n          logger.sacred(`[plumbing] trying to respawn master for ${folder}`)\n\n          this.spawnSubprocess(existingSpawnedSubprocs, folder, { name, path, args, opts }, (err, newProc) => {\n            if (err) {\n              return this._handleUnrecoverableError(new Error(`Unable to respawn master for ${folder} because ${_safeErrorMessage(err)}`))\n            }\n\n            newProc._attributes.closed = undefined\n            newProc._attributes.disconnected = undefined\n            newProc._attributes.exited = undefined\n\n            existingSpawnedSubprocs.push(newProc)\n\n            logger.info(`[plumbing] respawned proc master for folder ${folder}; restarting project`)\n\n            // Emit this event to notify ourselves that we want to wait for the websocket\n            // in the given process to reconnect itself and then do any of the usual setup\n            emitter.emit('proc-respawned', folder, name)\n          })\n        }\n      }\n    }\n\n    // Remove the old, unused process from the list of existing ones\n    for (let i = existingSpawnedSubprocs.length - 1; i >= 0; i--) {\n      let existing = existingSpawnedSubprocs[i]\n      if (existing === proc) {\n        existingSpawnedSubprocs.splice(i, 1)\n      }\n    }\n  })\n\n  proc.on('close', () => {\n    proc._attributes.closed = true\n  })\n  proc.on('disconnect', () => {\n    proc._attributes.disconnected = true\n  })\n  proc.on('error', (error) => {\n    logger.info(`[plumbing] proc ${name} got error`, error)\n  })\n  proc.on('message', (message) => {\n    logger.info(`[plumbing] proc ${name} got message`, message)\n  })\n  proc.on('request', (message) => {\n    logger.info(`[plumbing] proc ${name} got request`, message)\n  })\n\n  return cb(null, proc)\n}\n\nlet portrange = 45032\n\n// On the given host, return the port number of an open port. Note that the host must be\n// specified otherwise you end up getting false positives! E.g. ipv4 0.0.0.0 vs ipv6 ::.\nfunction getPort (host, cb) {\n  let port = portrange\n  portrange += 1\n  let server = net.createServer()\n  server.listen(port, host)\n  server.once('listening', () => {\n    server.once('close', () => {\n      return cb(null, port)\n    })\n    server.close()\n  })\n  server.on('error', (err) => {\n    if (err && err.code === 'EADDRINUSE') {\n      return getPort(host, cb)\n    }\n    // If not an address-in-use error, something bad has happened and we likely shouldn't continue\n    throw err\n  })\n  return server\n}\n\nPlumbing.prototype.launchControlServer = function launchControlServer (socketInfo, cb) {\n  const host = (socketInfo && socketInfo.host) || '0.0.0.0'\n\n  if (socketInfo && socketInfo.port) {\n    logger.sacred(`[plumbing] plumbing websocket server listening on specified port ${socketInfo.port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: socketInfo.port })\n\n    return cb(null, websocketServer, host, socketInfo.port)\n  }\n\n  logger.info('[plumbing] finding open port...')\n\n  return getPort(host, (err, port) => {\n    if (err) return cb(err)\n\n    logger.sacred(`[plumbing] plumbing websocket server listening on discovered port ${port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: port })\n\n    return cb(null, websocketServer, host, port)\n  })\n}\n\nPlumbing.prototype.extendEnvironment = function extendEnvironment (haiku) {\n  const HAIKU_ENV = JSON.parse(process.env.HAIKU_ENV || '{}')\n  merge(HAIKU_ENV, haiku)\n  logger.sacred('[plumbing] environment forwarding:', JSON.stringify(HAIKU_ENV, 2, null))\n  process.env.HAIKU_ENV = JSON.stringify(HAIKU_ENV) // Forward env to subprocesses\n}\n\nfunction getWsParams (websocket, request) {\n  const url = request.url || ''\n  const query = url.split('?')[1] || ''\n  const params = qs.parse(query)\n  params.url = url\n  return params\n}\n\nPlumbing.prototype.createControlSocket = function createControlSocket (socketInfo) {\n  const websocketServer = new WebSocket.Server({ port: socketInfo.port, host: socketInfo.host })\n\n  // Reserve this port so that OpenPort sees it as being unavailable in case other instances\n  // of plumbing happen to open. This isn't intended to do anything except that, hence the no-op listener.\n  // const httpServer = http.createServer()\n  // httpServer.listen(socketInfo.port)\n\n  websocketServer.on('connection', (websocket, request) => {\n    const params = getWsParams(websocket, request)\n\n    if (!params.type) params.type = 'default'\n    if (!params.haiku) params.haiku = {}\n    if (!websocket.params) websocket.params = params\n\n    const type = websocket.params && websocket.params.type\n    const alias = websocket.params && websocket.params.alias\n\n    let folder = websocket.params && websocket.params.folder\n\n    websocketServer.emit('connected', websocket, type, alias, folder, params)\n\n    websocket.on('message', (data) => {\n      const message = JSON.parse(data)\n\n      // Allow explicit override; Creator uses this!\n      // Also some tests use this.\n      if (message.folder) folder = message.folder\n\n      websocketServer.emit('message', type, alias, folder, message, websocket, websocketServer, createResponder(message, websocket))\n    })\n  })\n\n  return websocketServer\n}\n\nfunction sendMessageToClient (client, message) {\n  if (client.readyState === WebSocket.OPEN) {\n    const data = JSON.stringify(message)\n    return client.send(data)\n  }\n}\n\nfunction createResponder (message, websocket) {\n  return function messageResponder (error, result) {\n    const reply = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: result || void (0),\n      error: (error) ? serializeError(error) : void (0)\n    }\n    sendMessageToClient(websocket, reply)\n  }\n}\n\nfunction remapProjectObjectToExpectedFormat (projectObject) {\n  return {\n    projectName: projectObject.Name\n    // GitRemoteUrl\n    // GitRemoteName\n    // GitRemoteArn\n  }\n}\n\nfunction isElectronMain () {\n  return typeof process !== 'undefined' && process.versions && !!process.versions.electron\n}\n"]}