{"version":3,"sources":["../src/Plumbing.js"],"names":["ProjectFolder","IGNORED_METHOD_MESSAGES","setTimelineTime","doesProjectHaveUnsavedChanges","masterHeartbeat","METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY","toggleDevTools","openTextEditor","openTerminal","saveProject","previewProject","fetchProjectInfo","ROOT_DIR","join","__dirname","PROC_DIR","PROCS","master","name","path","creator","require","args","opts","electron","spawn","Q_GLASS","alias","Q_MASTER","Q_TIMELINE","Q_CREATOR","AWAIT_INTERVAL","WAIT_DELAY","HAIKU_DEFAULTS","socket","port","process","env","HAIKU_CONTROL_PORT","host","HAIKU_CONTROL_HOST","HAIKU_API","setConfig","baseUrl","emitter","PINFO","pid","basename","__filename","execPath","idIncrementor","_id","PLUMBING_INSTANCES","on","info","forEach","plumbing","teardown","exit","Plumbing","push","subprocs","envoys","servers","clients","requests","caches","_isTornDown","_methodMessages","executeMethodMessagesWorker","_pulseInterval","setInterval","pulses","pendingMethods","length","isTornDown","client","params","folder","id","readyState","subproc","_attributes","closed","warn","awaitFolderClientWithQuery","err","Error","startProject","haiku","cb","envoyServer","WebSocket","logger","ready","then","envoy","envoyTimelineHandler","envoyTourHandler","bindHandler","launchControlServer","server","HAIKU_PLUMBING_PORT","HAIKU_PLUMBING_HOST","url","websocket","type","JSON","stringify","i","OPEN","close","splice","index","_index","message","responder","sendBroadcastMessage","callback","error","result","method","processMethodMessage","spawnSubgroup","spawned","apply","stack","nextMethodMessage","shift","setTimeout","bind","methodMessageBeforeLog","handleClientAction","methodMessageAfterLog","plumbingMethod","sendMessageToClient","concat","query","timeout","creatorClient","clientsOfFolder","clientMatching","sendClientMethod","sendClientRequest","undefined","Math","random","data","send","kill","stdin","pause","signal","clearInterval","sendFolderSpecificClientMethodQuery","masterState","maybeProjectName","maybeUsername","maybePassword","finish","projectsHome","projectPath","skipContentCreation","organizationName","authorName","projectOptions","projectName","username","password","get","skipCDNBundles","projectFolder","series","getCurrentOrganizationName","ensureProject","_projectFolder","exists","doesFolderExist","gitInitializeUsername","gitInitializePassword","projectOptionsAgain","initializeFolder","answer","config","isAuthenticated","isAuthed","getUserId","authToken","getAuthToken","set","user","authenticate","authErr","authResponse","httpResponse","statusCode","Token","setAuthToken","setUserId","organization","list","orgErr","orgsArray","orgHttpResp","Name","project","projectListErr","projectsList","finalList","map","remapProjectObjectToExpectedFormat","create","projectCreateErr","deleteByName","saveOptions","previewOptions","fetchOptions","assetAbspath","assetRelpath","undoOptions","redoOptions","slice","from","modulepath","normalize","relative","eachSeries","clientSpec","nextStep","maybeOutput","center","prototype","existingSpawnedSubprocs","mode","spawnSubprocesses","extendEnvironment","next","spawnSubprocess","existing","connected","disconnected","exited","reestablishConnection","reused","proc","isElectronMain","default","NODE_ENV","console","log","stdio","fork","stdout","toString","stderr","match","emit","whom","portrange","getPort","createServer","listen","once","code","socketInfo","websocketServer","createControlSocket","HAIKU_ENV","parse","getWsParams","request","split","Server","createResponder","messageResponder","reply","jsonrpc","projectObject","versions"],"mappings":"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","file":"Plumbing.js","sourcesContent":["import path from 'path'\nimport async from 'async'\nimport fse from 'haiku-fs-extra'\nimport find from 'lodash.find'\nimport merge from 'lodash.merge'\nimport filter from 'lodash.filter'\nimport net from 'net'\nimport cp from 'child_process'\nimport qs from 'qs'\nimport WebSocket from 'ws'\nimport { EventEmitter } from 'events'\nimport EnvoyServer from 'haiku-sdk-creator/lib/envoy/server'\nimport EnvoyLogger from 'haiku-sdk-creator/lib/envoy/logger'\nimport TimelineHandler from 'haiku-sdk-creator/lib/timeline'\nimport TourHandler from 'haiku-sdk-creator/lib/tour'\nimport { inkstone } from 'haiku-sdk-inkstone'\nimport { client as sdkClient } from 'haiku-sdk-client'\nimport StateObject from 'haiku-state-object'\nimport serializeError from 'haiku-serialization/src/utils/serializeError'\nimport logger from 'haiku-serialization/src/utils/LoggerInstance'\nimport * as ProjectFolder from './ProjectFolder'\nimport getNormalizedComponentModulePath from 'haiku-serialization/src/model/helpers/getNormalizedComponentModulePath'\n\nconst IGNORED_METHOD_MESSAGES = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true\n  // These are noisy, maybe not worth including?\n  // applyPropertyGroupDelta: true,\n  // applyPropertyGroupValue: true,\n  // moveSegmentEndpoints: true,\n  // moveKeyframes: true\n}\n\n// See note under 'processMethodMessage' for the purpose of this\nconst METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY = {\n  setTimelineTime: true,\n  doesProjectHaveUnsavedChanges: true,\n  masterHeartbeat: true,\n  toggleDevTools: true,\n  openTextEditor: true,\n  openTerminal: true,\n  saveProject: true,\n  previewProject: true,\n  fetchProjectInfo: true\n}\n\nconst ROOT_DIR = path.join(__dirname, '..')\nconst PROC_DIR = path.join(__dirname)\n\nconst PROCS = {\n  master: { name: 'master', path: path.join(PROC_DIR, 'MasterProcess.js') },\n  creator: { name: 'creator', path: require('electron'), args: [path.join(ROOT_DIR, 'node_modules', 'haiku-creator-electron', 'lib', 'electron.js')], opts: { electron: true, spawn: true } }\n}\n\nconst Q_GLASS = { alias: 'glass' }\nconst Q_MASTER = { alias: 'master' }\nconst Q_TIMELINE = { alias: 'timeline' }\nconst Q_CREATOR = { alias: 'creator' }\n\nconst AWAIT_INTERVAL = 100\nconst WAIT_DELAY = 10 * 1000\n\nconst HAIKU_DEFAULTS = {\n  socket: {\n    port: process.env.HAIKU_CONTROL_PORT,\n    host: process.env.HAIKU_CONTROL_HOST || '0.0.0.0'\n  }\n}\n\n// configure inkstone, useful for testing off of dev (HAIKU_API=https://localhost:8080/)\nif (process.env.HAIKU_API) {\n  inkstone.setConfig({\n    baseUrl: process.env.HAIKU_API\n  })\n}\n\nconst emitter = new EventEmitter()\n\nconst PINFO = `${process.pid} ${path.basename(__filename)} ${path.basename(process.execPath)}`\n\nvar idIncrementor = 1\nfunction _id () {\n  return idIncrementor++\n}\n\nconst PLUMBING_INSTANCES = []\n\n// In test environment these listeners may get wrapped so we begin listening\n// to them immediately in the hope that we can start listening before the\n// test wrapper steps in and interferes\nprocess.on('exit', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) exiting`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n})\nprocess.on('SIGINT', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGINT`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\nprocess.on('SIGTERM', () => {\n  logger.info(`[plumbing] plumbing process (${PINFO}) SIGTERM`)\n  PLUMBING_INSTANCES.forEach((plumbing) => plumbing.teardown())\n  process.exit()\n})\n\nexport default class Plumbing extends StateObject {\n  constructor () {\n    super()\n\n    // Keep track of all PLUMBING_INSTANCES so we can put our process.on listeners\n    // above this constructor, which is necessary in test environments such\n    // as tape where exit might never get called despite an exit.\n    PLUMBING_INSTANCES.push(this)\n\n    this.subprocs = []\n    this.envoys = []\n    this.servers = []\n    this.clients = []\n    this.requests = {}\n    this.caches = {}\n\n    // Keep track of whether we got a teardown signal so we know whether we should keep trying to\n    // reconnect any subprocs that seem to have disconnected. This seems useless (why not just kill\n    // the process) but keep in mind we need to unit test this.\n    this._isTornDown = false\n\n    this._methodMessages = []\n    this.executeMethodMessagesWorker()\n\n    // Just log information about who is connected to make it easier to diagnose comms issues.\n    this._pulseInterval = setInterval(() => {\n      var pulses = {}\n      pulses.info = { pendingMethods: this._methodMessages.length, isTornDown: this._isTornDown }\n      this.clients.forEach((client) => {\n        if (!pulses[client.params.folder]) pulses[client.params.folder] = []\n        pulses[client.params.folder].push(['client', client.params.id, client.params.alias, client.readyState === 1]) /** WebSocket.OPEN */\n      })\n      this.subprocs.forEach((subproc) => {\n        if (!pulses[subproc._attributes.folder]) pulses[subproc._attributes.folder] = []\n        pulses[subproc._attributes.folder].push(['subproc', subproc._attributes.id, subproc._attributes.name, !subproc._attributes.closed])\n      })\n      // logger.info(`[plumbing] pulse`, JSON.stringify(pulses))\n    }, 10 * 1000)\n\n    emitter.on('teardown-requested', () => {\n      this.teardown()\n    })\n    emitter.on('restart-client', (folder, alias) => {\n      if (this._isTornDown) {\n        logger.info('[plumbing] we are torn down, so not restarting client')\n        return void (0)\n      }\n\n      logger.warn(`[plumbing] restarting client ${alias} in ${folder}`)\n      return this.awaitFolderClientWithQuery(folder, 'startProject', { alias }, WAIT_DELAY, (err) => {\n        if (err) throw new Error(`Unable to restart client ${alias} in ${folder}`)\n        if (alias === 'master') {\n          return this.startProject(null/* projectName is ignored */, folder, (err) => {\n            if (err) throw new Error(`Unable to restart client ${alias} in ${folder}`)\n            logger.warn(`[plumbing] restarted client ${alias} in ${folder}`)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Mostly-internal methods\n   */\n\n  launch (haiku = {}, cb) {\n    haiku = merge({}, HAIKU_DEFAULTS, haiku)\n\n    logger.info('[plumbing] launching plumbing', haiku)\n\n    logger.info('[plumbing] launching envoy server')\n\n    var envoyServer = new EnvoyServer({\n      WebSocket: WebSocket,\n      logger: new EnvoyLogger('warn', logger)\n    })\n\n    this.envoys.push(envoyServer)\n\n    return envoyServer.ready().then(() => {\n      if (!haiku.envoy) haiku.envoy = {} // Gets stored in env vars before subprocs created\n      haiku.envoy.port = envoyServer.port\n      haiku.envoy.host = envoyServer.host\n\n      var envoyTimelineHandler = new TimelineHandler(envoyServer)\n      var envoyTourHandler = new TourHandler(envoyServer)\n\n      envoyServer.bindHandler('timeline', TimelineHandler, envoyTimelineHandler)\n      envoyServer.bindHandler('tour', TourHandler, envoyTourHandler)\n\n      logger.info('[plumbing] launching plumbing control server')\n\n      return this.launchControlServer(haiku.socket, (err, server, host, port) => {\n        if (err) return cb(err)\n\n        // Forward these env vars to creator\n        process.env.HAIKU_PLUMBING_PORT = port\n        process.env.HAIKU_PLUMBING_HOST = host\n\n        if (!haiku.socket) haiku.socket = {}\n        haiku.socket.port = port\n        haiku.socket.host = host\n        haiku.plumbing = { url: `http://${host}:${port}` }\n\n        this.servers.push(server)\n\n        server.on('connected', (websocket, type, alias, folder, params) => {\n          logger.info(`[plumbing] websocket client connection opened: (${type} ${alias}) ${JSON.stringify(params)}`)\n\n          // Don't allow duplicate clients\n          for (let i = this.clients.length - 1; i >= 0; i--) {\n            let client = this.clients[i]\n            if (client.params) {\n              if (client.params.alias === alias && client.params.folder === folder) {\n                if (client.readyState === WebSocket.OPEN) {\n                  client.close()\n                }\n                this.clients.splice(i, 1)\n              }\n            }\n          }\n\n          websocket.params.id = _id()\n          const index = this.clients.push(websocket) - 1\n\n          websocket._index = index\n\n          websocket.on('close', () => {\n            logger.info(`[plumbing] websocket client connection closed (${type} ${alias})`)\n            this.clients.splice(index, 1)\n          })\n        })\n\n        server.on('message', (type, alias, folder, message, websocket, server, responder) => {\n          // IMPORTANT! Creator uses this\n          if (!folder && message.folder) {\n            folder = message.folder\n          }\n\n          if (message.type === 'broadcast') {\n            // Give clients the chance to emit events to all others\n            this.sendBroadcastMessage(message, folder, alias, websocket)\n          } else if (message.id && this.requests[message.id]) {\n            // If we have an entry in this.requests, that means this is a reply\n            const { callback } = this.requests[message.id]\n            delete this.requests[message.id]\n            return callback(message.error, message.result, message)\n          } else if (message.method) { // This condition MUST happen before the one above since .method is present on that one too\n            // Ensure that actions/methods occur in order by using a queue\n            this.processMethodMessage(type, alias, folder, message, responder)\n          }\n        })\n\n        this.spawnSubgroup(this.subprocs, haiku, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb(null, host, port, server, spawned, haiku.envoy)\n        })\n      })\n    })\n  }\n\n  methodMessageBeforeLog (message, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.info(`[plumbing] ↓-------- BEGAN ${message.method} from ${alias} --------↓`)\n      logger.info(`[plumbing] ${message.method} -> ${JSON.stringify(message.params)}`)\n    }\n  }\n\n  methodMessageAfterLog (message, err, result, alias) {\n    if (!IGNORED_METHOD_MESSAGES[message.method]) {\n      logger.info(`[plumbing] ${message.method} <-`, (err && err.message) || '', (err && err.stack) || '', result)\n      logger.info(`[plumbing] ↑-------- ENDED ${message.method} from ${alias} --------↑`)\n    }\n  }\n\n  executeMethodMessagesWorker () {\n    if (this._isTornDown) return void (0) // Avoid leaking a handle\n    let nextMethodMessage = this._methodMessages.shift()\n    if (!nextMethodMessage) return setTimeout(this.executeMethodMessagesWorker.bind(this), 64)\n\n    let { type, alias, folder, message, cb } = nextMethodMessage\n\n    this.methodMessageBeforeLog(message, alias)\n\n    // Actions are a special case of methods that end up routed through all of the clients,\n    // glass -> timeline -> master before returning. They go through one handler as opposed\n    // to the normal 'methods' which plumbing handles on a more a la carte basis\n    if (message.type === 'action') {\n      return this.handleClientAction(type, alias, folder, message.method, message.params, (err, result) => {\n        this.methodMessageAfterLog(message, err, result, alias)\n        cb(err, result)\n        this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n      })\n    }\n\n    return this.plumbingMethod(message.method, message.params || [], (err, result) => {\n      this.methodMessageAfterLog(message, err, result, alias)\n      cb(err, result)\n      this.executeMethodMessagesWorker() // Continue with the next queue entry (if any)\n    })\n  }\n\n  processMethodMessage (type, alias, folder, message, cb) {\n    // Certain messages aren't of a kind that we can reliably enqueue, either because they happen\n    // too fast or because they have a 'fire and forget' nature.\n    if (METHOD_MESSAGES_TO_HANDLE_IMMEDIATELY[message.method]) {\n      if (message.type === 'action') return this.handleClientAction(type, alias, folder, message.method, message.params, cb)\n      else return this.plumbingMethod(message.method, message.params, cb)\n    } else {\n      this._methodMessages.push({ type, alias, folder, message, cb })\n    }\n  }\n\n  sendBroadcastMessage (message, folder, alias, websocket) {\n    this.clients.forEach((client) => {\n      if (websocket && client === websocket) return void (0) // Skip message's send\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      delete message.id // Don't confuse this as a request/response\n      sendMessageToClient(client, merge(message, { folder, alias }))\n    })\n  }\n\n  plumbingMethod (method, params = [], cb) {\n    if (typeof this[method] !== 'function') return cb(new Error(`Plumbing has no method '${method}'`))\n    return this[method].apply(this, params.concat((error, result) => {\n      if (error) return cb(error)\n      return cb(null, result)\n    }))\n  }\n\n  awaitFolderClientWithQuery (folder, method, query, timeout, cb) {\n    if (!folder) return cb(new Error('Folder argument was missing'))\n    if (!query) return cb(new Error('Query argument was missing'))\n    if (timeout <= 0) {\n      return cb(new Error(`Timed out waiting for client ${JSON.stringify(query)} of ${folder} to connect`))\n    }\n\n    // // uncomment me for insight into why a request might not be making it\n    // console.log('==== awaiting', method, query)\n\n    // HACK: At the time of this writing, there is only \"one\" creator client, not one per folder.\n    // So the method just get ssent to the one client (if available)\n    if (query.alias === 'creator') {\n      const creatorClient = find(this.clients, { params: query })\n      if (creatorClient) {\n        return cb(null, creatorClient)\n      }\n    } else {\n      const clientsOfFolder = filter(this.clients, { params: { folder } })\n      if (clientsOfFolder && clientsOfFolder.length > 0) {\n        const clientMatching = find(clientsOfFolder, { params: query })\n        if (clientMatching) {\n          return cb(null, clientMatching)\n        }\n      }\n    }\n    return setTimeout(() => {\n      return this.awaitFolderClientWithQuery(folder, method, query, timeout - AWAIT_INTERVAL, cb)\n    }, AWAIT_INTERVAL)\n  }\n\n  sendFolderSpecificClientMethodQuery (folder, query = {}, method, params = [], cb) {\n    return this.awaitFolderClientWithQuery(folder, method, query, WAIT_DELAY, (err, client) => {\n      if (err) return cb(err)\n      return this.sendClientMethod(client, method, params, cb)\n    })\n  }\n\n  sendClientMethod (websocket, method, params = [], callback) {\n    var message = { method, params }\n    return this.sendClientRequest(websocket, message, callback)\n  }\n\n  sendClientRequest (websocket, message, callback) {\n    if (message.id === undefined) message.id = `${Math.random()}`\n    this.requests[message.id] = { websocket, message, callback }\n    if (websocket.readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message)\n      return websocket.send(data)\n    } else {\n      logger.info(`[plumbing] websocket readyState was not open so we did not send message ${message.method || message.id}`)\n      callback() // Should this return an error or remain silent?\n    }\n  }\n\n  teardown () {\n    logger.info('[plumbing] teardown method called')\n    this.subprocs.forEach((subproc) => {\n      if (subproc.kill) {\n        logger.info('[plumbing] sending interrupt signal')\n        if (subproc.stdin) subproc.stdin.pause()\n        subproc.kill('SIGKILL')\n      } else if (subproc.exit) {\n        logger.info('[plumbing] calling exit')\n        subproc.exit()\n      }\n    })\n    this.envoys.forEach((envoy) => {\n      logger.info('[plumbing] closing envoy')\n      envoy.close()\n    })\n    this.servers.forEach((server) => {\n      logger.info('[plumbing] closing server')\n      server.close()\n    })\n    this.clients.forEach((client) => {\n      if (client.readyState !== WebSocket.OPEN) return void (0)\n      logger.info('[plumbing] sending crash signal to client')\n      sendMessageToClient(client, { signal: 'CRASH' })\n    })\n    this._isTornDown = true\n    clearInterval(this._pulseInterval)\n  }\n\n  toggleDevTools (folder, cb) {\n    this.sendBroadcastMessage({ type: 'broadcast', name: 'dev-tools:toggle' })\n    cb()\n  }\n\n  /**\n   * Outward-facing\n   */\n\n  masterHeartbeat (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'masterHeartbeat', [], (err, masterState) => {\n      if (err) return cb(err)\n      return cb(null, masterState)\n    })\n  }\n\n  doesProjectHaveUnsavedChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'doesProjectHaveUnsavedChanges', [], cb)\n  }\n\n  /**\n   * @method initializeProject\n   * @description Flexible method for setting up a project based on an unknown file system state and possibly missing inputs.\n   * We make a decision here as to where + whether to generate a new folder.\n   * With a folder in hand, we boot up the MasterProcess for the folder in question.\n   * When it is ready, we kick off the content initialization step with initializeFolder.\n   */\n  initializeProject (maybeProjectName, { projectsHome, projectPath, skipContentCreation, organizationName, authorName }, maybeUsername, maybePassword, finish) {\n    const projectOptions = {\n      projectsHome,\n      projectPath,\n      skipContentCreation,\n      organizationName,\n      projectName: maybeProjectName,\n      username: maybeUsername,\n      password: maybePassword\n    }\n\n    // TODO/QUESTION: When do these attributes get set upstream?\n    if (!projectOptions.organizationName) projectOptions.organizationName = this.get('organizationName')\n    if (!projectOptions.authorName) projectOptions.authorName = this.get('username')\n\n    // We don't need to waste time making these bundles before we have done anything -\n    // Instead, we'll generate them just-in-time when the user saves.\n    projectOptions.skipCDNBundles = true\n\n    let projectFolder // To be populated momentarily...\n\n    return async.series([\n      (cb) => {\n        return this.getCurrentOrganizationName((err, organizationName) => {\n          if (err) return cb(err)\n          projectOptions.organizationName = organizationName\n          return cb()\n        })\n      },\n      (cb) => {\n        return ProjectFolder.ensureProject(projectOptions, (err, _projectFolder) => {\n          if (err) return cb(err)\n          projectFolder = _projectFolder\n          return cb()\n        })\n      },\n      (cb) => {\n        // Just a second check to make sure we created the folder - probably not necessary\n        return fse.exists(projectFolder, (doesFolderExist) => {\n          if (!doesFolderExist) return cb(new Error('Project folder does not exist'))\n          return cb()\n        })\n      },\n      (cb) => {\n        return this.spawnSubgroup(this.subprocs, { folder: projectFolder }, (err, spawned) => {\n          if (err) return cb(err)\n          this.subprocs.push.apply(this.subprocs, spawned)\n          return cb()\n        })\n      },\n      (cb) => {\n        // QUESTION: Does this *need* to happen down here after the org fetch?\n        const gitInitializeUsername = maybeUsername || this.get('username')\n        const gitInitializePassword = maybePassword || this.get('password')\n\n        // A simpler project options to avoid passing options only used for the first pass, e.g. skipContentCreation\n        const projectOptionsAgain = {\n          organizationName: projectOptions.organizationName,\n          username: projectOptions.username,\n          password: projectOptions.password,\n          authorName\n        }\n\n        return this.initializeFolder(maybeProjectName, projectFolder, gitInitializeUsername, gitInitializePassword, projectOptionsAgain, (err) => {\n          if (err) return cb(err)\n          return cb(null, projectFolder)\n        })\n      }\n    ], (err) => {\n      if (err) return finish(err)\n      return finish(null, projectFolder)\n    })\n  }\n\n  /**\n   * @method initializeFolder\n   * @description Assuming we already have a folder created, an organization name, etc., now bootstrap the folder itself.\n   */\n  initializeFolder (maybeProjectName, folder, maybeUsername, maybePassword, projectOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'initializeFolder', [maybeProjectName, maybeUsername, maybePassword, projectOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  startProject (maybeProjectName, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'startProject', [], cb)\n  }\n\n  isUserAuthenticated (cb) {\n    var answer = sdkClient.config.isAuthenticated()\n    if (!answer) {\n      return cb(null, { isAuthed: false })\n    }\n    return this.getCurrentOrganizationName((err, organizationName) => {\n      if (err) return cb(err)\n      return cb(null, {\n        isAuthed: true,\n        username: sdkClient.config.getUserId(),\n        authToken: sdkClient.config.getAuthToken(),\n        organizationName\n      })\n    })\n  }\n\n  authenticateUser (username, password, cb) {\n    this.set('organizationName', null) // Unset this cache to avoid writing others folders if somebody switches accounts in the middle of a session\n    return inkstone.user.authenticate(username, password, (authErr, authResponse, httpResponse) => {\n      if (authErr) return cb(authErr)\n      if (httpResponse.statusCode === 401) return cb(new Error('Unauthorized'))\n      if (httpResponse.statusCode > 299) return cb(new Error(`Error status code: ${httpResponse.statusCode}`))\n      if (!authResponse) return cb(new Error('Auth response was empty'))\n      this.set('username', username)\n      this.set('password', password)\n      this.set('inkstoneAuthToken', authResponse.Token)\n      sdkClient.config.setAuthToken(authResponse.Token)\n      sdkClient.config.setUserId(username)\n      return this.getCurrentOrganizationName((err, organizationName) => {\n        if (err) return cb(err)\n        return cb(null, {\n          isAuthed: true,\n          username: username,\n          authToken: authResponse.Token,\n          organizationName\n        })\n      })\n    })\n  }\n\n  getCurrentOrganizationName (cb) {\n    if (this.get('organizationName')) return cb(null, this.get('organizationName'))\n    logger.info('[plumbing] fetching organization name for current user')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.organization.list(authToken, (orgErr, orgsArray, orgHttpResp) => {\n      if (orgErr) return cb(new Error('Organization error'))\n      if (orgHttpResp.statusCode === 401) return cb(new Error('Unauthorized organization'))\n      if (orgHttpResp.statusCode > 299) return cb(new Error(`Error status code: ${orgHttpResp.statusCode}`))\n      if (!orgsArray || orgsArray.length < 1) return cb(new Error('No organization found'))\n      // Cache this since it's used to write/manage some project files\n      var organizationName = orgsArray[0].Name\n      logger.info('[plumbing] organization name:', organizationName)\n      this.set('organizationName', organizationName)\n      return cb(null, this.get('organizationName'))\n    })\n  }\n\n  listProjects (cb) {\n    logger.info('[plumbing] listing projects')\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.list(authToken, (projectListErr, projectsList) => {\n      if (projectListErr) return cb(projectListErr)\n      var finalList = projectsList.map(remapProjectObjectToExpectedFormat)\n      logger.info('[plumbing] fetched project list', JSON.stringify(finalList))\n      return cb(null, finalList)\n    })\n  }\n\n  createProject (name, cb) {\n    logger.info('[plumbing] creating project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.create(authToken, { Name: name }, (projectCreateErr, project) => {\n      if (projectCreateErr) return cb(projectCreateErr)\n      return cb(null, remapProjectObjectToExpectedFormat(project))\n    })\n  }\n\n  deleteProject (name, cb) {\n    logger.info('[plumbing] deleting project', name)\n    var authToken = sdkClient.config.getAuthToken()\n    return inkstone.project.deleteByName(authToken, name, cb)\n  }\n\n  discardProjectChanges (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'discardProjectChanges', [], cb)\n  }\n\n  saveProject (folder, projectName, maybeUsername, maybePassword, saveOptions, cb) {\n    if (!saveOptions) saveOptions = {}\n    if (!saveOptions.authorName) saveOptions.authorName = this.get('username')\n    if (!saveOptions.organizationName) saveOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] saving with options', saveOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'saveProject', [projectName, maybeUsername, maybePassword, saveOptions], cb)\n  }\n\n  previewProject (folder, projectName, previewOptions, cb) {\n    if (!previewOptions) previewOptions = {}\n    if (!previewOptions.authorName) previewOptions.authorName = this.get('username')\n    if (!previewOptions.organizationName) previewOptions.organizationName = this.get('organizationName')\n    logger.info('[plumbing] previewing with options', previewOptions)\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'previewProject', [projectName, previewOptions], cb)\n  }\n\n  fetchProjectInfo (folder, projectName, maybeUsername, maybePassword, fetchOptions, cb) {\n    if (!fetchOptions) fetchOptions = {}\n    if (!fetchOptions.authorName) fetchOptions.authorName = this.get('username')\n    if (!fetchOptions.organizationName) fetchOptions.organizationName = this.get('organizationName')\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchProjectInfo', [projectName, maybeUsername, maybePassword, fetchOptions], cb)\n  }\n\n  listAssets (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'fetchAssets', [], cb)\n  }\n\n  linkAsset (assetAbspath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'linkAsset', [assetAbspath], cb)\n  }\n\n  unlinkAsset (assetRelpath, folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'unlinkAsset', [assetRelpath], cb)\n  }\n\n  gitUndo (folder, undoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitUndo', [folder, undoOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  gitRedo (folder, redoOptions, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'gitRedo', [folder, redoOptions], (err) => {\n      if (err) return cb(err)\n      return cb()\n    })\n  }\n\n  readMetadata (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readMetadata', [folder], cb)\n  }\n\n  readAllStateValues (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllStateValues', [folder], cb)\n  }\n\n  readAllEventHandlers (folder, cb) {\n    return this.sendFolderSpecificClientMethodQuery(folder, Q_MASTER, 'readAllEventHandlers', [folder], cb)\n  }\n\n  /** ------------------- */\n  /** ------------------- */\n  /** ------------------- */\n\n  handleClientAction (type, alias, folder, method, params, cb) {\n    // Params always arrive with the folder as the first argument, so we strip that off\n    params = params.slice(1)\n\n    // This special method gets called frequently (up to 60 times per second) so fast-path it and don't log it\n    if (method === 'setTimelineTime') {\n      if (alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_GLASS, method, params.concat({ from: alias }), () => {})\n      } else if (alias === 'glass') {\n        return this.sendFolderSpecificClientMethodQuery(folder, Q_TIMELINE, method, params.concat({ from: alias }), () => {})\n      }\n    }\n\n    // HACK: A few methods require this special handling; #FIXME\n    if (method === 'instantiateComponent') {\n      var modulepath = getNormalizedComponentModulePath(params[0], /* ?? */ '')\n      if (!modulepath) {\n        params[0] = path.normalize(path.relative(folder, params[0]))\n      }\n    } else if (method === 'mergeDesign') {\n      params[2] = path.normalize(path.relative(folder, params[2]))\n    }\n\n    // Start with the glass, since that's most visible, then move through the rest, and end\n    // with master at the end, which results in a file system update reflecting the change\n    async.eachSeries([Q_GLASS, Q_TIMELINE, Q_CREATOR, Q_MASTER], (clientSpec, nextStep) => {\n      if (clientSpec.alias === alias) {\n        if (method !== 'mergeDesign') {\n          // Don't send to oneself, unless it is mergeDesign, which is a special snowflake\n          // that originates in 'master' but also needs to be sent back to it (HACK)\n          return nextStep()\n        }\n      }\n\n      // There are a bunch of methods (actually...most of them) that creator doesn't need to receive\n      if ((method === 'moveSegmentEndpoints' || method === 'mergeDesign' || method === 'moveKeyframes') && clientSpec.alias === 'creator') {\n        return nextStep()\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] -> client action ${method} being sent to ${clientSpec.alias}`)\n      }\n\n      // HACK: Glass and timeline always expect some metadata as the last argument\n      if (clientSpec.alias === 'glass' || clientSpec.alias === 'timeline') {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params.concat({ from: alias }), (err, maybeOutput) => {\n          if (err) return nextStep(err)\n\n          // HACK: Stupidly we have to rely on glass to tell us where to position the element based on the\n          // offset of the artboard. So in this one case we have the glass transmit a return value that\n          // we read and then use as the payload to the next actions in this pipeline\n          if (method === 'instantiateComponent' && clientSpec.alias === 'glass') {\n            if (maybeOutput && maybeOutput.center) {\n              // Called 'posdata' in the ActiveComponent method as the second arg.\n              // The third arg is the more open-ended 'metadata' (API change from May 10)\n              params[1] = maybeOutput.center\n            }\n          }\n\n          return nextStep()\n        })\n      } else {\n        return this.sendFolderSpecificClientMethodQuery(folder, clientSpec, method, params, (err) => {\n          if (err) return nextStep(err)\n          return nextStep()\n        })\n      }\n    }, (err) => {\n      if (err) {\n        if (!IGNORED_METHOD_MESSAGES[method]) {\n          logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} errored`, err)\n        }\n        if (cb) return cb(err)\n        return void (0)\n      }\n\n      if (!IGNORED_METHOD_MESSAGES[method]) {\n        logger.info(`[plumbing] <- client action ${method} from ${type}@${alias} complete`)\n      }\n      if (cb) return cb()\n      return void (0)\n    })\n  }\n}\n\nPlumbing.prototype.spawnSubgroup = function (existingSpawnedSubprocs, haiku, cb) {\n  logger.info('[plumbing] spawning subprocesses for this group', haiku)\n  const subprocs = []\n  // MasterProcess can only operate if a folder is defined\n  if (haiku.folder) {\n    subprocs.push(PROCS.master)\n  }\n  if (haiku.mode === 'creator') {\n    subprocs.push(PROCS.creator)\n  }\n  return this.spawnSubprocesses(existingSpawnedSubprocs, haiku, subprocs, cb)\n}\n\nPlumbing.prototype.spawnSubprocesses = function (existingSpawnedSubprocs, haiku, subprocs, cb) {\n  this.extendEnvironment(haiku)\n  return async.map(subprocs, (subproc, next) => {\n    return this.spawnSubprocess(existingSpawnedSubprocs, haiku.folder, subproc, next)\n  }, (err, spawned) => {\n    if (err) return cb(err)\n    return cb(null, spawned)\n  })\n}\n\nPlumbing.prototype.spawnSubprocess = function spawnSubprocess (existingSpawnedSubprocs, folder, { name, path, args, opts }, cb) {\n  const existing = find(existingSpawnedSubprocs, { _attributes: { name, folder } })\n  if (existing) {\n    // Reconnection (via websocket) is only available if the process itself is still alive\n    if (existing.connected && !existing._attributes.disconnected && !existing._attributes.exited && !existing._attributes.closed) {\n      if (existing.reestablishConnection) existing.reestablishConnection()\n      else (existing.send('reestablishConnection!'))\n\n      logger.info(`[plumbing] reusing existing ${name} process`)\n      existing._attributes.reused = true\n\n      return cb(null, existing)\n    }\n  }\n\n  let proc\n\n  if (opts && opts.electron && isElectronMain() && typeof path === 'object') {\n    // If we are *in* Electron, this 'path', which would normally be an absolute path to the\n    // Electron binary, is actually the require('electron') export object. Instead of launching\n    // the subprocess 'with' Electron binary as the command, we can just 'require' it since\n    // that is where we already are. This is condition is critical for our packaging hooks.\n    // Be aware that a change here might break the ability to create a working distribution.\n    logger.info(`[plumbing] requiring ${name} @ ${args[0]}`)\n    proc = require(args[0]).default\n  } else {\n    // If we aren't in electron, start the process using the electron binary path\n    if (opts && opts.spawn) {\n      // TODO:  disable for prod?\n      if (process.env.NODE_ENV !== 'production') {\n        args.push('--enable-logging', '--remote-debugging-port=9222')\n      }\n      console.log('SPAWNING', args)\n      proc = cp.spawn(path, args, { stdio: [null, null, null, 'ipc'] })\n    } else {\n      args = args || []\n      if (process.env.NODE_ENV !== 'production') {\n        args.push('--debug=5859')\n      }\n      console.log('FORKING', args)\n      proc = cp.fork(path, args)\n    }\n    logger.info(`[plumbing] proc ${name} created @ ${path}`)\n    if (proc.stdout) {\n      proc.stdout.on('data', (data) => { logger.info(`[plumbing] proc ${name} stdin:`, data.toString()) })\n    }\n    if (proc.stderr) {\n      proc.stderr.on('data', (error) => { logger.info(`[plumbing] proc ${name} stderr:`, error.toString()) })\n    }\n  }\n\n  proc._attributes = { name, folder, id: _id() }\n\n  proc.on('exit', () => {\n    logger.info(`[plumbing] proc ${name} exiting`)\n    proc._attributes.exited = true\n\n    if (proc._attributes.name) {\n      // If electron is finished, we should clean up stuff. This usually means the user has closed the view.\n      if (proc._attributes.name.match(/electron/) || name.match(/creator/)) {\n        emitter.emit('teardown-requested')\n      } else if (proc._attributes.name.match(/master/)) {\n        // Avoid ending up in an endless loop of fail if we find ourselves torn down\n        if (!this._isTornDown) {\n          // If we got here, master probably got an exception and exited. We may want to notify the views.\n          // Note that a simple app refresh should NOT get us here!!! - that would only trigger websocket disconnect.\n          this.sendBroadcastMessage({ folder, type: 'broadcast', name: 'crash', from: 'plumbing', whom: 'master' })\n\n          // Master should probably keep running, since it does peristence stuff, so reconnect if we detect it crashed.\n          logger.warn(`[plumbing] trying to reconnect proc master for folder ${folder}`)\n\n          this.spawnSubprocess(existingSpawnedSubprocs, folder, { name, path, args, opts }, (err, proc) => {\n            if (err) {\n              throw new Error(`Unable to reconnect master for ${folder}`)\n            }\n            proc._attributes.closed = undefined\n            proc._attributes.disconnected = undefined\n            proc._attributes.exited = undefined\n            existingSpawnedSubprocs.push(proc)\n            logger.warn(`[plumbing] respawned proc master for folder ${folder}; restarting project`)\n            emitter.emit('restart-client', folder, name)\n          })\n        }\n      }\n    }\n\n    // Remove the old, unused process from the list of existing ones\n    for (let i = existingSpawnedSubprocs.length - 1; i >= 0; i--) {\n      let existing = existingSpawnedSubprocs[i]\n      if (existing === proc) {\n        existingSpawnedSubprocs.splice(i, 1)\n      }\n    }\n  })\n  proc.on('close', () => {\n    logger.info(`[plumbing] proc ${name} closing`)\n    proc._attributes.closed = true\n  })\n  proc.on('disconnect', () => {\n    logger.info(`[plumbing] proc ${name} disconnected`)\n    proc._attributes.disconnected = true\n  })\n  proc.on('error', (error) => {\n    logger.info(`[plumbing] proc ${name} got error`, error)\n  })\n  proc.on('message', (message) => {\n    logger.info(`[plumbing] proc ${name} got message`, message)\n  })\n  proc.on('request', (message) => {\n    logger.info(`[plumbing] proc ${name} got request`, message)\n  })\n\n  return cb(null, proc)\n}\n\nlet portrange = 45032\n\n// On the given host, return the port number of an open port. Note that the host must be\n// specified otherwise you end up getting false positives! E.g. ipv4 0.0.0.0 vs ipv6 ::.\nfunction getPort (host, cb) {\n  let port = portrange\n  portrange += 1\n  let server = net.createServer()\n  server.listen(port, host)\n  server.once('listening', () => {\n    server.once('close', () => {\n      return cb(null, port)\n    })\n    server.close()\n  })\n  server.on('error', (err) => {\n    if (err && err.code === 'EADDRINUSE') {\n      return getPort(host, cb)\n    }\n    // If not an address-in-use error, something bad has happened and we likely shouldn't continue\n    throw err\n  })\n  return server\n}\n\nPlumbing.prototype.launchControlServer = function launchControlServer (socketInfo, cb) {\n  const host = (socketInfo && socketInfo.host) || '0.0.0.0'\n\n  if (socketInfo && socketInfo.port) {\n    logger.info(`[plumbing] plumbing websocket server listening on specified port ${socketInfo.port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: socketInfo.port })\n\n    return cb(null, websocketServer, host, socketInfo.port)\n  }\n\n  logger.info('[plumbing] finding open port...')\n\n  return getPort(host, (err, port) => {\n    if (err) return cb(err)\n\n    logger.info(`[plumbing] plumbing websocket server listening on discovered port ${port}...`)\n\n    const websocketServer = this.createControlSocket({ host, port: port })\n\n    return cb(null, websocketServer, host, port)\n  })\n}\n\nPlumbing.prototype.extendEnvironment = function extendEnvironment (haiku) {\n  const HAIKU_ENV = JSON.parse(process.env.HAIKU_ENV || '{}')\n  merge(HAIKU_ENV, haiku)\n  logger.info('[plumbing] environment forwarding:', JSON.stringify(HAIKU_ENV, 2, null))\n  process.env.HAIKU_ENV = JSON.stringify(HAIKU_ENV) // Forward env to subprocesses\n}\n\nfunction getWsParams (websocket, request) {\n  const url = request.url || ''\n  const query = url.split('?')[1] || ''\n  const params = qs.parse(query)\n  params.url = url\n  return params\n}\n\nPlumbing.prototype.createControlSocket = function createControlSocket (socketInfo) {\n  const websocketServer = new WebSocket.Server({ port: socketInfo.port, host: socketInfo.host })\n\n  // Reserve this port so that OpenPort sees it as being unavailable in case other instances\n  // of plumbing happen to open. This isn't intended to do anything except that, hence the no-op listener.\n  // const httpServer = http.createServer()\n  // httpServer.listen(socketInfo.port)\n\n  websocketServer.on('connection', (websocket, request) => {\n    const params = getWsParams(websocket, request)\n\n    if (!params.type) params.type = 'default'\n    if (!params.haiku) params.haiku = {}\n    if (!websocket.params) websocket.params = params\n\n    const type = websocket.params && websocket.params.type\n    const alias = websocket.params && websocket.params.alias\n\n    let folder = websocket.params && websocket.params.folder\n\n    websocketServer.emit('connected', websocket, type, alias, folder, params)\n\n    websocket.on('message', (data) => {\n      const message = JSON.parse(data)\n\n      // Allow explicit override; Creator uses this!\n      // Also some tests use this.\n      if (message.folder) folder = message.folder\n\n      websocketServer.emit('message', type, alias, folder, message, websocket, websocketServer, createResponder(message, websocket))\n    })\n  })\n\n  return websocketServer\n}\n\nfunction sendMessageToClient (client, message) {\n  if (client.readyState === WebSocket.OPEN) {\n    const data = JSON.stringify(message)\n    return client.send(data)\n  }\n}\n\nfunction createResponder (message, websocket) {\n  return function messageResponder (error, result) {\n    const reply = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: result || void (0),\n      error: (error) ? serializeError(error) : void (0)\n    }\n    sendMessageToClient(websocket, reply)\n  }\n}\n\nfunction remapProjectObjectToExpectedFormat (projectObject) {\n  return {\n    projectName: projectObject.Name\n    // GitRemoteUrl\n    // GitRemoteName\n    // GitRemoteArn\n  }\n}\n\nfunction isElectronMain () {\n  return typeof process !== 'undefined' && process.versions && !!process.versions.electron\n}\n"]}