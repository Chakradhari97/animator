'use strict';

var Mixpanel = require('mixpanel');
var assign = require('lodash.assign');
var os = require('os');

var tokens = {
  development: '53f3639f564804dcb710fd18511d1c0b',
  production: '6f31d4f99cf71024ce27c3e404a79a61'
};

var token = process.env.HAIKU_RELEASE_ENVIRONMENT === 'production' ? tokens.production : tokens.development;

var mixpanel = Mixpanel.init(token, {
  protocol: 'https'
});

// Just in case somebody downstream wants to read/log this value
mixpanel.token = token;

var defaultPayload = {
  app: 'haiku',
  arch: os.arch(),
  platform: os.platform(),
  type: os.type(),
  process: typeof window === 'undefined' ? 'renderer' : 'main',
  node_env: process.env.NODE_ENV,
  release_environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  release_branch: process.env.HAIKU_RELEASE_BRANCH,
  release_platform: process.env.HAIKU_RELEASE_PLATFORM,
  release_version: process.env.HAIKU_RELEASE_VERSION,
  distinct_id: void 0 // Assign to email address when available
};

mixpanel.mergeToPayload = function mergeToPayload(keepPayload) {
  return assign(defaultPayload, keepPayload);
};

mixpanel.haikuTrack = function haikuTrack(eventName, eventPayload) {
  var finalPayload = assign({}, defaultPayload, eventPayload);
  console.info('[mixpanel]', eventName, finalPayload);
  return mixpanel.track(eventName, finalPayload);
};

module.exports = mixpanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9NaXhwYW5lbC5qcyJdLCJuYW1lcyI6WyJNaXhwYW5lbCIsInJlcXVpcmUiLCJhc3NpZ24iLCJvcyIsInRva2VucyIsImRldmVsb3BtZW50IiwicHJvZHVjdGlvbiIsInRva2VuIiwicHJvY2VzcyIsImVudiIsIkhBSUtVX1JFTEVBU0VfRU5WSVJPTk1FTlQiLCJtaXhwYW5lbCIsImluaXQiLCJwcm90b2NvbCIsImRlZmF1bHRQYXlsb2FkIiwiYXBwIiwiYXJjaCIsInBsYXRmb3JtIiwidHlwZSIsIndpbmRvdyIsIm5vZGVfZW52IiwiTk9ERV9FTlYiLCJyZWxlYXNlX2Vudmlyb25tZW50IiwicmVsZWFzZV9icmFuY2giLCJIQUlLVV9SRUxFQVNFX0JSQU5DSCIsInJlbGVhc2VfcGxhdGZvcm0iLCJIQUlLVV9SRUxFQVNFX1BMQVRGT1JNIiwicmVsZWFzZV92ZXJzaW9uIiwiSEFJS1VfUkVMRUFTRV9WRVJTSU9OIiwiZGlzdGluY3RfaWQiLCJtZXJnZVRvUGF5bG9hZCIsImtlZXBQYXlsb2FkIiwiaGFpa3VUcmFjayIsImV2ZW50TmFtZSIsImV2ZW50UGF5bG9hZCIsImZpbmFsUGF5bG9hZCIsImNvbnNvbGUiLCJpbmZvIiwidHJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFdBQVdDLFFBQVEsVUFBUixDQUFmO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSxlQUFSLENBQWI7QUFDQSxJQUFJRSxLQUFLRixRQUFRLElBQVIsQ0FBVDs7QUFFQSxJQUFJRyxTQUFTO0FBQ1hDLGVBQWEsa0NBREY7QUFFWEMsY0FBWTtBQUZELENBQWI7O0FBS0EsSUFBSUMsUUFBU0MsUUFBUUMsR0FBUixDQUFZQyx5QkFBWixLQUEwQyxZQUEzQyxHQUEyRE4sT0FBT0UsVUFBbEUsR0FBK0VGLE9BQU9DLFdBQWxHOztBQUVBLElBQUlNLFdBQVdYLFNBQVNZLElBQVQsQ0FBY0wsS0FBZCxFQUFxQjtBQUNsQ00sWUFBVTtBQUR3QixDQUFyQixDQUFmOztBQUlBO0FBQ0FGLFNBQVNKLEtBQVQsR0FBaUJBLEtBQWpCOztBQUVBLElBQUlPLGlCQUFpQjtBQUNuQkMsT0FBSyxPQURjO0FBRW5CQyxRQUFNYixHQUFHYSxJQUFILEVBRmE7QUFHbkJDLFlBQVVkLEdBQUdjLFFBQUgsRUFIUztBQUluQkMsUUFBTWYsR0FBR2UsSUFBSCxFQUphO0FBS25CVixXQUFVLE9BQU9XLE1BQVAsS0FBa0IsV0FBbkIsR0FBa0MsVUFBbEMsR0FBK0MsTUFMckM7QUFNbkJDLFlBQVVaLFFBQVFDLEdBQVIsQ0FBWVksUUFOSDtBQU9uQkMsdUJBQXFCZCxRQUFRQyxHQUFSLENBQVlDLHlCQVBkO0FBUW5CYSxrQkFBZ0JmLFFBQVFDLEdBQVIsQ0FBWWUsb0JBUlQ7QUFTbkJDLG9CQUFrQmpCLFFBQVFDLEdBQVIsQ0FBWWlCLHNCQVRYO0FBVW5CQyxtQkFBaUJuQixRQUFRQyxHQUFSLENBQVltQixxQkFWVjtBQVduQkMsZUFBYSxLQUFNLENBWEEsQ0FXRztBQVhILENBQXJCOztBQWNBbEIsU0FBU21CLGNBQVQsR0FBMEIsU0FBU0EsY0FBVCxDQUF5QkMsV0FBekIsRUFBc0M7QUFDOUQsU0FBTzdCLE9BQU9ZLGNBQVAsRUFBdUJpQixXQUF2QixDQUFQO0FBQ0QsQ0FGRDs7QUFJQXBCLFNBQVNxQixVQUFULEdBQXNCLFNBQVNBLFVBQVQsQ0FBcUJDLFNBQXJCLEVBQWdDQyxZQUFoQyxFQUE4QztBQUNsRSxNQUFJQyxlQUFlakMsT0FBTyxFQUFQLEVBQVdZLGNBQVgsRUFBMkJvQixZQUEzQixDQUFuQjtBQUNBRSxVQUFRQyxJQUFSLENBQWEsWUFBYixFQUEyQkosU0FBM0IsRUFBc0NFLFlBQXRDO0FBQ0EsU0FBT3hCLFNBQVMyQixLQUFULENBQWVMLFNBQWYsRUFBMEJFLFlBQTFCLENBQVA7QUFDRCxDQUpEOztBQU1BSSxPQUFPQyxPQUFQLEdBQWlCN0IsUUFBakIiLCJmaWxlIjoiTWl4cGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTWl4cGFuZWwgPSByZXF1aXJlKCdtaXhwYW5lbCcpXG52YXIgYXNzaWduID0gcmVxdWlyZSgnbG9kYXNoLmFzc2lnbicpXG52YXIgb3MgPSByZXF1aXJlKCdvcycpXG5cbnZhciB0b2tlbnMgPSB7XG4gIGRldmVsb3BtZW50OiAnNTNmMzYzOWY1NjQ4MDRkY2I3MTBmZDE4NTExZDFjMGInLFxuICBwcm9kdWN0aW9uOiAnNmYzMWQ0Zjk5Y2Y3MTAyNGNlMjdjM2U0MDRhNzlhNjEnXG59XG5cbnZhciB0b2tlbiA9IChwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX0VOVklST05NRU5UID09PSAncHJvZHVjdGlvbicpID8gdG9rZW5zLnByb2R1Y3Rpb24gOiB0b2tlbnMuZGV2ZWxvcG1lbnRcblxudmFyIG1peHBhbmVsID0gTWl4cGFuZWwuaW5pdCh0b2tlbiwge1xuICBwcm90b2NvbDogJ2h0dHBzJ1xufSlcblxuLy8gSnVzdCBpbiBjYXNlIHNvbWVib2R5IGRvd25zdHJlYW0gd2FudHMgdG8gcmVhZC9sb2cgdGhpcyB2YWx1ZVxubWl4cGFuZWwudG9rZW4gPSB0b2tlblxuXG52YXIgZGVmYXVsdFBheWxvYWQgPSB7XG4gIGFwcDogJ2hhaWt1JyxcbiAgYXJjaDogb3MuYXJjaCgpLFxuICBwbGF0Zm9ybTogb3MucGxhdGZvcm0oKSxcbiAgdHlwZTogb3MudHlwZSgpLFxuICBwcm9jZXNzOiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpID8gJ3JlbmRlcmVyJyA6ICdtYWluJyxcbiAgbm9kZV9lbnY6IHByb2Nlc3MuZW52Lk5PREVfRU5WLFxuICByZWxlYXNlX2Vudmlyb25tZW50OiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX0VOVklST05NRU5ULFxuICByZWxlYXNlX2JyYW5jaDogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9CUkFOQ0gsXG4gIHJlbGVhc2VfcGxhdGZvcm06IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfUExBVEZPUk0sXG4gIHJlbGVhc2VfdmVyc2lvbjogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9WRVJTSU9OLFxuICBkaXN0aW5jdF9pZDogdm9pZCAoMCkgLy8gQXNzaWduIHRvIGVtYWlsIGFkZHJlc3Mgd2hlbiBhdmFpbGFibGVcbn1cblxubWl4cGFuZWwubWVyZ2VUb1BheWxvYWQgPSBmdW5jdGlvbiBtZXJnZVRvUGF5bG9hZCAoa2VlcFBheWxvYWQpIHtcbiAgcmV0dXJuIGFzc2lnbihkZWZhdWx0UGF5bG9hZCwga2VlcFBheWxvYWQpXG59XG5cbm1peHBhbmVsLmhhaWt1VHJhY2sgPSBmdW5jdGlvbiBoYWlrdVRyYWNrIChldmVudE5hbWUsIGV2ZW50UGF5bG9hZCkge1xuICB2YXIgZmluYWxQYXlsb2FkID0gYXNzaWduKHt9LCBkZWZhdWx0UGF5bG9hZCwgZXZlbnRQYXlsb2FkKVxuICBjb25zb2xlLmluZm8oJ1ttaXhwYW5lbF0nLCBldmVudE5hbWUsIGZpbmFsUGF5bG9hZClcbiAgcmV0dXJuIG1peHBhbmVsLnRyYWNrKGV2ZW50TmFtZSwgZmluYWxQYXlsb2FkKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1peHBhbmVsXG4iXX0=