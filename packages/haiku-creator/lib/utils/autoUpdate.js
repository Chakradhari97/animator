'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var qs = require('qs');
var os = require('os');
var electron = require('electron');
var fetch = require('node-fetch');

var _require = require('./fileManipulation'),
    download = _require.download,
    unzip = _require.unzip;

var opts = {
  server: process.env.HAIKU_AUTOUPDATE_SERVER,
  environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  branch: process.env.HAIKU_RELEASE_BRANCH,
  platform: process.env.HAIKU_RELEASE_PLATFORM,
  version: process.env.HAIKU_RELEASE_VERSION,
  testAutoupdate: process.env.HAIKU_TEST_AUTOUPDATE
};

module.exports = {
  update: function update(url, progressCallback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : opts;

    return new Promise(function (resolve, reject) {
      if (process.env.HAIKU_SKIP_AUTOUPDATE !== '1') {
        if (!options.server || !options.environment || !options.branch || !options.platform || !options.version) {
          throw new Error('Missing release/autoupdate environment variables');
        }

        var tempPath = os.tmpdir();
        var zipPath = tempPath + '/haiku.zip';
        var installationPath = '/Applications';

        console.info('[autoupdater] About to download an update:', options, url);

        download(url, zipPath, progressCallback).then(function () {
          return unzip(zipPath, installationPath, 'Haiku');
        }).then(function () {
          electron.remote.app.exit();
        }).catch(reject);
      }
    });
  },
  checkUpdates: function checkUpdates() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.checkServer().then(function (_ref) {
        var status = _ref.status,
            url = _ref.url;

        if (status === 200 && url) {
          resolve({ shouldUpdate: true, url: url });
        }

        resolve({ shouldUpdate: false, url: null });
      }).catch(reject);
    });
  },
  checkServer: function checkServer() {
    var _this2 = this;

    var status = void 0;

    return new Promise(function (resolve, reject) {
      fetch(_this2.generateURL(opts)).then(function (response) {
        if (!response.ok) reject(Error(response.statusText + ' : ' + response.url));
        status = response.status;
        return status === 200 ? response.json() : {};
      }).then(function (data) {
        resolve({ status: status, url: data.url });
      }).catch(reject);
    });
  },
  generateURL: function generateURL(_ref2) {
    var server = _ref2.server,
        query = _objectWithoutProperties(_ref2, ['server']);

    var queryString = qs.stringify(query);

    return server + '/updates/latest?' + queryString;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRvVXBkYXRlLmpzIl0sIm5hbWVzIjpbInFzIiwicmVxdWlyZSIsIm9zIiwiZWxlY3Ryb24iLCJmZXRjaCIsImRvd25sb2FkIiwidW56aXAiLCJvcHRzIiwic2VydmVyIiwicHJvY2VzcyIsImVudiIsIkhBSUtVX0FVVE9VUERBVEVfU0VSVkVSIiwiZW52aXJvbm1lbnQiLCJIQUlLVV9SRUxFQVNFX0VOVklST05NRU5UIiwiYnJhbmNoIiwiSEFJS1VfUkVMRUFTRV9CUkFOQ0giLCJwbGF0Zm9ybSIsIkhBSUtVX1JFTEVBU0VfUExBVEZPUk0iLCJ2ZXJzaW9uIiwiSEFJS1VfUkVMRUFTRV9WRVJTSU9OIiwidGVzdEF1dG91cGRhdGUiLCJIQUlLVV9URVNUX0FVVE9VUERBVEUiLCJtb2R1bGUiLCJleHBvcnRzIiwidXBkYXRlIiwidXJsIiwicHJvZ3Jlc3NDYWxsYmFjayIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkhBSUtVX1NLSVBfQVVUT1VQREFURSIsIkVycm9yIiwidGVtcFBhdGgiLCJ0bXBkaXIiLCJ6aXBQYXRoIiwiaW5zdGFsbGF0aW9uUGF0aCIsImNvbnNvbGUiLCJpbmZvIiwidGhlbiIsInJlbW90ZSIsImFwcCIsImV4aXQiLCJjYXRjaCIsImNoZWNrVXBkYXRlcyIsImNoZWNrU2VydmVyIiwic3RhdHVzIiwic2hvdWxkVXBkYXRlIiwiZ2VuZXJhdGVVUkwiLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iLCJkYXRhIiwicXVlcnkiLCJxdWVyeVN0cmluZyIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsS0FBS0QsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNRSxXQUFXRixRQUFRLFVBQVIsQ0FBakI7QUFDQSxJQUFNRyxRQUFRSCxRQUFRLFlBQVIsQ0FBZDs7ZUFDMEJBLFFBQVEsb0JB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RUFNR2IsSUFOSCxDQU1RLFVBQUNjLElBQUQsRUFBVTtBQUNkeEIsZ0JBQVEsRUFBQ2lCLFFBQVFBLE1BQVQsRUFBaUJyQixLQUFLNEIsS0FBSzVCLEdBQTNCLEVBQVI7QUFDRCxPQVJILEVBU0drQixLQVRILENBU1NiLE1BVFQ7QUFVRCxLQVhNLENBQVA7QUFZRCxHQTdEYztBQStEZmtCLGFBL0RlLDhCQStEa0I7QUFBQSxRQUFuQnhDLE1BQW1CLFNBQW5CQSxNQUFtQjtBQUFBLFFBQVI4QyxLQUFROztBQUMvQixRQUFNQyxjQUFjdkQsR0FBR3dELFNBQUgsQ0FBYUYsS0FBYixDQUFwQjs7QUFFQSxXQUFVOUMsTUFBVix3QkFBbUMrQyxXQUFuQztBQUNEO0FBbkVjLENBQWpCIiwiZmlsZSI6ImF1dG9VcGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBxcyA9IHJlcXVpcmUoJ3FzJylcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKVxuY29uc3QgZWxlY3Ryb24gPSByZXF1aXJlKCdlbGVjdHJvbicpXG5jb25zdCBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKVxuY29uc3Qge2Rvd25sb2FkLCB1bnppcH0gPSByZXF1aXJlKCcuL2ZpbGVNYW5pcHVsYXRpb24nKVxuXG5jb25zdCBvcHRzID0ge1xuICBzZXJ2ZXI6IHByb2Nlc3MuZW52LkhBSUtVX0FVVE9VUERBVEVfU0VSVkVSLFxuICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9FTlZJUk9OTUVOVCxcbiAgYnJhbmNoOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX0JSQU5DSCxcbiAgcGxhdGZvcm06IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfUExBVEZPUk0sXG4gIHZlcnNpb246IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfVkVSU0lPTixcbiAgdGVzdEF1dG91cGRhdGU6IHByb2Nlc3MuZW52LkhBSUtVX1RFU1RfQVVUT1VQREFURVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXBkYXRlICh1cmwsIHByb2dyZXNzQ2FsbGJhY2ssIG9wdGlvbnMgPSBvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5IQUlLVV9TS0lQX0FVVE9VUERBVEUgIT09ICcxJykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIW9wdGlvbnMuc2VydmVyIHx8XG4gICAgICAgICAgIW9wdGlvbnMuZW52aXJvbm1lbnQgfHxcbiAgICAgICAgICAhb3B0aW9ucy5icmFuY2ggfHxcbiAgICAgICAgICAhb3B0aW9ucy5wbGF0Zm9ybSB8fFxuICAgICAgICAgICFvcHRpb25zLnZlcnNpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlbGVhc2UvYXV0b3VwZGF0ZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMnKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGVtcFBhdGggPSBvcy50bXBkaXIoKVxuICAgICAgICBjb25zdCB6aXBQYXRoID0gYCR7dGVtcFBhdGh9L2hhaWt1LnppcGBcbiAgICAgICAgY29uc3QgaW5zdGFsbGF0aW9uUGF0aCA9ICcvQXBwbGljYXRpb25zJ1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW2F1dG91cGRhdGVyXSBBYm91dCB0byBkb3dubG9hZCBhbiB1cGRhdGU6Jywgb3B0aW9ucywgdXJsKVxuXG4gICAgICAgIGRvd25sb2FkKHVybCwgemlwUGF0aCwgcHJvZ3Jlc3NDYWxsYmFjaylcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW56aXAoemlwUGF0aCwgaW5zdGFsbGF0aW9uUGF0aCwgJ0hhaWt1JylcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGVsZWN0cm9uLnJlbW90ZS5hcHAuZXhpdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgY2hlY2tVcGRhdGVzICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jaGVja1NlcnZlcigpXG4gICAgICAgIC50aGVuKCh7c3RhdHVzLCB1cmx9KSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwICYmIHVybCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh7c2hvdWxkVXBkYXRlOiB0cnVlLCB1cmx9KVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUoe3Nob3VsZFVwZGF0ZTogZmFsc2UsIHVybDogbnVsbH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChyZWplY3QpXG4gICAgfSlcbiAgfSxcblxuICBjaGVja1NlcnZlciAoKSB7XG4gICAgbGV0IHN0YXR1c1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZldGNoKHRoaXMuZ2VuZXJhdGVVUkwob3B0cykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHJlamVjdChFcnJvcihgJHtyZXNwb25zZS5zdGF0dXNUZXh0fSA6ICR7cmVzcG9uc2UudXJsfWApKVxuICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICAgIHJldHVybiBzdGF0dXMgPT09IDIwMCA/IHJlc3BvbnNlLmpzb24oKSA6IHt9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSh7c3RhdHVzOiBzdGF0dXMsIHVybDogZGF0YS51cmx9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgIH0pXG4gIH0sXG5cbiAgZ2VuZXJhdGVVUkwgKHtzZXJ2ZXIsIC4uLnF1ZXJ5fSkge1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXMuc3RyaW5naWZ5KHF1ZXJ5KVxuXG4gICAgcmV0dXJuIGAke3NlcnZlcn0vdXBkYXRlcy9sYXRlc3Q/JHtxdWVyeVN0cmluZ31gXG4gIH1cbn1cbiJdfQ==