'use strict';

var autoUpdater = require('electron').autoUpdater;

var opts = {
  server: process.env.HAIKU_AUTOUPDATE_SERVER,
  environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  branch: process.env.HAIKU_RELEASE_BRANCH,
  platform: process.env.HAIKU_RELEASE_PLATFORM,
  version: process.env.HAIKU_RELEASE_VERSION
};

if (!process.env.HAIKU_SKIP_AUTOUPDATE) {
  if (!opts.server || !opts.environment || !opts.branch || !opts.platform || !opts.version) {
    throw new Error('Missing release/autoupdate environment variables');
  }
}

module.exports = function run(cb) {
  console.log('[autoupdate] running');

  if (process.env.HAIKU_SKIP_AUTOUPDATE) {
    console.log('[autoupdate] skipped-update-check');
    return cb(null, 'skipped-update-check');
  }

  var feedURL = opts.server + '/updates/latest?environment=' + opts.environment + '&branch=' + opts.branch + '&platform=' + opts.platform + '&version=' + opts.version;

  autoUpdater.setFeedURL(feedURL);

  console.log('[autoupdate] checking');
  console.log('[autoupdate] url: ' + feedURL);

  autoUpdater.checkForUpdates();

  autoUpdater.on('error', function (error) {
    console.log('[autoupdate] error');
    return cb(error, 'error', autoUpdater);
  });

  autoUpdater.on('checking-for-update', function () {
    console.log('[autoupdate] checking-for-update');
    return cb(null, 'checking-for-update', autoUpdater);
  });

  autoUpdater.on('update-available', function () {
    console.log('[autoupdate] update-available');
    return cb(null, 'update-available', autoUpdater);
  });

  autoUpdater.on('update-not-available', function () {
    console.log('[autoupdate] update-not-available');
    return cb(null, 'update-not-available', autoUpdater);
  });

  autoUpdater.on('update-downloaded', function () {
    console.log('[autoupdate] update-downloaded');

    return cb(null, 'update-downloaded', autoUpdater, function () {
      console.log('[autoupdate] quit-and-install');
      // Note how this is run only if the callback is called.
      autoUpdater.quitAndInstall();
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRvVXBkYXRlLmpzIl0sIm5hbWVzIjpbImF1dG9VcGRhdGVyIiwicmVxdWlyZSIsIm9wdHMiLCJzZXJ2ZXIiLCJwcm9jZXNzIiwiZW52IiwiSEFJS1VfQVVUT1VQREFURV9TRVJWRVIiLCJlbnZpcm9ubWVudCIsIkhBSUtVX1JFTEVBU0VfRU5WSVJPTk1FTlQiLCJicmFuY2giLCJIQUlLVV9SRUxFQVNFX0JSQU5DSCIsInBsYXRmb3JtIiwiSEFJS1VfUkVMRUFTRV9QTEFURk9STSIsInZlcnNpb24iLCJIQUlLVV9SRUxFQVNFX1ZFUlNJT04iLCJIQUlLVV9TS0lQX0FVVE9VUERBVEUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJydW4iLCJjYiIsImNvbnNvbGUiLCJsb2ciLCJmZWVkVVJMIiwic2V0RmVlZFVSTCIsImNoZWNrRm9yVXBkYXRlcyIsIm9uIiwiZXJyb3IiLCJxdWl0QW5kSW5zdGFsbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxjQUFjQyxRQUFRLFVBQVIsRUFBb0JELFdBQXRDOztBQUVBLElBQU1FLE9BQU87QUFDWEMsVUFBUUMsUUFBUUMsR0FBUixDQUFZQyx1QkFEVDtBQUVYQyxlQUFhSCxRQUFRQyxHQUFSLENBQVlHLHlCQUZkO0FBR1hDLFVBQVFMLFFBQVFDLEdBQVIsQ0FBWUssb0JBSFQ7QUFJWEMsWUFBVVAsUUFBUUMsR0FBUixDQUFZTyxzQkFKWDtBQUtYQyxXQUFTVCxRQUFRQyxHQUFSLENBQVlTO0FBTFYsQ0FBYjs7QUFRQSxJQUFJLENBQUNWLFFBQVFDLEdBQVIsQ0FBWVUscUJBQWpCLEVBQXdDO0FBQ3RDLE1BQUksQ0FBQ2IsS0FBS0MsTUFBTixJQUFnQixDQUFDRCxLQUFLSyxXQUF0QixJQUFxQyxDQUFDTCxLQUFLTyxNQUEzQyxJQUFxRCxDQUFDUCxLQUFLUyxRQUEzRCxJQUF1RSxDQUFDVCxLQUFLVyxPQUFqRixFQUEwRjtBQUN4RixVQUFNLElBQUlHLEtBQUosQ0FBVSxrREFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxHQUFULENBQWNDLEVBQWQsRUFBa0I7QUFDakNDLFVBQVFDLEdBQVIsQ0FBWSxzQkFBWjs7QUFFQSxNQUFJbEIsUUFBUUMsR0FBUixDQUFZVSxxQkFBaEIsRUFBdUM7QUFDckNNLFlBQVFDLEdBQVIsQ0FBWSxtQ0FBWjtBQUNBLFdBQU9GLEdBQUcsSUFBSCxFQUFTLHNCQUFULENBQVA7QUFDRDs7QUFFRCxNQUFNRyxVQUFhckIsS0FBS0MsTUFBbEIsb0NBQXVERCxLQUFLSyxXQUE1RCxnQkFBa0ZMLEtBQUtPLE1BQXZGLGtCQUEwR1AsS0FBS1MsUUFBL0csaUJBQW1JVCxLQUFLVyxPQUE5STs7QUFFQWIsY0FBWXdCLFVBQVosQ0FBdUJELE9BQXZCOztBQUVBRixVQUFRQyxHQUFSLENBQVksdUJBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZLHVCQUF1QkMsT0FBbkM7O0FBRUF2QixjQUFZeUIsZUFBWjs7QUFFQXpCLGNBQVkwQixFQUFaLENBQWUsT0FBZixFQUF3QixVQUFDQyxLQUFELEVBQVc7QUFDakNOLFlBQVFDLEdBQVIsQ0FBWSxvQkFBWjtBQUNBLFdBQU9GLEdBQUdPLEtBQUgsRUFBVSxPQUFWLEVBQW1CM0IsV0FBbkIsQ0FBUDtBQUNELEdBSEQ7O0FBS0FBLGNBQVkwQixFQUFaLENBQWUscUJBQWYsRUFBc0MsWUFBTTtBQUMxQ0wsWUFBUUMsR0FBUixDQUFZLGtDQUFaO0FBQ0EsV0FBT0YsR0FBRyxJQUFILEVBQVMscUJBQVQsRUFBZ0NwQixXQUFoQyxDQUFQO0FBQ0QsR0FIRDs7QUFLQUEsY0FBWTBCLEVBQVosQ0FBZSxrQkFBZixFQUFtQyxZQUFNO0FBQ3ZDTCxZQUFRQyxHQUFSLENBQVksK0JBQVo7QUFDQSxXQUFPRixHQUFHLElBQUgsRUFBUyxrQkFBVCxFQUE2QnBCLFdBQTdCLENBQVA7QUFDRCxHQUhEOztBQUtBQSxjQUFZMEIsRUFBWixDQUFlLHNCQUFmLEVBQXVDLFlBQU07QUFDM0NMLFlBQVFDLEdBQVIsQ0FBWSxtQ0FBWjtBQUNBLFdBQU9GLEdBQUcsSUFBSCxFQUFTLHNCQUFULEVBQWlDcEIsV0FBakMsQ0FBUDtBQUNELEdBSEQ7O0FBS0FBLGNBQVkwQixFQUFaLENBQWUsbUJBQWYsRUFBb0MsWUFBTTtBQUN4Q0wsWUFBUUMsR0FBUixDQUFZLGdDQUFaOztBQUVBLFdBQU9GLEdBQUcsSUFBSCxFQUFTLG1CQUFULEVBQThCcEIsV0FBOUIsRUFBMkMsWUFBTTtBQUN0RHFCLGNBQVFDLEdBQVIsQ0FBWSwrQkFBWjtBQUNBO0FBQ0F0QixrQkFBWTRCLGNBQVo7QUFDRCxLQUpNLENBQVA7QUFLRCxHQVJEO0FBU0QsQ0E5Q0QiLCJmaWxlIjoiYXV0b1VwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhdXRvVXBkYXRlciA9IHJlcXVpcmUoJ2VsZWN0cm9uJykuYXV0b1VwZGF0ZXJcblxuY29uc3Qgb3B0cyA9IHtcbiAgc2VydmVyOiBwcm9jZXNzLmVudi5IQUlLVV9BVVRPVVBEQVRFX1NFUlZFUixcbiAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfRU5WSVJPTk1FTlQsXG4gIGJyYW5jaDogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9CUkFOQ0gsXG4gIHBsYXRmb3JtOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX1BMQVRGT1JNLFxuICB2ZXJzaW9uOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX1ZFUlNJT05cbn1cblxuaWYgKCFwcm9jZXNzLmVudi5IQUlLVV9TS0lQX0FVVE9VUERBVEUpIHtcbiAgaWYgKCFvcHRzLnNlcnZlciB8fCAhb3B0cy5lbnZpcm9ubWVudCB8fCAhb3B0cy5icmFuY2ggfHwgIW9wdHMucGxhdGZvcm0gfHwgIW9wdHMudmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZWxlYXNlL2F1dG91cGRhdGUgZW52aXJvbm1lbnQgdmFyaWFibGVzJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJ1biAoY2IpIHtcbiAgY29uc29sZS5sb2coJ1thdXRvdXBkYXRlXSBydW5uaW5nJylcblxuICBpZiAocHJvY2Vzcy5lbnYuSEFJS1VfU0tJUF9BVVRPVVBEQVRFKSB7XG4gICAgY29uc29sZS5sb2coJ1thdXRvdXBkYXRlXSBza2lwcGVkLXVwZGF0ZS1jaGVjaycpXG4gICAgcmV0dXJuIGNiKG51bGwsICdza2lwcGVkLXVwZGF0ZS1jaGVjaycpXG4gIH1cblxuICBjb25zdCBmZWVkVVJMID0gYCR7b3B0cy5zZXJ2ZXJ9L3VwZGF0ZXMvbGF0ZXN0P2Vudmlyb25tZW50PSR7b3B0cy5lbnZpcm9ubWVudH0mYnJhbmNoPSR7b3B0cy5icmFuY2h9JnBsYXRmb3JtPSR7b3B0cy5wbGF0Zm9ybX0mdmVyc2lvbj0ke29wdHMudmVyc2lvbn1gXG5cbiAgYXV0b1VwZGF0ZXIuc2V0RmVlZFVSTChmZWVkVVJMKVxuXG4gIGNvbnNvbGUubG9nKCdbYXV0b3VwZGF0ZV0gY2hlY2tpbmcnKVxuICBjb25zb2xlLmxvZygnW2F1dG91cGRhdGVdIHVybDogJyArIGZlZWRVUkwpXG5cbiAgYXV0b1VwZGF0ZXIuY2hlY2tGb3JVcGRhdGVzKClcblxuICBhdXRvVXBkYXRlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW2F1dG91cGRhdGVdIGVycm9yJylcbiAgICByZXR1cm4gY2IoZXJyb3IsICdlcnJvcicsIGF1dG9VcGRhdGVyKVxuICB9KVxuXG4gIGF1dG9VcGRhdGVyLm9uKCdjaGVja2luZy1mb3ItdXBkYXRlJywgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbYXV0b3VwZGF0ZV0gY2hlY2tpbmctZm9yLXVwZGF0ZScpXG4gICAgcmV0dXJuIGNiKG51bGwsICdjaGVja2luZy1mb3ItdXBkYXRlJywgYXV0b1VwZGF0ZXIpXG4gIH0pXG5cbiAgYXV0b1VwZGF0ZXIub24oJ3VwZGF0ZS1hdmFpbGFibGUnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1thdXRvdXBkYXRlXSB1cGRhdGUtYXZhaWxhYmxlJylcbiAgICByZXR1cm4gY2IobnVsbCwgJ3VwZGF0ZS1hdmFpbGFibGUnLCBhdXRvVXBkYXRlcilcbiAgfSlcblxuICBhdXRvVXBkYXRlci5vbigndXBkYXRlLW5vdC1hdmFpbGFibGUnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1thdXRvdXBkYXRlXSB1cGRhdGUtbm90LWF2YWlsYWJsZScpXG4gICAgcmV0dXJuIGNiKG51bGwsICd1cGRhdGUtbm90LWF2YWlsYWJsZScsIGF1dG9VcGRhdGVyKVxuICB9KVxuXG4gIGF1dG9VcGRhdGVyLm9uKCd1cGRhdGUtZG93bmxvYWRlZCcsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW2F1dG91cGRhdGVdIHVwZGF0ZS1kb3dubG9hZGVkJylcblxuICAgIHJldHVybiBjYihudWxsLCAndXBkYXRlLWRvd25sb2FkZWQnLCBhdXRvVXBkYXRlciwgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1thdXRvdXBkYXRlXSBxdWl0LWFuZC1pbnN0YWxsJylcbiAgICAgIC8vIE5vdGUgaG93IHRoaXMgaXMgcnVuIG9ubHkgaWYgdGhlIGNhbGxiYWNrIGlzIGNhbGxlZC5cbiAgICAgIGF1dG9VcGRhdGVyLnF1aXRBbmRJbnN0YWxsKClcbiAgICB9KVxuICB9KVxufVxuIl19