'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var qs = require('qs');
var os = require('os');
var electron = require('electron');
var fetch = require('node-fetch');

var _require = require('./fileManipulation'),
    download = _require.download,
    unzip = _require.unzip;

var opts = {
  server: process.env.HAIKU_AUTOUPDATE_SERVER,
  environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  branch: process.env.HAIKU_RELEASE_BRANCH,
  platform: process.env.HAIKU_RELEASE_PLATFORM,
  version: process.env.HAIKU_RELEASE_VERSION,
  testAutoupdate: process.env.HAIKU_TEST_AUTOUPDATE
};

module.exports = {
  update: function update(url, progressCallback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : opts;

    return new Promise(function (resolve, reject) {
      if (process.env.HAIKU_SKIP_AUTOUPDATE !== '1') {
        if (!options.server || !options.environment || !options.branch || !options.platform || !options.version) {
          throw new Error('Missing release/autoupdate environment variables');
        }

        var tempPath = os.tmpdir();
        var zipPath = tempPath + '/haiku.zip';
        var installationPath = '/Applications';

        console.info('[autoupdater] About to download an update:', options, url);

        download(url, zipPath, progressCallback).then(function () {
          unzip(zipPath, installationPath);
          electron.remote.app.exit();
        });
      }
    });
  },
  checkUpdates: function checkUpdates() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.checkServer().then(function (_ref) {
        var status = _ref.status,
            url = _ref.url;

        if (status === 200 && url) {
          resolve({ shouldUpdate: true, url: url });
        }

        resolve({ shouldUpdate: false, url: null });
      }).catch(reject);
    });
  },
  checkServer: function checkServer() {
    var _this2 = this;

    var status = void 0;

    return new Promise(function (resolve, reject) {
      fetch(_this2.generateURL(opts)).then(function (response) {
        if (!response.ok) {
          throw Error(response.statusText + ' : ' + response.url);
        }

        status = response.status;

        return status === 200 ? response.json() : {};
      }).then(function (data) {
        resolve({ status: status, url: data.url });
      }).catch(function (error) {
        reject(error);
      });
    });
  },
  generateURL: function generateURL(_ref2) {
    var server = _ref2.server,
        query = _objectWithoutProperties(_ref2, ['server']);

    var queryString = qs.stringify(query);

    return server + '/updates/latest?' + queryString;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRvVXBkYXRlLmpzIl0sIm5hbWVzIjpbInFzIiwicmVxdWlyZSIsIm9zIiwiZWxlY3Ryb24iLCJmZXRjaCIsImRvd25sb2FkIiwidW56aXAiLCJvcHRzIiwic2VydmVyIiwicHJvY2VzcyIsImVudiIsIkhBSUtVX0FVVE9VUERBVEVfU0VSVkVSIiwiZW52aXJvbm1lbnQiLCJIQUlLVV9SRUxFQVNFX0VOVklST05NRU5UIiwiYnJhbmNoIiwiSEFJS1VfUkVMRUFTRV9CUkFOQ0giLCJwbGF0Zm9ybSIsIkhBSUtVX1JFTEVBU0VfUExBVEZPUk0iLCJ2ZXJzaW9uIiwiSEFJS1VfUkVMRUFTRV9WRVJTSU9OIiwidGVzdEF1dG91cGRhdGUiLCJIQUlLVV9URVNUX0FVVE9VUERBVEUiLCJtb2R1bGUiLCJleHBvcnRzIiwidXBkYXRlIiwidXJsIiwicHJvZ3Jlc3NDYWxsYmFjayIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkhBSUtVX1NLSVBfQVVUT1VQREFURSIsIkVycm9yIiwidGVtcFBhdGgiLCJ0bXBkaXIiLCJ6aXBQYXRoIiwiaW5zdGFsbGF0aW9uUGF0aCIsImNvbnNvbGUiLCJpbmZvIiwidGhlbiIsInJlbW90ZSIsImFwcCIsImV4aXQiLCJjaGVja1VwZGF0ZXMiLCJjaGVja1NlcnZlciIsInN0YXR1cyIsInNob3VsZFVwZGF0ZSIsImNhdGNoIiwiZ2VuZXJhdGVVUkwiLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iLCJkYXRhIiwiZXJyb3IiLCJxdWVyeSIsInF1ZXJ5U3RyaW5nIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1FLFdBQVdGLFFBQVEsVUFBUixDQUFqQjtBQUNBLElBQU1HLFFBQVFILFFBQVEsWUFBUixDQUFkOztlQUMwQkEs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UUEsTUFBVCxFQUFpQnBCLEtBQUs0QixLQUFLNUIsR0FBM0IsRUFBUjtBQUNELE9BWkgsRUFhR3NCLEtBYkgsQ0FhUyxVQUFDTyxLQUFELEVBQVc7QUFDaEJ4QixlQUFPd0IsS0FBUDtBQUNELE9BZkg7QUFnQkQsS0FqQk0sQ0FBUDtBQWtCRCxHQWhFYztBQWtFZk4sYUFsRWUsOEJBa0VrQjtBQUFBLFFBQW5CeEMsTUFBbUIsU0FBbkJBLE1BQW1CO0FBQUEsUUFBUitDLEtBQVE7O0FBQy9CLFFBQU1DLGNBQWN4RCxHQUFHeUQsU0FBSCxDQUFhRixLQUFiLENBQXBCOztBQUVBLFdBQVUvQyxNQUFWLHdCQUFtQ2dELFdBQW5DO0FBQ0Q7QUF0RWMsQ0FBakIiLCJmaWxlIjoiYXV0b1VwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHFzID0gcmVxdWlyZSgncXMnKVxuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpXG5jb25zdCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcbmNvbnN0IGZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCB7ZG93bmxvYWQsIHVuemlwfSA9IHJlcXVpcmUoJy4vZmlsZU1hbmlwdWxhdGlvbicpXG5cbmNvbnN0IG9wdHMgPSB7XG4gIHNlcnZlcjogcHJvY2Vzcy5lbnYuSEFJS1VfQVVUT1VQREFURV9TRVJWRVIsXG4gIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX0VOVklST05NRU5ULFxuICBicmFuY2g6IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfQlJBTkNILFxuICBwbGF0Zm9ybTogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9QTEFURk9STSxcbiAgdmVyc2lvbjogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9WRVJTSU9OLFxuICB0ZXN0QXV0b3VwZGF0ZTogcHJvY2Vzcy5lbnYuSEFJS1VfVEVTVF9BVVRPVVBEQVRFXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1cGRhdGUgKHVybCwgcHJvZ3Jlc3NDYWxsYmFjaywgb3B0aW9ucyA9IG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHByb2Nlc3MuZW52LkhBSUtVX1NLSVBfQVVUT1VQREFURSAhPT0gJzEnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb3B0aW9ucy5zZXJ2ZXIgfHxcbiAgICAgICAgICAhb3B0aW9ucy5lbnZpcm9ubWVudCB8fFxuICAgICAgICAgICFvcHRpb25zLmJyYW5jaCB8fFxuICAgICAgICAgICFvcHRpb25zLnBsYXRmb3JtIHx8XG4gICAgICAgICAgIW9wdGlvbnMudmVyc2lvblxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVsZWFzZS9hdXRvdXBkYXRlIGVudmlyb25tZW50IHZhcmlhYmxlcycpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZW1wUGF0aCA9IG9zLnRtcGRpcigpXG4gICAgICAgIGNvbnN0IHppcFBhdGggPSBgJHt0ZW1wUGF0aH0vaGFpa3UuemlwYFxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25QYXRoID0gJy9BcHBsaWNhdGlvbnMnXG5cbiAgICAgICAgY29uc29sZS5pbmZvKCdbYXV0b3VwZGF0ZXJdIEFib3V0IHRvIGRvd25sb2FkIGFuIHVwZGF0ZTonLCBvcHRpb25zLCB1cmwpXG5cbiAgICAgICAgZG93bmxvYWQodXJsLCB6aXBQYXRoLCBwcm9ncmVzc0NhbGxiYWNrKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHVuemlwKHppcFBhdGgsIGluc3RhbGxhdGlvblBhdGgpXG4gICAgICAgICAgICBlbGVjdHJvbi5yZW1vdGUuYXBwLmV4aXQoKVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICBjaGVja1VwZGF0ZXMgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNoZWNrU2VydmVyKClcbiAgICAgICAgLnRoZW4oKHtzdGF0dXMsIHVybH0pID0+IHtcbiAgICAgICAgICBpZiAoc3RhdHVzID09PSAyMDAgJiYgdXJsKSB7XG4gICAgICAgICAgICByZXNvbHZlKHtzaG91bGRVcGRhdGU6IHRydWUsIHVybH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzb2x2ZSh7c2hvdWxkVXBkYXRlOiBmYWxzZSwgdXJsOiBudWxsfSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKHJlamVjdClcbiAgICB9KVxuICB9LFxuXG4gIGNoZWNrU2VydmVyICgpIHtcbiAgICBsZXQgc3RhdHVzXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZmV0Y2godGhpcy5nZW5lcmF0ZVVSTChvcHRzKSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gOiAke3Jlc3BvbnNlLnVybH1gKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuXG4gICAgICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gMjAwID8gcmVzcG9uc2UuanNvbigpIDoge31cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHtzdGF0dXM6IHN0YXR1cywgdXJsOiBkYXRhLnVybH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBnZW5lcmF0ZVVSTCAoe3NlcnZlciwgLi4ucXVlcnl9KSB7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxcy5zdHJpbmdpZnkocXVlcnkpXG5cbiAgICByZXR1cm4gYCR7c2VydmVyfS91cGRhdGVzL2xhdGVzdD8ke3F1ZXJ5U3RyaW5nfWBcbiAgfVxufVxuIl19