'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var qs = require('qs');
var os = require('os');
var electron = require('electron');
var fetch = require('node-fetch');

var _require = require('./fileManipulation'),
    download = _require.download,
    unzipAndOpen = _require.unzipAndOpen;

var opts = {
  server: process.env.HAIKU_AUTOUPDATE_SERVER,
  environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  branch: process.env.HAIKU_RELEASE_BRANCH,
  platform: process.env.HAIKU_RELEASE_PLATFORM,
  version: process.env.HAIKU_RELEASE_VERSION,
  testAutoupdate: process.env.HAIKU_TEST_AUTOUPDATE
};

module.exports = {
  update: function update(url, progressCallback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : opts;

    return new Promise(function (resolve, reject) {
      if (process.env.HAIKU_SKIP_AUTOUPDATE !== '1') {
        if (!options.server || !options.environment || !options.branch || !options.platform || !options.version) {
          return reject(Error('Missing release/autoupdate environment variables'));
        }

        var tempPath = os.tmpdir();
        var zipPath = tempPath + '/haiku.zip';
        var installationPath = '/Applications';

        console.info('[autoupdater] About to download an update:', options, url);

        download(url, zipPath, progressCallback).then(function () {
          return unzipAndOpen(zipPath, installationPath, 'Haiku');
        }).then(function () {
          electron.remote.app.exit();
        }).catch(reject);
      } else {
        /* If autoupdate is intentionally skipped, just silently resolve */
        resolve();
      }
    });
  },
  checkUpdates: function checkUpdates() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.checkServer().then(function (_ref) {
        var status = _ref.status,
            url = _ref.url;

        if (status === 200 && url) {
          resolve({ shouldUpdate: true, url: url });
        }

        resolve({ shouldUpdate: false, url: null });
      }).catch(reject);
    });
  },
  checkServer: function checkServer() {
    var _this2 = this;

    var status = void 0;

    return new Promise(function (resolve, reject) {
      fetch(_this2.generateURL(opts)).then(function (response) {
        if (!response.ok) reject(Error(response.statusText + ' : ' + response.url));
        status = response.status;
        return status === 200 ? response.json() : {};
      }).then(function (data) {
        resolve({ status: status, url: data.url });
      }).catch(reject);
    });
  },
  generateURL: function generateURL(_ref2) {
    var server = _ref2.server,
        query = _objectWithoutProperties(_ref2, ['server']);

    var queryString = qs.stringify(query);

    return server + '/updates/latest?' + queryString;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRvVXBkYXRlLmpzIl0sIm5hbWVzIjpbInFzIiwicmVxdWlyZSIsIm9zIiwiZWxlY3Ryb24iLCJmZXRjaCIsImRvd25sb2FkIiwidW56aXBBbmRPcGVuIiwib3B0cyIsInNlcnZlciIsInByb2Nlc3MiLCJlbnYiLCJIQUlLVV9BVVRPVVBEQVRFX1NFUlZFUiIsImVudmlyb25tZW50IiwiSEFJS1VfUkVMRUFTRV9FTlZJUk9OTUVOVCIsImJyYW5jaCIsIkhBSUtVX1JFTEVBU0VfQlJBTkNIIiwicGxhdGZvcm0iLCJIQUlLVV9SRUxFQVNFX1BMQVRGT1JNIiwidmVyc2lvbiIsIkhBSUtVX1JFTEVBU0VfVkVSU0lPTiIsInRlc3RBdXRvdXBkYXRlIiwiSEFJS1VfVEVTVF9BVVRPVVBEQVRFIiwibW9kdWxlIiwiZXhwb3J0cyIsInVwZGF0ZSIsInVybCIsInByb2dyZXNzQ2FsbGJhY2siLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJIQUlLVV9TS0lQX0FVVE9VUERBVEUiLCJFcnJvciIsInRlbXBQYXRoIiwidG1wZGlyIiwiemlwUGF0aCIsImluc3RhbGxhdGlvblBhdGgiLCJjb25zb2xlIiwiaW5mbyIsInRoZW4iLCJyZW1vdGUiLCJhcHAiLCJleGl0IiwiY2F0Y2giLCJjaGVja1VwZGF0ZXMiLCJjaGVja1NlcnZlciIsInN0YXR1cyIsInNob3VsZFVwZGF0ZSIsImdlbmVyYXRlVVJMIiwicmVzcG9uc2UiLCJvayIsInN0YXR1c1RleHQiLCJqc29uIiwiZGF0YSIsInF1ZXJ5IiwicXVlcnlTdHJpbmciLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUUsV0FBV0YsUUFBUSxVQUFSLENBQWpCO0FBQ0EsSUFBTUcsUUFBUUgsUUFBUSxZQUFSLENBQWQ7O2VBQ2lDQSxR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QUFTRyxJQUFULEVBQWpCLEdBQW1DLEVBQTFDO0FBQ0QsT0FMSCxFQU1HYixJQU5ILENBTVEsVUFBQ2MsSUFBRCxFQUFVO0FBQ2R4QixnQkFBUSxFQUFDaUIsUUFBUUEsTUFBVCxFQUFpQnJCLEtBQUs0QixLQUFLNUIsR0FBM0IsRUFBUjtBQUNELE9BUkgsRUFTR2tCLEtBVEgsQ0FTU2IsTUFUVDtBQVVELEtBWE0sQ0FBUDtBQVlELEdBaEVjO0FBa0Vma0IsYUFsRWUsOEJBa0VrQjtBQUFBLFFBQW5CeEMsTUFBbUIsU0FBbkJBLE1BQW1CO0FBQUEsUUFBUjhDLEtBQVE7O0FBQy9CLFFBQU1DLGNBQWN2RCxHQUFHd0QsU0FBSCxDQUFhRixLQUFiLENBQXBCOztBQUVBLFdBQVU5QyxNQUFWLHdCQUFtQytDLFdBQW5DO0FBQ0Q7QUF0RWMsQ0FBakIiLCJmaWxlIjoiYXV0b1VwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHFzID0gcmVxdWlyZSgncXMnKVxuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpXG5jb25zdCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcbmNvbnN0IGZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCB7ZG93bmxvYWQsIHVuemlwQW5kT3Blbn0gPSByZXF1aXJlKCcuL2ZpbGVNYW5pcHVsYXRpb24nKVxuXG5jb25zdCBvcHRzID0ge1xuICBzZXJ2ZXI6IHByb2Nlc3MuZW52LkhBSUtVX0FVVE9VUERBVEVfU0VSVkVSLFxuICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9FTlZJUk9OTUVOVCxcbiAgYnJhbmNoOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX0JSQU5DSCxcbiAgcGxhdGZvcm06IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfUExBVEZPUk0sXG4gIHZlcnNpb246IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfVkVSU0lPTixcbiAgdGVzdEF1dG91cGRhdGU6IHByb2Nlc3MuZW52LkhBSUtVX1RFU1RfQVVUT1VQREFURVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXBkYXRlICh1cmwsIHByb2dyZXNzQ2FsbGJhY2ssIG9wdGlvbnMgPSBvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5IQUlLVV9TS0lQX0FVVE9VUERBVEUgIT09ICcxJykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIW9wdGlvbnMuc2VydmVyIHx8XG4gICAgICAgICAgIW9wdGlvbnMuZW52aXJvbm1lbnQgfHxcbiAgICAgICAgICAhb3B0aW9ucy5icmFuY2ggfHxcbiAgICAgICAgICAhb3B0aW9ucy5wbGF0Zm9ybSB8fFxuICAgICAgICAgICFvcHRpb25zLnZlcnNpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChFcnJvcignTWlzc2luZyByZWxlYXNlL2F1dG91cGRhdGUgZW52aXJvbm1lbnQgdmFyaWFibGVzJykpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZW1wUGF0aCA9IG9zLnRtcGRpcigpXG4gICAgICAgIGNvbnN0IHppcFBhdGggPSBgJHt0ZW1wUGF0aH0vaGFpa3UuemlwYFxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25QYXRoID0gJy9BcHBsaWNhdGlvbnMnXG5cbiAgICAgICAgY29uc29sZS5pbmZvKCdbYXV0b3VwZGF0ZXJdIEFib3V0IHRvIGRvd25sb2FkIGFuIHVwZGF0ZTonLCBvcHRpb25zLCB1cmwpXG5cbiAgICAgICAgZG93bmxvYWQodXJsLCB6aXBQYXRoLCBwcm9ncmVzc0NhbGxiYWNrKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bnppcEFuZE9wZW4oemlwUGF0aCwgaW5zdGFsbGF0aW9uUGF0aCwgJ0hhaWt1JylcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGVsZWN0cm9uLnJlbW90ZS5hcHAuZXhpdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSWYgYXV0b3VwZGF0ZSBpcyBpbnRlbnRpb25hbGx5IHNraXBwZWQsIGp1c3Qgc2lsZW50bHkgcmVzb2x2ZSAqL1xuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGNoZWNrVXBkYXRlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2hlY2tTZXJ2ZXIoKVxuICAgICAgICAudGhlbigoe3N0YXR1cywgdXJsfSkgPT4ge1xuICAgICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCAmJiB1cmwpIHtcbiAgICAgICAgICAgIHJlc29sdmUoe3Nob3VsZFVwZGF0ZTogdHJ1ZSwgdXJsfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKHtzaG91bGRVcGRhdGU6IGZhbHNlLCB1cmw6IG51bGx9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgIH0pXG4gIH0sXG5cbiAgY2hlY2tTZXJ2ZXIgKCkge1xuICAgIGxldCBzdGF0dXNcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmZXRjaCh0aGlzLmdlbmVyYXRlVVJMKG9wdHMpKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSByZWplY3QoRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gOiAke3Jlc3BvbnNlLnVybH1gKSlcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXNcbiAgICAgICAgICByZXR1cm4gc3RhdHVzID09PSAyMDAgPyByZXNwb25zZS5qc29uKCkgOiB7fVxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoe3N0YXR1czogc3RhdHVzLCB1cmw6IGRhdGEudXJsfSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKHJlamVjdClcbiAgICB9KVxuICB9LFxuXG4gIGdlbmVyYXRlVVJMICh7c2VydmVyLCAuLi5xdWVyeX0pIHtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHFzLnN0cmluZ2lmeShxdWVyeSlcblxuICAgIHJldHVybiBgJHtzZXJ2ZXJ9L3VwZGF0ZXMvbGF0ZXN0PyR7cXVlcnlTdHJpbmd9YFxuICB9XG59XG4iXX0=