'use strict';

var _electron = require('electron');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util');

var _Mixpanel = require('haiku-serialization/src/utils/Mixpanel');

var _Mixpanel2 = _interopRequireDefault(_Mixpanel);

var _TopMenu = require('./TopMenu');

var _TopMenu2 = _interopRequireDefault(_TopMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// First-party dependencies
// Third-party dependencies
if (!_electron.app) {
  throw new Error('You can only run electron.js from an electron process');
}

// Local dependencies


_electron.app.setName('Haiku');

_electron.systemPreferences.setUserDefault('NSDisabledDictationMenuItem', 'boolean', true);
_electron.systemPreferences.setUserDefault('NSDisabledCharacterPaletteMenuItem', 'boolean', true);

// See bottom
function CreatorElectron() {
  _events2.default.apply(this);
}
(0, _util.inherits)(CreatorElectron, _events2.default);
var creator = new CreatorElectron();

var appUrl = 'file://' + _path2.default.join(__dirname, '..', 'index.html');

// Plumbing starts up this process, and it uses HAIKU_ENV to forward to us data about
// how it has been set up, e.g. what ports it is using for websocket server, envoy, etc.
// This is sent into the DOM part of the app at did-finish load; see below.
var haiku = global.process.env.HAIKU_ENV ? JSON.parse(global.process.env.HAIKU_ENV) : {};

if (!haiku.folder) {
  haiku.folder = global.process.env.HAIKU_PROJECT_FOLDER;
}

var browserWindow = null;

_electron.app.on('window-all-closed', function () {
  _electron.app.quit();
});

if (!haiku.plumbing) haiku.plumbing = {};

if (!haiku.plumbing.url) {
  if (global.process.env.NODE_ENV !== 'test' && !global.process.env.HAIKU_PLUMBING_PORT) {
    throw new Error('Oops! You must define a HAIKU_PLUMBING_PORT env var!');
  }

  haiku.plumbing.url = 'http://' + (global.process.env.HAIKU_PLUMBING_HOST || '0.0.0.0') + ':' + global.process.env.HAIKU_PLUMBING_PORT + '/';
}

function different(a, b) {
  return a !== b;
}

function createWindow() {
  _Mixpanel2.default.haikuTrack('app:initialize');

  var topmenu = new _TopMenu2.default();

  var menuspec = {
    undoables: [],
    redoables: [],
    projectList: [],
    isSaving: false,
    folder: null
  };

  topmenu.create(menuspec);

  _electron.ipcMain.on('master:heartbeat', function (ipcEvent, masterState) {
    // Update the global menu, but only if the data feeding it appears to have changed.
    // This is driven by a frequent heartbeat hence the reason we are checking for changes
    // before actually re-rendering the whole thing
    var didChange = false;

    // The reason for all these guards is that it appears that the heartbeat either
    // (a) continues to tick despite master crashing
    // (b) returns bad data, missing some fields, when master is in a bad state
    // So we check that the things exist before repopulating
    if (masterState) {
      if (masterState.gitUndoables) {
        if (different(menuspec.undoables.length, masterState.gitUndoables.length)) {
          didChange = true;
          menuspec.undoables = masterState.gitUndoables || [];
        }
      }

      if (masterState.gitRedoables) {
        if (different(menuspec.redoables.length, masterState.gitRedoables.length)) {
          didChange = true;
          menuspec.redoables = masterState.gitRedoables || [];
        }
      }

      if (different(menuspec.folder, masterState.folder)) {
        didChange = true;
        menuspec.folder = masterState.folder;
      }

      if (different(menuspec.isSaving, masterState.isSaving)) {
        didChange = true;
        menuspec.isSaving = masterState.isSaving;
      }
    }

    if (didChange) {
      topmenu.create(menuspec);
    }
  });

  _electron.ipcMain.on('renderer:projects-list-fetched', function (ipcEvent, projectList) {
    menuspec.projectList = projectList;
    topmenu.create(menuspec);
  });

  browserWindow = new _electron.BrowserWindow({
    title: 'Haiku',
    show: false, // Don't show the window until we are ready-to-show (see below)
    titleBarStyle: 'hidden-inset',
    webPreferences: {
      webSecurity: false
    }
  });

  browserWindow.setTitle('Haiku');
  browserWindow.maximize();
  browserWindow.loadURL(appUrl);

  // Sending our haiku configuration into the view so it can correctly set up
  // its own websocket connections to our plumbing server, etc.
  browserWindow.webContents.on('did-finish-load', function () {
    browserWindow.webContents.send('haiku', haiku);
  });

  // TopMenu global-menu:-prefixed events should delegate to BrowserWindow for event handlers.
  var globalMenuPassthroughs = ['check-updates', 'export', 'open-terminal', 'open-text-editor', 'redo', 'save', 'start-tour', 'toggle-dev-tools', 'undo', 'zoom-in', 'zoom-out',
  // Active in dev & staging only.
  'dump-system-info', 'open-hacker-helper'];

  globalMenuPassthroughs.forEach(function (command) {
    topmenu.on('global-menu:' + command, function () {
      var _browserWindow$webCon;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_browserWindow$webCon = browserWindow.webContents).send.apply(_browserWindow$webCon, ['global-menu:' + command].concat(args));
    });
  });

  browserWindow.on('closed', function () {
    browserWindow = null;
  });

  browserWindow.on('ready-to-show', function () {
    browserWindow.show();
  });

  // Uncomment me to automatically open the tools
  // browserWindow.openDevTools()
}

if (_electron.app.isReady()) {
  createWindow();
} else {
  _electron.app.on('ready', createWindow);
}

// Hacky: When plumbing launches inside an Electron process it expects an EventEmitter-like
// object as the export, so we expose this here even though it doesn't do much
module.exports = {
  default: creator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,